---
title: "UKHLS home-leaving 2009-2023 5.4"
format: pdf
editor: visual
---

## Reading and Cleaning data

suggestions: paying attention to the location (postcode)

```{r echo = T, results = 'hide'}
#houskeeping
#Clear objects already in the environment â€“ start with a clean slate
rm(list=ls())

#loading libraries
library(tidyverse)
library(svyVGAM)
library(sjlabelled)
library(desctable)
library(summarytools)
library(naniar)
library(survey)
library(svrep)
library(Hmisc)
library(srvyr)
library(marginaleffects)
library(haven)
library(catregs)
library(margins)
library(modelsummary)
library(zoo)
library(mice)
library(stargazer)
library(texreg)
library(VIM)
library(lattice)
library(ggplot2)
library(plyr)
library(dplyr)
```

### Wave 1-7 egoalt () hhresp ()

```{r}
inpath<-"D:/r git projects/ox-R/final essay/UKHLS n BHPS stata/UKDA-6614-stata/stata/stata13_se/"
missval <- c(-9, -8, -7, -2, -1)
#data================================================
#wave 1
a_indresp <- read_dta(file=paste0(inpath, "ukhls/a_indresp.dta"))
a_indresp<-a_indresp%>%dplyr::select(pidp, a_hidp, a_mastat_dv,
         a_age_dv, a_sex_dv, a_hiqual_dv,
         a_mastat_dv, a_racel_dv,a_fimnnet_dv,a_nchild_dv,a_urban_dv,a_gor_dv,a_jbstat,a_sf1,a_susp)

#wave 2
b_indresp <- read_dta(file=paste0(inpath, "ukhls/b_indresp.dta"))
b_indresp<-b_indresp%>%dplyr::select(pidp, b_hidp, b_mastat_dv,
         b_age_dv, b_sex_dv, b_hiqual_dv,
         b_mastat_dv, b_racel_dv,b_fimnnet_dv,b_nchild_dv,b_urban_dv,b_gor_dv,b_jbstat,b_sf1,b_scsf1,b_susp)

#wave 3
c_indresp <- read_dta(file=paste0(inpath, "ukhls/c_indresp.dta"))
c_indresp<-c_indresp%>%dplyr::select(pidp, c_hidp, c_mastat_dv,
         c_age_dv, c_sex_dv, c_hiqual_dv,
         c_mastat_dv, c_racel_dv,c_fimnnet_dv,c_nchild_dv,c_urban_dv,c_gor_dv,c_jbstat,c_sf1,c_scsf1,c_susp)

#wave 4
d_indresp <- read_dta(file=paste0(inpath, "ukhls/d_indresp.dta"))
d_indresp<-d_indresp%>%dplyr::select(pidp, d_hidp, d_mastat_dv,
         d_age_dv, d_sex_dv, d_hiqual_dv,
         d_mastat_dv, d_racel_dv,d_fimnnet_dv,d_nchild_dv,d_urban_dv,d_gor_dv,d_jbstat,d_sf1,d_scsf1,d_susp)

#wave 5
e_indresp <- read_dta(file=paste0(inpath, "ukhls/e_indresp.dta"))
e_indresp<-e_indresp%>%dplyr::select(pidp, e_hidp, e_mastat_dv,
         e_age_dv, e_sex_dv, e_hiqual_dv,
         e_mastat_dv, e_racel_dv,e_fimnnet_dv,e_nchild_dv,e_urban_dv,e_gor_dv,e_jbstat,e_sf1,e_scsf1,e_susp)

#wave 6
f_indresp <- read_dta(file=paste0(inpath, "ukhls/f_indresp.dta"))
f_indresp<-f_indresp%>%dplyr::select(pidp, f_hidp, f_mastat_dv,
         f_age_dv, f_sex_dv, f_hiqual_dv,
         f_mastat_dv, f_racel_dv,f_fimnnet_dv,f_nchild_dv,f_urban_dv,f_gor_dv,f_jbstat,f_sf1,f_scsf1,f_susp)

#wave 7
g_indresp <- read_dta(file=paste0(inpath, "ukhls/g_indresp.dta"))
g_indresp<-g_indresp%>%dplyr::select(pidp, g_hidp, g_mastat_dv,
         g_age_dv, g_sex_dv, g_hiqual_dv,
         g_mastat_dv, g_racel_dv,g_fimnnet_dv,g_nchild_dv,g_urban_dv,g_gor_dv,g_jbstat,g_sf1,g_scsf1,g_susp)

#egoalt================================================
a_egoalt<-read_dta(file=paste0(inpath, "ukhls/a_egoalt.dta")) 

b_egoalt<-read_dta(file=paste0(inpath, "ukhls/b_egoalt.dta")) 

c_egoalt<-read_dta(file=paste0(inpath, "ukhls/c_egoalt.dta")) 

d_egoalt<-read_dta(file=paste0(inpath, "ukhls/d_egoalt.dta")) 

e_egoalt<-read_dta(file=paste0(inpath, "ukhls/e_egoalt.dta")) 

f_egoalt<-read_dta(file=paste0(inpath, "ukhls/f_egoalt.dta")) 

g_egoalt<-read_dta(file=paste0(inpath, "ukhls/g_egoalt.dta")) 

#hhresp================================================
a_hhresp<-read_dta(file=paste0(inpath, "ukhls/a_hhresp.dta"))  %>%
 dplyr::select(a_hidp,a_tenure_dv,a_ivfho)

b_hhresp<-read_dta(file=paste0(inpath, "ukhls/b_hhresp.dta"))  %>%
 dplyr::select(b_hidp,b_tenure_dv,b_ivfho)

c_hhresp<-read_dta(file=paste0(inpath, "ukhls/c_hhresp.dta"))  %>%
 dplyr::select(c_hidp,c_tenure_dv,c_ivfho)

d_hhresp<-read_dta(file=paste0(inpath, "ukhls/d_hhresp.dta"))  %>%
 dplyr::select(d_hidp,d_tenure_dv,d_ivfho)

e_hhresp<-read_dta(file=paste0(inpath, "ukhls/e_hhresp.dta"))  %>%
 dplyr::select(e_hidp,e_tenure_dv,e_ivfho)

f_hhresp<-read_dta(file=paste0(inpath, "ukhls/f_hhresp.dta"))  %>%
 dplyr::select(f_hidp,f_tenure_dv,f_ivfho)

g_hhresp<-read_dta(file=paste0(inpath, "ukhls/g_hhresp.dta"))  %>%
 dplyr::select(g_hidp,g_tenure_dv,g_ivfho,g_iemb)

##emboost(hhsamp)===========================================
a_hhsamp<-read_dta(file=paste0(inpath, "ukhls/a_hhsamp.dta"))  %>%
 dplyr::select(a_hidp,a_emboost)
b_hhsamp<-read_dta(file=paste0(inpath, "ukhls/b_hhsamp.dta"))  %>%
 dplyr::select(b_hidp)
c_hhsamp<-read_dta(file=paste0(inpath, "ukhls/c_hhsamp.dta"))  %>%
 dplyr::select(c_hidp)
d_hhsamp<-read_dta(file=paste0(inpath, "ukhls/d_hhsamp.dta"))  %>%
 dplyr::select(d_hidp)
e_hhsamp<-read_dta(file=paste0(inpath, "ukhls/e_hhsamp.dta"))  %>%
 dplyr::select(e_hidp)
f_hhsamp<-read_dta(file=paste0(inpath, "ukhls/f_hhsamp.dta"))  %>%
 dplyr::select(f_hidp,f_emboost)
g_hhsamp<-read_dta(file=paste0(inpath, "ukhls/g_hhsamp.dta"))  %>%
 dplyr::select(g_hidp,g_emboost)

```

### Wave 8\~14 egoalt () hhresp ()

```{r}
#wave 8
h_indresp <- read_dta(file=paste0(inpath, "ukhls/h_indresp.dta"))
h_indresp<-h_indresp%>%dplyr::select(pidp, h_hidp, h_mastat_dv,
         h_age_dv, h_sex_dv, h_hiqual_dv,
         h_mastat_dv, h_racel_dv,h_fimnnet_dv,h_nchild_dv,h_urban_dv,h_gor_dv,h_jbstat,h_sf1,h_scsf1,h_susp)



#wave 9
i_indresp <- read_dta(file=paste0(inpath, "ukhls/i_indresp.dta"))
i_indresp<-i_indresp%>%dplyr::select(pidp, i_hidp, i_mastat_dv,
         i_age_dv, i_sex_dv, i_hiqual_dv,
         i_mastat_dv, i_racel_dv,i_fimnnet_dv,i_nchild_dv,i_urban_dv,i_gor_dv,i_jbstat,i_sf1,i_scsf1,i_susp)

#wave 10
j_indresp <- read_dta(file=paste0(inpath, "ukhls/j_indresp.dta"))
j_indresp<-j_indresp%>%dplyr::select(pidp, j_hidp, j_mastat_dv,
         j_age_dv, j_sex_dv, j_hiqual_dv,
         j_mastat_dv, j_racel_dv,j_fimnnet_dv,j_nchild_dv,j_urban_dv,j_gor_dv,j_jbstat,j_sf1,j_scsf1,j_susp)


#wave 11
k_indresp <- read_dta(file=paste0(inpath, "ukhls/k_indresp.dta"))
k_indresp<-k_indresp%>%dplyr::select(pidp, k_hidp, k_mastat_dv,
         k_age_dv, k_sex_dv, k_hiqual_dv,
         k_mastat_dv, k_racel_dv,k_fimnnet_dv,k_nchild_dv,k_urban_dv,k_gor_dv,k_jbstat,k_sf1,k_scsf1,k_susp)

#wave 12
l_indresp <- read_dta(file=paste0(inpath, "ukhls/l_indresp.dta"))
l_indresp<-l_indresp%>%dplyr::select(pidp, l_hidp, l_mastat_dv,
         l_age_dv, l_sex_dv, l_hiqual_dv,
         l_mastat_dv, l_racel_dv,l_fimnnet_dv,l_nchild_dv,l_urban_dv,l_gor_dv,l_jbstat,l_sf1,l_scsf1)

#wave 13
m_indresp <- read_dta(file=paste0(inpath, "ukhls/m_indresp.dta"))

m_indresp<-m_indresp%>%dplyr::select(pidp, m_hidp, m_mastat_dv,
         m_age_dv, m_sex_dv, m_hiqual_dv,
         m_mastat_dv, m_racel_dv,m_fimnnet_dv,m_nchild_dv,m_urban_dv,m_gor_dv,m_jbstat,m_sf1,m_scsf1)

#wave 14
n_indresp <- read_dta(file=paste0(inpath, "ukhls/n_indresp.dta"))

n_indresp<-n_indresp%>%dplyr::select(pidp, n_hidp, n_mastat_dv,
         n_age_dv, n_sex_dv, n_hiqual_dv,
         n_mastat_dv, n_racel_dv,n_fimnnet_dv,n_nchild_dv,n_urban_dv,n_gor_dv,n_jbstat,n_sf1,n_scsf1)

#egoalt================================================
h_egoalt<-read_dta(file=paste0(inpath, "ukhls/h_egoalt.dta")) 

i_egoalt<-read_dta(file=paste0(inpath, "ukhls/i_egoalt.dta")) 

j_egoalt<-read_dta(file=paste0(inpath, "ukhls/j_egoalt.dta")) 

k_egoalt<-read_dta(file=paste0(inpath, "ukhls/k_egoalt.dta")) 

l_egoalt<-read_dta(file=paste0(inpath, "ukhls/l_egoalt.dta")) 

m_egoalt<-read_dta(file=paste0(inpath, "ukhls/m_egoalt.dta")) 

n_egoalt<-read_dta(file=paste0(inpath, "ukhls/n_egoalt.dta")) 

#hhresp================================================
h_hhresp<-read_dta(file=paste0(inpath, "ukhls/h_hhresp.dta"))  %>%
 dplyr::select(h_hidp,h_tenure_dv,h_ivfho,h_iemb)

i_hhresp<-read_dta(file=paste0(inpath, "ukhls/i_hhresp.dta"))  %>%
 dplyr::select(i_hidp,i_tenure_dv,i_ivfho,i_iemb)

j_hhresp<-read_dta(file=paste0(inpath, "ukhls/j_hhresp.dta"))  %>%
 dplyr::select(j_hidp,j_tenure_dv,j_ivfho,j_iemb)

k_hhresp<-read_dta(file=paste0(inpath, "ukhls/k_hhresp.dta"))  %>%
 dplyr::select(k_hidp,k_tenure_dv,k_ivfho,k_iemb)

l_hhresp<-read_dta(file=paste0(inpath, "ukhls/l_hhresp.dta"))  %>%
 dplyr::select(l_hidp,l_tenure_dv,l_ivfho,l_iemb)

m_hhresp<-read_dta(file=paste0(inpath, "ukhls/m_hhresp.dta"))  %>%
 dplyr::select(m_hidp,m_tenure_dv,m_ivfho)

n_hhresp<-read_dta(file=paste0(inpath, "ukhls/n_hhresp.dta"))  %>%
 dplyr::select(n_hidp,n_tenure_dv,n_ivfho)

##emboost(hhsamp)===========================================
h_hhsamp<-read_dta(file=paste0(inpath, "ukhls/h_hhsamp.dta"))  %>%
 dplyr::select(h_hidp,h_emboost)
i_hhsamp<-read_dta(file=paste0(inpath, "ukhls/i_hhsamp.dta"))  %>%
 dplyr::select(i_hidp,i_emboost)
j_hhsamp<-read_dta(file=paste0(inpath, "ukhls/j_hhsamp.dta"))  %>%
 dplyr::select(j_hidp,j_emboost)
k_hhsamp<-read_dta(file=paste0(inpath, "ukhls/k_hhsamp.dta"))  %>%
 dplyr::select(k_hidp,k_emboost)
l_hhsamp<-read_dta(file=paste0(inpath, "ukhls/l_hhsamp.dta"))  %>%
 dplyr::select(l_hidp,l_emboost)
m_hhsamp<-read_dta(file=paste0(inpath, "ukhls/m_hhsamp.dta"))  %>%
 dplyr::select(m_hidp,m_emboost)
n_hhsamp<-read_dta(file=paste0(inpath, "ukhls/n_hhsamp.dta"))  %>%
 dplyr::select(n_hidp,n_emboost)






```

```{r}
##remove all missing values in indresp
for (i in 1:5) {
  a_indresp<- a_indresp %>%
    mutate_all(., list(~na_if(., missval[i])))}
for (i in 1:5) {
  b_indresp<- b_indresp %>%
    mutate_all(., list(~na_if(., missval[i])))}
for (i in 1:5) {
  c_indresp<- c_indresp %>%
    mutate_all(., list(~na_if(., missval[i])))}
for (i in 1:5) {
  d_indresp<- d_indresp %>%
    mutate_all(., list(~na_if(., missval[i])))}
for (i in 1:5) {
  e_indresp<- e_indresp %>%
    mutate_all(., list(~na_if(., missval[i])))}
for (i in 1:5) {
  f_indresp<- f_indresp %>%
    mutate_all(., list(~na_if(., missval[i])))}
for (i in 1:5) {
  g_indresp<- g_indresp %>%
    mutate_all(., list(~na_if(., missval[i])))}
for (i in 1:5) {
  h_indresp<- h_indresp %>%
    mutate_all(., list(~na_if(., missval[i])))}
for (i in 1:5) {
  i_indresp<- i_indresp %>%
    mutate_all(., list(~na_if(., missval[i])))
}
for (i in 1:5) {
  j_indresp<- j_indresp %>%
    mutate_all(., list(~na_if(., missval[i])))
}
for (i in 1:5) {
  k_indresp<- k_indresp %>%
    mutate_all(., list(~na_if(., missval[i])))
}
for (i in 1:5) {
  l_indresp<- l_indresp %>%
    mutate_all(., list(~na_if(., missval[i])))}
for (i in 1:5) {
  m_indresp<- m_indresp %>%
    mutate_all(., list(~na_if(., missval[i])))}
for (i in 1:5) {
  n_indresp<- n_indresp %>%
    mutate_all(., list(~na_if(., missval[i])))}

##hhresp
for (i in 1:5) {
  h_hhresp<- h_hhresp %>%
    mutate_all(., list(~na_if(., missval[i])))}
for (i in 1:5) {
  i_hhresp<- i_hhresp %>%
    mutate_all(., list(~na_if(., missval[i])))}
for (i in 1:5) {
  j_hhresp<- j_hhresp %>%
    mutate_all(., list(~na_if(., missval[i])))}
for (i in 1:5) {
  k_hhresp<- k_hhresp %>%
    mutate_all(., list(~na_if(., missval[i])))}
for (i in 1:5) {
  l_hhresp<- l_hhresp %>%
    mutate_all(., list(~na_if(., missval[i])))}
for (i in 1:5) {
  m_hhresp<- m_hhresp %>%
    mutate_all(., list(~na_if(., missval[i])))}
for (i in 1:5) {
  n_hhresp<- n_hhresp %>%
    mutate_all(., list(~na_if(., missval[i])))}

##hhsamp
for (i in 1:5) {
  h_hhsamp<- h_hhsamp %>%
    mutate_all(., list(~na_if(., missval[i])))}  
for (i in 1:5) {
  i_hhsamp<- i_hhsamp %>%
    mutate_all(., list(~na_if(., missval[i])))}
for (i in 1:5) {
  j_hhsamp<- j_hhsamp %>%
    mutate_all(., list(~na_if(., missval[i])))}
for (i in 1:5) {
  k_hhsamp<- k_hhsamp %>%
    mutate_all(., list(~na_if(., missval[i])))}
for (i in 1:5) {
  l_hhsamp<- l_hhsamp %>%
    mutate_all(., list(~na_if(., missval[i])))}
for (i in 1:5) {
  m_hhsamp<- m_hhsamp %>%
    mutate_all(., list(~na_if(., missval[i])))}
for (i in 1:5) {
  n_hhsamp<- n_hhsamp %>%
    mutate_all(., list(~na_if(., missval[i])))}
```

### Getting the youths not living with parents in the next wave

#### Wave 1\~6

##### Wave 1

```{r}
mothers <- a_egoalt %>%
  filter(a_relationship_dv %in% c(4) & a_asex==2) %>%
  select(pidp, apidp)
mothers$mother_pidp=mothers$apidp

a_egoalt <- a_egoalt %>%
  full_join(mothers, by=c("pidp", "apidp")) 

rm(mothers)

fathers <- a_egoalt %>%
  filter(a_relationship_dv %in% c(4) & a_asex==1) %>%
  select(pidp, apidp)
fathers$father_pidp=fathers$apidp

a_egoalt <- a_egoalt %>%
  full_join(fathers, by=c("pidp", "apidp"))

rm(fathers)

other_relatives <- a_egoalt %>%
  filter(!(a_relationship_dv%in% c(1,2,3,4,9)) ) %>%
  select(pidp, apidp)
other_relatives$other_relatives_pidp=other_relatives$apidp

a_egoalt <- a_egoalt %>%
  full_join(other_relatives, by=c("pidp", "apidp"))

rm(other_relatives)

#at least two relatives in the household structure who are not the focal individual's parent, partner, or child
test<-a_egoalt%>%aggregate(other_relatives_pidp~pidp,FUN=length)
colnames(test)<-c("pidp","relativenum")
a_egoalt<-join_all(list(a_egoalt,test),by="pidp",type="left")
rm(test)


#whether respondent live with a child
child <- a_egoalt %>%
  filter(a_relationship_dv%in% c(9) ) %>%
  select(pidp, apidp)
child$child_pidp=child$apidp
a_egoalt <- a_egoalt %>%
  full_join(child, by=c("pidp", "apidp"))
rm(child)
#count number of respondent children
test<-a_egoalt%>%aggregate(child_pidp~pidp,FUN=length)
colnames(test)<-c("pidp","childnum")
a_egoalt<-join_all(list(a_egoalt,test),by="pidp",type="left")
rm(test)


#whether respondent cohabit with a partner(marriage)
mar <- a_egoalt %>%
  filter(a_relationship_dv%in% c(1,2) ) %>%
  select(pidp, apidp)
mar$mar_pidp=mar$apidp
a_egoalt <- a_egoalt %>%
  full_join(mar, by=c("pidp", "apidp"))
rm(mar)
#count number of respondent married partner
test<-a_egoalt%>%aggregate(mar_pidp~pidp,FUN=length)
colnames(test)<-c("pidp","live_with_husbandwife")
a_egoalt<-join_all(list(a_egoalt,test),by="pidp",type="left")
rm(test)

#whether respondent cohabit with a partner(cohabitation)
cohab <- a_egoalt %>%
  filter(a_relationship_dv%in% c(3) ) %>%
  select(pidp, apidp)
cohab$cohab_pidp=cohab$apidp
a_egoalt <- a_egoalt %>%
  full_join(cohab, by=c("pidp", "apidp"))
rm(cohab)
#count number of cohabitee
test<-a_egoalt%>%aggregate(cohab_pidp~pidp,FUN=length)
colnames(test)<-c("pidp","live_with_cohabitee")
a_egoalt<-join_all(list(a_egoalt,test),by="pidp",type="left")
rm(test)


# leave: not live with mothers
a_egoalt$separated_m <- labelled(
  ifelse((!is.na(a_egoalt$mother_pidp) & a_egoalt$a_enwstat==5), -8, 
  ifelse((!is.na(a_egoalt$mother_pidp)  & a_egoalt$a_anwstat==5), 3,
  ifelse((!is.na(a_egoalt$mother_pidp)  & 
          a_egoalt$a_anwstat==2 & a_egoalt$a_enwstat %in% c(3,4)), 2,
  ifelse((!is.na(a_egoalt$mother_pidp) & 
          a_egoalt$a_anwstat %in% c(3,4) & a_egoalt$a_enwstat==2), 2,
  ifelse((!is.na(a_egoalt$mother_pidp) &
          a_egoalt$a_anwstat==2 & a_egoalt$a_enwstat==2), 1,
  ifelse((!is.na(a_egoalt$mother_pidp)& a_egoalt$a_anwstat==1), 0,
        ifelse((!is.na(a_egoalt$mother_pidp)), -9, NA))))))),
  
  label = "Whether living with biological mother at the next wave",
  labels = c("missing" = -9, 
             "ego not alive at next wave" = -8,
             "living together at next wave" = 0, "separated_m at next wave" = 1,
             "possibly separated_m at next wave" = 2,
             "mother not alive at next wave" = 3))

#leave: not live with fathers
a_egoalt$separated_f <- labelled(
  ifelse((!is.na(a_egoalt$father_pidp) & a_egoalt$a_enwstat==5), -8, 
  ifelse((!is.na(a_egoalt$father_pidp)  & a_egoalt$a_anwstat==5), 3,
  ifelse((!is.na(a_egoalt$father_pidp)  & 
          a_egoalt$a_anwstat==2 & a_egoalt$a_enwstat %in% c(3,4)), 2,
  ifelse((!is.na(a_egoalt$father_pidp) & 
          a_egoalt$a_anwstat %in% c(3,4) & a_egoalt$a_enwstat==2), 2,
  ifelse((!is.na(a_egoalt$father_pidp) &
          a_egoalt$a_anwstat==2 & a_egoalt$a_enwstat==2), 1,
  ifelse((!is.na(a_egoalt$father_pidp) & a_egoalt$a_anwstat==1), 0,
        ifelse((!is.na(a_egoalt$father_pidp)), -9, NA))))))),
  
  label = "Whether living with biological father at the next wave",
  labels = c("missing" = -9, 
             "ego not alive at next wave" = -8,
             "living together at next wave" = 0, "separated at next wave" = 1,
             "possibly separated at next wave" = 2,
             "father not alive at next wave" = 3))


#fill the separate indicator
a_egoalt<-a_egoalt %>%group_by(pidp) %>%tidyr::fill(separated_m,.direction="updown")
a_egoalt<-a_egoalt %>%group_by(pidp) %>%tidyr::fill(separated_f,.direction="updown")


#find out who separate from both parents
#not live with both parents
a_egoalt$separated<- labelled(
  ifelse((a_egoalt$separated_m%in%c(1)&a_egoalt$separated_f%in%c(1)),1,
         
  ifelse((a_egoalt$separated_m%in%c(1)& is.na(a_egoalt$separated_f)),1,#one
  ifelse((a_egoalt$separated_f%in%c(1)& is.na(a_egoalt$separated_m)),1,
         
  ifelse((a_egoalt$separated_f%in%c(1)& a_egoalt$separated_m%in%c(3)),1,#deadth
  ifelse((a_egoalt$separated_m%in%c(1)& a_egoalt$separated_f%in%c(3)),1,      

  #possibly separated       
  ifelse((a_egoalt$separated_m%in%c(2)&a_egoalt$separated_f%in%c(2)),2,
  ifelse((a_egoalt$separated_m%in%c(1)&a_egoalt$separated_f%in%c(2)),2,
  ifelse((a_egoalt$separated_m%in%c(2)&a_egoalt$separated_f%in%c(1)),2,
         
  ifelse((a_egoalt$separated_m%in%c(2)& is.na(a_egoalt$separated_f)),2,#one
  ifelse((a_egoalt$separated_f%in%c(2)& is.na(a_egoalt$separated_m)),2, 
         
  ifelse((a_egoalt$separated_f%in%c(2)& a_egoalt$separated_m%in%c(3)),1,#deadth
  ifelse((a_egoalt$separated_m%in%c(2)& a_egoalt$separated_f%in%c(3)),1,             
         
  #living together     
  ifelse((a_egoalt$separated_m%in%c(0)|a_egoalt$separated_f%in%c(0)),0,
  #respondents dead
  ifelse((a_egoalt$separated_m%in%c(-8)|a_egoalt$separated_f%in%c(-8)),-8,
         ifelse((!is.na(a_egoalt$separated_m)|!is.na(a_egoalt$separated_f)),-9,NA))))))))))))))),
         
  label = "Whether living with at least one biological parent at the next wave",
  labels = c("missing" = -9, 
             "ego not alive at next wave" = -8,
             "living together with at least one parent at next wave" = 0,
             "separated from both parents at next wave" = 1,
             "possibly separated from both parents at next wave" = 2))


#living with both parents indicator 
a_egoalt<-a_egoalt %>%group_by(pidp) %>%tidyr::fill(mother_pidp,.direction="updown")
a_egoalt<-a_egoalt %>%group_by(pidp) %>%tidyr::fill(father_pidp,.direction="updown")


#flags for living with mother or father this wave
a_egoalt<-a_egoalt%>%group_by(pidp)%>%mutate(livewithmother=ifelse(!is.na(a_egoalt$mother_pidp),1,0))
a_egoalt<-a_egoalt%>%group_by(pidp)%>%mutate(livewithfather=ifelse(!is.na(a_egoalt$father_pidp),1,0))

#living with both parents this wave
a_egoalt$liveboth<-c(0)
a_egoalt$liveboth[a_egoalt$livewithmother==1 & a_egoalt$livewithfather==1]<-1


#a column for living with mother, father, or both this wave
a_egoalt$lvpa<-c(0)
a_egoalt$lvpa[a_egoalt$livewithmother==1]<-1
a_egoalt$lvpa[a_egoalt$livewithfather==1]<-2
a_egoalt$lvpa[a_egoalt$liveboth==1]<-3
a_egoalt$lvpa[a_egoalt$lvpa==0]<-NA

a_egoalt$lvpa<-factor(a_egoalt$lvpa, levels=c(1,2,3),labels=c("live with mother","live with father","live with both parents"))

#select only for those who live with at least one parent this wave and at risk of leaving next wave
a_egoalt<-a_egoalt[which(a_egoalt$lvpa%in%c("live with mother","live with father","live with both parents")),]

#merge datafiles
a_indresp<-a_indresp%>%dplyr::select(pidp, a_hidp, a_mastat_dv,
         a_age_dv, a_sex_dv, a_hiqual_dv,
         a_mastat_dv, a_racel_dv,a_fimnnet_dv,a_nchild_dv,a_urban_dv,a_gor_dv,a_jbstat,a_sf1,a_susp)


a_egoaltt<-a_egoalt%>%dplyr::select(pidp,mother_pidp,father_pidp,separated_m,separated_f,separated,lvpa,relativenum,childnum,live_with_husbandwife,live_with_cohabitee)

#child levels
a_indrespc<-join_all(list(a_indresp,a_egoaltt), by='pidp', type='left')
a_indrespc<-a_indrespc %>% distinct_at(vars(pidp), .keep_all = TRUE)

a_indrespc<-a_indrespc[(which(!is.na(a_indrespc$mother_pidp)|!is.na(a_indrespc$father_pidp))),]



#add parent levels
a_indresppt <-a_indresp

#join parental data by pidp
father<-as.data.frame(a_indrespc$father_pidp)
mother<-as.data.frame(a_indrespc$mother_pidp)

colnames(father)[1]<-"pidp"
colnames(mother)[1]<-"pidp"

#attached parental values
a_indresppf<-join_all(list(father,a_indresppt), by='pidp', type='left')
a_indresppm<-join_all(list(mother,a_indresppt), by='pidp', type='left')

#for housing tenure
a_indresppf<-join_all(list(a_indresppf,a_hhresp), by='a_hidp', type='left')
a_indresppm<-join_all(list(a_indresppm,a_hhresp), by='a_hidp', type='left')

#for emboost
a_indresppf<-join_all(list(a_indresppf,a_hhsamp), by='a_hidp', type='left')
a_indresppm<-join_all(list(a_indresppm,a_hhsamp), by='a_hidp', type='left')

#rename var to differentiate parents
a_indresppf <-
        rename_at(a_indresppf, vars(starts_with("a_")), ~str_replace(., "a_", "ip_")) 
a_indresppm <-
        rename_at(a_indresppm, vars(starts_with("a_")), ~str_replace(., "a_", "im_")) 

#join to the child-level data by parent's pidp
colnames(a_indresppf)[1]<-"father_pidp"
colnames(a_indresppm)[1]<-"mother_pidp"

a_indresppf<-join_all(list(a_indrespc,a_indresppf), by="father_pidp", type='left')
a_indresppm<-join_all(list(a_indrespc,a_indresppm), by="mother_pidp", type='left')

a_indrespp<-join_all(list(a_indresppm,a_indresppf), by="pidp", type='left')

a_indrespp<-a_indrespp %>% distinct_at(vars(pidp), .keep_all = TRUE)

rm(father,mother,a_egoaltt,a_indrespc,a_indresppf,a_indresppm,a_indresppt)

#drop duplicate columns
a_indrespp <- a_indrespp %>% select(-contains(".1"))

## add cross wave identifier
a_indrespp$from_wave_a<-1

```

##### Wave 2

```{r}
mothers <- b_egoalt %>%
  filter(b_relationship_dv %in% c(4) & b_asex==2) %>%
  select(pidp, apidp)
mothers$mother_pidp=mothers$apidp

b_egoalt <- b_egoalt %>%
  full_join(mothers, by=c("pidp", "apidp")) 

rm(mothers)

fathers <- b_egoalt %>%
  filter(b_relationship_dv %in% c(4) & b_asex==1) %>%
  select(pidp, apidp)
fathers$father_pidp=fathers$apidp

b_egoalt <- b_egoalt %>%
  full_join(fathers, by=c("pidp", "apidp"))

rm(fathers)

other_relatives <- b_egoalt %>%
  filter(!(b_relationship_dv%in% c(1,2,3,4,9)) ) %>%
  select(pidp, apidp)
other_relatives$other_relatives_pidp=other_relatives$apidp

b_egoalt <- b_egoalt %>%
  full_join(other_relatives, by=c("pidp", "apidp"))

rm(other_relatives)

#at least two relatives in the household structure who are not the focal individual's parent, partner, or child
test<-b_egoalt%>%aggregate(other_relatives_pidp~pidp,FUN=length)
colnames(test)<-c("pidp","relativenum")
b_egoalt<-join_all(list(b_egoalt,test),by="pidp",type="left")
rm(test)


#whether respondent live with a child
child <- b_egoalt %>%
  filter(b_relationship_dv%in% c(9) ) %>%
  select(pidp, apidp)
child$child_pidp=child$apidp
b_egoalt <- b_egoalt %>%
  full_join(child, by=c("pidp", "apidp"))
rm(child)
#count number of respondent children
test<-b_egoalt%>%aggregate(child_pidp~pidp,FUN=length)
colnames(test)<-c("pidp","childnum")
b_egoalt<-join_all(list(b_egoalt,test),by="pidp",type="left")
rm(test)


#whether respondent cohabit with a partner(marriage)
mar <- b_egoalt %>%
  filter(b_relationship_dv%in% c(1,2) ) %>%
  select(pidp, apidp)
mar$mar_pidp=mar$apidp
b_egoalt <- b_egoalt %>%
  full_join(mar, by=c("pidp", "apidp"))
rm(mar)
#count number of respondent married partner
test<-b_egoalt%>%aggregate(mar_pidp~pidp,FUN=length)
colnames(test)<-c("pidp","live_with_husbandwife")
b_egoalt<-join_all(list(b_egoalt,test),by="pidp",type="left")
rm(test)

#whether respondent cohabit with a partner(cohabitation)
cohab <- b_egoalt %>%
  filter(b_relationship_dv%in% c(3) ) %>%
  select(pidp, apidp)
cohab$cohab_pidp=cohab$apidp
b_egoalt <- b_egoalt %>%
  full_join(cohab, by=c("pidp", "apidp"))
rm(cohab)
#count number of cohabitee
test<-b_egoalt%>%aggregate(cohab_pidp~pidp,FUN=length)
colnames(test)<-c("pidp","live_with_cohabitee")
b_egoalt<-join_all(list(b_egoalt,test),by="pidp",type="left")
rm(test)


# leave: not live with mothers
b_egoalt$separated_m <- labelled(
  ifelse((!is.na(b_egoalt$mother_pidp) & b_egoalt$b_enwstat==5), -8, 
  ifelse((!is.na(b_egoalt$mother_pidp)  & b_egoalt$b_anwstat==5), 3,
  ifelse((!is.na(b_egoalt$mother_pidp)  & 
          b_egoalt$b_anwstat==2 & b_egoalt$b_enwstat %in% c(3,4)), 2,
  ifelse((!is.na(b_egoalt$mother_pidp) & 
          b_egoalt$b_anwstat %in% c(3,4) & b_egoalt$b_enwstat==2), 2,
  ifelse((!is.na(b_egoalt$mother_pidp) &
          b_egoalt$b_anwstat==2 & b_egoalt$b_enwstat==2), 1,
  ifelse((!is.na(b_egoalt$mother_pidp)& b_egoalt$b_anwstat==1), 0,
        ifelse((!is.na(b_egoalt$mother_pidp)), -9, NA))))))),
  
  label = "Whether living with biological mother at the next wave",
  labels = c("missing" = -9, 
             "ego not alive at next wave" = -8,
             "living together at next wave" = 0, "separated_m at next wave" = 1,
             "possibly separated_m at next wave" = 2,
             "mother not alive at next wave" = 3))

#leave: not live with fathers
b_egoalt$separated_f <- labelled(
  ifelse((!is.na(b_egoalt$father_pidp) & b_egoalt$b_enwstat==5), -8, 
  ifelse((!is.na(b_egoalt$father_pidp)  & b_egoalt$b_anwstat==5), 3,
  ifelse((!is.na(b_egoalt$father_pidp)  & 
          b_egoalt$b_anwstat==2 & b_egoalt$b_enwstat %in% c(3,4)), 2,
  ifelse((!is.na(b_egoalt$father_pidp) & 
          b_egoalt$b_anwstat %in% c(3,4) & b_egoalt$b_enwstat==2), 2,
  ifelse((!is.na(b_egoalt$father_pidp) &
          b_egoalt$b_anwstat==2 & b_egoalt$b_enwstat==2), 1,
  ifelse((!is.na(b_egoalt$father_pidp) & b_egoalt$b_anwstat==1), 0,
        ifelse((!is.na(b_egoalt$father_pidp)), -9, NA))))))),
  
  label = "Whether living with biological father at the next wave",
  labels = c("missing" = -9, 
             "ego not alive at next wave" = -8,
             "living together at next wave" = 0, "separated at next wave" = 1,
             "possibly separated at next wave" = 2,
             "father not alive at next wave" = 3))


#fill the separate indicator
b_egoalt<-b_egoalt %>%group_by(pidp) %>%tidyr::fill(separated_m,.direction="updown")
b_egoalt<-b_egoalt %>%group_by(pidp) %>%tidyr::fill(separated_f,.direction="updown")


#find out who separate from both parents
#not live with both parents
b_egoalt$separated<- labelled(
  ifelse((b_egoalt$separated_m%in%c(1)&b_egoalt$separated_f%in%c(1)),1,
         
  ifelse((b_egoalt$separated_m%in%c(1)& is.na(b_egoalt$separated_f)),1,#one
  ifelse((b_egoalt$separated_f%in%c(1)& is.na(b_egoalt$separated_m)),1,
         
  ifelse((b_egoalt$separated_f%in%c(1)& b_egoalt$separated_m%in%c(3)),1,#deadth
  ifelse((b_egoalt$separated_m%in%c(1)& b_egoalt$separated_f%in%c(3)),1,      

  #possibly separated       
  ifelse((b_egoalt$separated_m%in%c(2)&b_egoalt$separated_f%in%c(2)),2,
  ifelse((b_egoalt$separated_m%in%c(1)&b_egoalt$separated_f%in%c(2)),2,
  ifelse((b_egoalt$separated_m%in%c(2)&b_egoalt$separated_f%in%c(1)),2,
         
  ifelse((b_egoalt$separated_m%in%c(2)& is.na(b_egoalt$separated_f)),2,#one
  ifelse((b_egoalt$separated_f%in%c(2)& is.na(b_egoalt$separated_m)),2, 
         
  ifelse((b_egoalt$separated_f%in%c(2)& b_egoalt$separated_m%in%c(3)),1,#deadth
  ifelse((b_egoalt$separated_m%in%c(2)& b_egoalt$separated_f%in%c(3)),1,             
         
  #living together     
  ifelse((b_egoalt$separated_m%in%c(0)|b_egoalt$separated_f%in%c(0)),0,
  #respondents dead
  ifelse((b_egoalt$separated_m%in%c(-8)|b_egoalt$separated_f%in%c(-8)),-8,
         ifelse((!is.na(b_egoalt$separated_m)|!is.na(b_egoalt$separated_f)),-9,NA))))))))))))))),
         
  label = "Whether living with at least one biological parent at the next wave",
  labels = c("missing" = -9, 
             "ego not alive at next wave" = -8,
             "living together with at least one parent at next wave" = 0,
             "separated from both parents at next wave" = 1,
             "possibly separated from both parents at next wave" = 2))


#living with both parents indicator 
b_egoalt<-b_egoalt %>%group_by(pidp) %>%tidyr::fill(mother_pidp,.direction="updown")
b_egoalt<-b_egoalt %>%group_by(pidp) %>%tidyr::fill(father_pidp,.direction="updown")


#flags for living with mother or father this wave
b_egoalt<-b_egoalt%>%group_by(pidp)%>%mutate(livewithmother=ifelse(!is.na(b_egoalt$mother_pidp),1,0))
b_egoalt<-b_egoalt%>%group_by(pidp)%>%mutate(livewithfather=ifelse(!is.na(b_egoalt$father_pidp),1,0))

#living with both parents this wave
b_egoalt$liveboth<-c(0)
b_egoalt$liveboth[b_egoalt$livewithmother==1 & b_egoalt$livewithfather==1]<-1


#a column for living with mother, father, or both this wave
b_egoalt$lvpa<-c(0)
b_egoalt$lvpa[b_egoalt$livewithmother==1]<-1
b_egoalt$lvpa[b_egoalt$livewithfather==1]<-2
b_egoalt$lvpa[b_egoalt$liveboth==1]<-3
b_egoalt$lvpa[b_egoalt$lvpa==0]<-NA

b_egoalt$lvpa<-factor(b_egoalt$lvpa, levels=c(1,2,3),labels=c("live with mother","live with father","live with both parents"))

#select only for those who live with at least one parent this wave and at risk of leaving next wave
b_egoalt<-b_egoalt[which(b_egoalt$lvpa%in%c("live with mother","live with father","live with both parents")),]

#merge datafiles
b_indresp<-b_indresp%>%dplyr::select(pidp, b_hidp, b_mastat_dv,
         b_age_dv, b_sex_dv, b_hiqual_dv,
         b_mastat_dv, b_racel_dv,b_fimnnet_dv,b_nchild_dv,b_urban_dv,b_gor_dv,b_jbstat,b_sf1,b_susp)


b_egoaltt<-b_egoalt%>%dplyr::select(pidp,mother_pidp,father_pidp,separated_m,separated_f,separated,lvpa,relativenum,childnum,live_with_husbandwife,live_with_cohabitee)

#child levels
b_indrespc<-join_all(list(b_indresp,b_egoaltt), by='pidp', type='left')
b_indrespc<-b_indrespc %>% distinct_at(vars(pidp), .keep_all = TRUE)

b_indrespc<-b_indrespc[(which(!is.na(b_indrespc$mother_pidp)|!is.na(b_indrespc$father_pidp))),]



#add parent levels
b_indresppt <-b_indresp

#join parental data by pidp
father<-as.data.frame(b_indrespc$father_pidp)
mother<-as.data.frame(b_indrespc$mother_pidp)

colnames(father)[1]<-"pidp"
colnames(mother)[1]<-"pidp"

#attached parental values
b_indresppf<-join_all(list(father,b_indresppt), by='pidp', type='left')
b_indresppm<-join_all(list(mother,b_indresppt), by='pidp', type='left')

#for housing tenure
b_indresppf<-join_all(list(b_indresppf,b_hhresp), by='b_hidp', type='left')
b_indresppm<-join_all(list(b_indresppm,b_hhresp), by='b_hidp', type='left')

#for emboost
b_indresppf<-join_all(list(b_indresppf,b_hhsamp), by='b_hidp', type='left')
b_indresppm<-join_all(list(b_indresppm,b_hhsamp), by='b_hidp', type='left')

#rename var to differentiate parents
b_indresppf <-
        rename_at(b_indresppf, vars(starts_with("b_")), ~str_replace(., "b_", "ip_")) 
b_indresppm <-
        rename_at(b_indresppm, vars(starts_with("b_")), ~str_replace(., "b_", "im_")) 

#join to the child-level data by parent's pidp
colnames(b_indresppf)[1]<-"father_pidp"
colnames(b_indresppm)[1]<-"mother_pidp"

b_indresppf<-join_all(list(b_indrespc,b_indresppf), by="father_pidp", type='left')
b_indresppm<-join_all(list(b_indrespc,b_indresppm), by="mother_pidp", type='left')

b_indrespp<-join_all(list(b_indresppm,b_indresppf), by="pidp", type='left')

b_indrespp<-b_indrespp %>% distinct_at(vars(pidp), .keep_all = TRUE)

rm(father,mother,b_egoaltt,b_indrespc,b_indresppf,b_indresppm,b_indresppt)

#drop duplicate columns
b_indrespp <- b_indrespp %>% select(-contains(".1"))

## add cross wave identifier
b_indrespp$from_wave_b<-1

```

##### Wave 3

```{r}
mothers <- c_egoalt %>%
  filter(c_relationship_dv %in% c(4) & c_asex==2) %>%
  select(pidp, apidp)
mothers$mother_pidp=mothers$apidp

c_egoalt <- c_egoalt %>%
  full_join(mothers, by=c("pidp", "apidp")) 

rm(mothers)

fathers <- c_egoalt %>%
  filter(c_relationship_dv %in% c(4) & c_asex==1) %>%
  select(pidp, apidp)
fathers$father_pidp=fathers$apidp

c_egoalt <- c_egoalt %>%
  full_join(fathers, by=c("pidp", "apidp"))

rm(fathers)

other_relatives <- c_egoalt %>%
  filter(!(c_relationship_dv%in% c(1,2,3,4,9)) ) %>%
  select(pidp, apidp)
other_relatives$other_relatives_pidp=other_relatives$apidp

c_egoalt <- c_egoalt %>%
  full_join(other_relatives, by=c("pidp", "apidp"))

rm(other_relatives)

#at least two relatives in the household structure who are not the focal individual's parent, partner, or child
test<-c_egoalt%>%aggregate(other_relatives_pidp~pidp,FUN=length)
colnames(test)<-c("pidp","relativenum")
c_egoalt<-join_all(list(c_egoalt,test),by="pidp",type="left")
rm(test)


#whether respondent live with a child
child <- c_egoalt %>%
  filter(c_relationship_dv%in% c(9) ) %>%
  select(pidp, apidp)
child$child_pidp=child$apidp
c_egoalt <- c_egoalt %>%
  full_join(child, by=c("pidp", "apidp"))
rm(child)
#count number of respondent children
test<-c_egoalt%>%aggregate(child_pidp~pidp,FUN=length)
colnames(test)<-c("pidp","childnum")
c_egoalt<-join_all(list(c_egoalt,test),by="pidp",type="left")
rm(test)


#whether respondent cohabit with a partner(marriage)
mar <- c_egoalt %>%
  filter(c_relationship_dv%in% c(1,2) ) %>%
  select(pidp, apidp)
mar$mar_pidp=mar$apidp
c_egoalt <- c_egoalt %>%
  full_join(mar, by=c("pidp", "apidp"))
rm(mar)
#count number of respondent married partner
test<-c_egoalt%>%aggregate(mar_pidp~pidp,FUN=length)
colnames(test)<-c("pidp","live_with_husbandwife")
c_egoalt<-join_all(list(c_egoalt,test),by="pidp",type="left")
rm(test)

#whether respondent cohabit with a partner(cohabitation)
cohab <- c_egoalt %>%
  filter(c_relationship_dv%in% c(3) ) %>%
  select(pidp, apidp)
cohab$cohab_pidp=cohab$apidp
c_egoalt <- c_egoalt %>%
  full_join(cohab, by=c("pidp", "apidp"))
rm(cohab)
#count number of cohabitee
test<-c_egoalt%>%aggregate(cohab_pidp~pidp,FUN=length)
colnames(test)<-c("pidp","live_with_cohabitee")
c_egoalt<-join_all(list(c_egoalt,test),by="pidp",type="left")
rm(test)


# leave: not live with mothers
c_egoalt$separated_m <- labelled(
  ifelse((!is.na(c_egoalt$mother_pidp) & c_egoalt$c_enwstat==5), -8, 
  ifelse((!is.na(c_egoalt$mother_pidp)  & c_egoalt$c_anwstat==5), 3,
  ifelse((!is.na(c_egoalt$mother_pidp)  & 
          c_egoalt$c_anwstat==2 & c_egoalt$c_enwstat %in% c(3,4)), 2,
  ifelse((!is.na(c_egoalt$mother_pidp) & 
          c_egoalt$c_anwstat %in% c(3,4) & c_egoalt$c_enwstat==2), 2,
  ifelse((!is.na(c_egoalt$mother_pidp) &
          c_egoalt$c_anwstat==2 & c_egoalt$c_enwstat==2), 1,
  ifelse((!is.na(c_egoalt$mother_pidp)& c_egoalt$c_anwstat==1), 0,
        ifelse((!is.na(c_egoalt$mother_pidp)), -9, NA))))))),
  
  label = "Whether living with biological mother at the next wave",
  labels = c("missing" = -9, 
             "ego not alive at next wave" = -8,
             "living together at next wave" = 0, "separated_m at next wave" = 1,
             "possibly separated_m at next wave" = 2,
             "mother not alive at next wave" = 3))

#leave: not live with fathers
c_egoalt$separated_f <- labelled(
  ifelse((!is.na(c_egoalt$father_pidp) & c_egoalt$c_enwstat==5), -8, 
  ifelse((!is.na(c_egoalt$father_pidp)  & c_egoalt$c_anwstat==5), 3,
  ifelse((!is.na(c_egoalt$father_pidp)  & 
          c_egoalt$c_anwstat==2 & c_egoalt$c_enwstat %in% c(3,4)), 2,
  ifelse((!is.na(c_egoalt$father_pidp) & 
          c_egoalt$c_anwstat %in% c(3,4) & c_egoalt$c_enwstat==2), 2,
  ifelse((!is.na(c_egoalt$father_pidp) &
          c_egoalt$c_anwstat==2 & c_egoalt$c_enwstat==2), 1,
  ifelse((!is.na(c_egoalt$father_pidp) & c_egoalt$c_anwstat==1), 0,
        ifelse((!is.na(c_egoalt$father_pidp)), -9, NA))))))),
  
  label = "Whether living with biological father at the next wave",
  labels = c("missing" = -9, 
             "ego not alive at next wave" = -8,
             "living together at next wave" = 0, "separated at next wave" = 1,
             "possibly separated at next wave" = 2,
             "father not alive at next wave" = 3))


#fill the separate indicator
c_egoalt<-c_egoalt %>%group_by(pidp) %>%tidyr::fill(separated_m,.direction="updown")
c_egoalt<-c_egoalt %>%group_by(pidp) %>%tidyr::fill(separated_f,.direction="updown")


#find out who separate from both parents
#not live with both parents
c_egoalt$separated<- labelled(
  ifelse((c_egoalt$separated_m%in%c(1)&c_egoalt$separated_f%in%c(1)),1,
         
  ifelse((c_egoalt$separated_m%in%c(1)& is.na(c_egoalt$separated_f)),1,#one
  ifelse((c_egoalt$separated_f%in%c(1)& is.na(c_egoalt$separated_m)),1,
         
  ifelse((c_egoalt$separated_f%in%c(1)& c_egoalt$separated_m%in%c(3)),1,#deadth
  ifelse((c_egoalt$separated_m%in%c(1)& c_egoalt$separated_f%in%c(3)),1,      

  #possibly separated       
  ifelse((c_egoalt$separated_m%in%c(2)&c_egoalt$separated_f%in%c(2)),2,
  ifelse((c_egoalt$separated_m%in%c(1)&c_egoalt$separated_f%in%c(2)),2,
  ifelse((c_egoalt$separated_m%in%c(2)&c_egoalt$separated_f%in%c(1)),2,
         
  ifelse((c_egoalt$separated_m%in%c(2)& is.na(c_egoalt$separated_f)),2,#one
  ifelse((c_egoalt$separated_f%in%c(2)& is.na(c_egoalt$separated_m)),2, 
         
  ifelse((c_egoalt$separated_f%in%c(2)& c_egoalt$separated_m%in%c(3)),1,#deadth
  ifelse((c_egoalt$separated_m%in%c(2)& c_egoalt$separated_f%in%c(3)),1,             
         
  #living together     
  ifelse((c_egoalt$separated_m%in%c(0)|c_egoalt$separated_f%in%c(0)),0,
  #respondents dead
  ifelse((c_egoalt$separated_m%in%c(-8)|c_egoalt$separated_f%in%c(-8)),-8,
         ifelse((!is.na(c_egoalt$separated_m)|!is.na(c_egoalt$separated_f)),-9,NA))))))))))))))),
         
  label = "Whether living with at least one biological parent at the next wave",
  labels = c("missing" = -9, 
             "ego not alive at next wave" = -8,
             "living together with at least one parent at next wave" = 0,
             "separated from both parents at next wave" = 1,
             "possibly separated from both parents at next wave" = 2))


#living with both parents indicator 
c_egoalt<-c_egoalt %>%group_by(pidp) %>%tidyr::fill(mother_pidp,.direction="updown")
c_egoalt<-c_egoalt %>%group_by(pidp) %>%tidyr::fill(father_pidp,.direction="updown")


#flags for living with mother or father this wave
c_egoalt<-c_egoalt%>%group_by(pidp)%>%mutate(livewithmother=ifelse(!is.na(c_egoalt$mother_pidp),1,0))
c_egoalt<-c_egoalt%>%group_by(pidp)%>%mutate(livewithfather=ifelse(!is.na(c_egoalt$father_pidp),1,0))

#living with both parents this wave
c_egoalt$liveboth<-c(0)
c_egoalt$liveboth[c_egoalt$livewithmother==1 & c_egoalt$livewithfather==1]<-1


#a column for living with mother, father, or both this wave
c_egoalt$lvpa<-c(0)
c_egoalt$lvpa[c_egoalt$livewithmother==1]<-1
c_egoalt$lvpa[c_egoalt$livewithfather==1]<-2
c_egoalt$lvpa[c_egoalt$liveboth==1]<-3
c_egoalt$lvpa[c_egoalt$lvpa==0]<-NA

c_egoalt$lvpa<-factor(c_egoalt$lvpa, levels=c(1,2,3),labels=c("live with mother","live with father","live with both parents"))

#select only for those who live with at least one parent this wave and at risk of leaving next wave
c_egoalt<-c_egoalt[which(c_egoalt$lvpa%in%c("live with mother","live with father","live with both parents")),]

#merge datafiles
c_indresp<-c_indresp%>%dplyr::select(pidp, c_hidp, c_mastat_dv,
         c_age_dv, c_sex_dv, c_hiqual_dv,
         c_mastat_dv, c_racel_dv,c_fimnnet_dv,c_nchild_dv,c_urban_dv,c_gor_dv,c_jbstat,c_sf1,c_susp)


c_egoaltt<-c_egoalt%>%dplyr::select(pidp,mother_pidp,father_pidp,separated_m,separated_f,separated,lvpa,relativenum,childnum,live_with_husbandwife,live_with_cohabitee)

#child levels
c_indrespc<-join_all(list(c_indresp,c_egoaltt), by='pidp', type='left')
c_indrespc<-c_indrespc %>% distinct_at(vars(pidp), .keep_all = TRUE)

c_indrespc<-c_indrespc[(which(!is.na(c_indrespc$mother_pidp)|!is.na(c_indrespc$father_pidp))),]



#add parent levels
c_indresppt <-c_indresp

#join parental data by pidp
father<-as.data.frame(c_indrespc$father_pidp)
mother<-as.data.frame(c_indrespc$mother_pidp)

colnames(father)[1]<-"pidp"
colnames(mother)[1]<-"pidp"

#attached parental values
c_indresppf<-join_all(list(father,c_indresppt), by='pidp', type='left')
c_indresppm<-join_all(list(mother,c_indresppt), by='pidp', type='left')

#for housing tenure
c_indresppf<-join_all(list(c_indresppf,c_hhresp), by='c_hidp', type='left')
c_indresppm<-join_all(list(c_indresppm,c_hhresp), by='c_hidp', type='left')

#for emboost
c_indresppf<-join_all(list(c_indresppf,c_hhsamp), by='c_hidp', type='left')
c_indresppm<-join_all(list(c_indresppm,c_hhsamp), by='c_hidp', type='left')

#rename var to differentiate parents
c_indresppf <-
        rename_at(c_indresppf, vars(starts_with("c_")), ~str_replace(., "c_", "ip_")) 
c_indresppm <-
        rename_at(c_indresppm, vars(starts_with("c_")), ~str_replace(., "c_", "im_")) 

#join to the child-level data by parent's pidp
colnames(c_indresppf)[1]<-"father_pidp"
colnames(c_indresppm)[1]<-"mother_pidp"

c_indresppf<-join_all(list(c_indrespc,c_indresppf), by="father_pidp", type='left')
c_indresppm<-join_all(list(c_indrespc,c_indresppm), by="mother_pidp", type='left')

c_indrespp<-join_all(list(c_indresppm,c_indresppf), by="pidp", type='left')

c_indrespp<-c_indrespp %>% distinct_at(vars(pidp), .keep_all = TRUE)

rm(father,mother,c_egoaltt,c_indrespc,c_indresppf,c_indresppm,c_indresppt)

#drop duplicate columns
c_indrespp <- c_indrespp %>% select(-contains(".1"))

## add cross wave identifier
c_indrespp$from_wave_c<-1

```

##### Wave 4

```{r}
mothers <- d_egoalt %>%
  filter(d_relationship_dv %in% c(4) & d_asex==2) %>%
  select(pidp, apidp)
mothers$mother_pidp=mothers$apidp

d_egoalt <- d_egoalt %>%
  full_join(mothers, by=c("pidp", "apidp")) 

rm(mothers)

fathers <- d_egoalt %>%
  filter(d_relationship_dv %in% c(4) & d_asex==1) %>%
  select(pidp, apidp)
fathers$father_pidp=fathers$apidp

d_egoalt <- d_egoalt %>%
  full_join(fathers, by=c("pidp", "apidp"))

rm(fathers)

other_relatives <- d_egoalt %>%
  filter(!(d_relationship_dv%in% c(1,2,3,4,9)) ) %>%
  select(pidp, apidp)
other_relatives$other_relatives_pidp=other_relatives$apidp

d_egoalt <- d_egoalt %>%
  full_join(other_relatives, by=c("pidp", "apidp"))

rm(other_relatives)

#at least two relatives in the household structure who are not the focal individual's parent, partner, or child
test<-d_egoalt%>%aggregate(other_relatives_pidp~pidp,FUN=length)
colnames(test)<-c("pidp","relativenum")
d_egoalt<-join_all(list(d_egoalt,test),by="pidp",type="left")
rm(test)


#whether respondent live with a child
child <- d_egoalt %>%
  filter(d_relationship_dv%in% c(9) ) %>%
  select(pidp, apidp)
child$child_pidp=child$apidp
d_egoalt <- d_egoalt %>%
  full_join(child, by=c("pidp", "apidp"))
rm(child)
#count number of respondent children
test<-d_egoalt%>%aggregate(child_pidp~pidp,FUN=length)
colnames(test)<-c("pidp","childnum")
d_egoalt<-join_all(list(d_egoalt,test),by="pidp",type="left")
rm(test)


#whether respondent cohabit with a partner(marriage)
mar <- d_egoalt %>%
  filter(d_relationship_dv%in% c(1,2) ) %>%
  select(pidp, apidp)
mar$mar_pidp=mar$apidp
d_egoalt <- d_egoalt %>%
  full_join(mar, by=c("pidp", "apidp"))
rm(mar)
#count number of respondent married partner
test<-d_egoalt%>%aggregate(mar_pidp~pidp,FUN=length)
colnames(test)<-c("pidp","live_with_husbandwife")
d_egoalt<-join_all(list(d_egoalt,test),by="pidp",type="left")
rm(test)

#whether respondent cohabit with a partner(cohabitation)
cohab <- d_egoalt %>%
  filter(d_relationship_dv%in% c(3) ) %>%
  select(pidp, apidp)
cohab$cohab_pidp=cohab$apidp
d_egoalt <- d_egoalt %>%
  full_join(cohab, by=c("pidp", "apidp"))
rm(cohab)
#count number of cohabitee
test<-d_egoalt%>%aggregate(cohab_pidp~pidp,FUN=length)
colnames(test)<-c("pidp","live_with_cohabitee")
d_egoalt<-join_all(list(d_egoalt,test),by="pidp",type="left")
rm(test)


# leave: not live with mothers
d_egoalt$separated_m <- labelled(
  ifelse((!is.na(d_egoalt$mother_pidp) & d_egoalt$d_enwstat==5), -8, 
  ifelse((!is.na(d_egoalt$mother_pidp)  & d_egoalt$d_anwstat==5), 3,
  ifelse((!is.na(d_egoalt$mother_pidp)  & 
          d_egoalt$d_anwstat==2 & d_egoalt$d_enwstat %in% c(3,4)), 2,
  ifelse((!is.na(d_egoalt$mother_pidp) & 
          d_egoalt$d_anwstat %in% c(3,4) & d_egoalt$d_enwstat==2), 2,
  ifelse((!is.na(d_egoalt$mother_pidp) &
          d_egoalt$d_anwstat==2 & d_egoalt$d_enwstat==2), 1,
  ifelse((!is.na(d_egoalt$mother_pidp)& d_egoalt$d_anwstat==1), 0,
        ifelse((!is.na(d_egoalt$mother_pidp)), -9, NA))))))),
  
  label = "Whether living with biological mother at the next wave",
  labels = c("missing" = -9, 
             "ego not alive at next wave" = -8,
             "living together at next wave" = 0, "separated_m at next wave" = 1,
             "possibly separated_m at next wave" = 2,
             "mother not alive at next wave" = 3))

#leave: not live with fathers
d_egoalt$separated_f <- labelled(
  ifelse((!is.na(d_egoalt$father_pidp) & d_egoalt$d_enwstat==5), -8, 
  ifelse((!is.na(d_egoalt$father_pidp)  & d_egoalt$d_anwstat==5), 3,
  ifelse((!is.na(d_egoalt$father_pidp)  & 
          d_egoalt$d_anwstat==2 & d_egoalt$d_enwstat %in% c(3,4)), 2,
  ifelse((!is.na(d_egoalt$father_pidp) & 
          d_egoalt$d_anwstat %in% c(3,4) & d_egoalt$d_enwstat==2), 2,
  ifelse((!is.na(d_egoalt$father_pidp) &
          d_egoalt$d_anwstat==2 & d_egoalt$d_enwstat==2), 1,
  ifelse((!is.na(d_egoalt$father_pidp) & d_egoalt$d_anwstat==1), 0,
        ifelse((!is.na(d_egoalt$father_pidp)), -9, NA))))))),
  
  label = "Whether living with biological father at the next wave",
  labels = c("missing" = -9, 
             "ego not alive at next wave" = -8,
             "living together at next wave" = 0, "separated at next wave" = 1,
             "possibly separated at next wave" = 2,
             "father not alive at next wave" = 3))


#fill the separate indicator
d_egoalt<-d_egoalt %>%group_by(pidp) %>%tidyr::fill(separated_m,.direction="updown")
d_egoalt<-d_egoalt %>%group_by(pidp) %>%tidyr::fill(separated_f,.direction="updown")


#find out who separate from both parents
#not live with both parents
d_egoalt$separated<- labelled(
  ifelse((d_egoalt$separated_m%in%c(1)&d_egoalt$separated_f%in%c(1)),1,
         
  ifelse((d_egoalt$separated_m%in%c(1)& is.na(d_egoalt$separated_f)),1,#one
  ifelse((d_egoalt$separated_f%in%c(1)& is.na(d_egoalt$separated_m)),1,
         
  ifelse((d_egoalt$separated_f%in%c(1)& d_egoalt$separated_m%in%c(3)),1,#deadth
  ifelse((d_egoalt$separated_m%in%c(1)& d_egoalt$separated_f%in%c(3)),1,      

  #possibly separated       
  ifelse((d_egoalt$separated_m%in%c(2)&d_egoalt$separated_f%in%c(2)),2,
  ifelse((d_egoalt$separated_m%in%c(1)&d_egoalt$separated_f%in%c(2)),2,
  ifelse((d_egoalt$separated_m%in%c(2)&d_egoalt$separated_f%in%c(1)),2,
         
  ifelse((d_egoalt$separated_m%in%c(2)& is.na(d_egoalt$separated_f)),2,#one
  ifelse((d_egoalt$separated_f%in%c(2)& is.na(d_egoalt$separated_m)),2, 
         
  ifelse((d_egoalt$separated_f%in%c(2)& d_egoalt$separated_m%in%c(3)),1,#deadth
  ifelse((d_egoalt$separated_m%in%c(2)& d_egoalt$separated_f%in%c(3)),1,             
         
  #living together     
  ifelse((d_egoalt$separated_m%in%c(0)|d_egoalt$separated_f%in%c(0)),0,
  #respondents dead
  ifelse((d_egoalt$separated_m%in%c(-8)|d_egoalt$separated_f%in%c(-8)),-8,
         ifelse((!is.na(d_egoalt$separated_m)|!is.na(d_egoalt$separated_f)),-9,NA))))))))))))))),
         
  label = "Whether living with at least one biological parent at the next wave",
  labels = c("missing" = -9, 
             "ego not alive at next wave" = -8,
             "living together with at least one parent at next wave" = 0,
             "separated from both parents at next wave" = 1,
             "possibly separated from both parents at next wave" = 2))


#living with both parents indicator 
d_egoalt<-d_egoalt %>%group_by(pidp) %>%tidyr::fill(mother_pidp,.direction="updown")
d_egoalt<-d_egoalt %>%group_by(pidp) %>%tidyr::fill(father_pidp,.direction="updown")


#flags for living with mother or father this wave
d_egoalt<-d_egoalt%>%group_by(pidp)%>%mutate(livewithmother=ifelse(!is.na(d_egoalt$mother_pidp),1,0))
d_egoalt<-d_egoalt%>%group_by(pidp)%>%mutate(livewithfather=ifelse(!is.na(d_egoalt$father_pidp),1,0))

#living with both parents this wave
d_egoalt$liveboth<-c(0)
d_egoalt$liveboth[d_egoalt$livewithmother==1 & d_egoalt$livewithfather==1]<-1


#a column for living with mother, father, or both this wave
d_egoalt$lvpa<-c(0)
d_egoalt$lvpa[d_egoalt$livewithmother==1]<-1
d_egoalt$lvpa[d_egoalt$livewithfather==1]<-2
d_egoalt$lvpa[d_egoalt$liveboth==1]<-3
d_egoalt$lvpa[d_egoalt$lvpa==0]<-NA

d_egoalt$lvpa<-factor(d_egoalt$lvpa, levels=c(1,2,3),labels=c("live with mother","live with father","live with both parents"))

#select only for those who live with at least one parent this wave and at risk of leaving next wave
d_egoalt<-d_egoalt[which(d_egoalt$lvpa%in%c("live with mother","live with father","live with both parents")),]

#merge datafiles
d_indresp<-d_indresp%>%dplyr::select(pidp, d_hidp, d_mastat_dv,
         d_age_dv, d_sex_dv, d_hiqual_dv,
         d_mastat_dv, d_racel_dv,d_fimnnet_dv,d_nchild_dv,d_urban_dv,d_gor_dv,d_jbstat,d_sf1,d_scsf1,d_susp)


d_egoaltt<-d_egoalt%>%dplyr::select(pidp,mother_pidp,father_pidp,separated_m,separated_f,separated,lvpa,relativenum,childnum,live_with_husbandwife,live_with_cohabitee)

#child levels
d_indrespc<-join_all(list(d_indresp,d_egoaltt), by='pidp', type='left')
d_indrespc<-d_indrespc %>% distinct_at(vars(pidp), .keep_all = TRUE)

d_indrespc<-d_indrespc[(which(!is.na(d_indrespc$mother_pidp)|!is.na(d_indrespc$father_pidp))),]



#add parent levels
d_indresppt <-d_indresp

#join parental data by pidp
father<-as.data.frame(d_indrespc$father_pidp)
mother<-as.data.frame(d_indrespc$mother_pidp)

colnames(father)[1]<-"pidp"
colnames(mother)[1]<-"pidp"

#attached parental values
d_indresppf<-join_all(list(father,d_indresppt), by='pidp', type='left')
d_indresppm<-join_all(list(mother,d_indresppt), by='pidp', type='left')

#for housing tenure
d_indresppf<-join_all(list(d_indresppf,d_hhresp), by='d_hidp', type='left')
d_indresppm<-join_all(list(d_indresppm,d_hhresp), by='d_hidp', type='left')

#for emboost
d_indresppf<-join_all(list(d_indresppf,d_hhsamp), by='d_hidp', type='left')
d_indresppm<-join_all(list(d_indresppm,d_hhsamp), by='d_hidp', type='left')

#rename var to differentiate parents
d_indresppf <-
        rename_at(d_indresppf, vars(starts_with("d_")), ~str_replace(., "d_", "ip_")) 
d_indresppm <-
        rename_at(d_indresppm, vars(starts_with("d_")), ~str_replace(., "d_", "im_")) 

#join to the child-level data by parent's pidp
colnames(d_indresppf)[1]<-"father_pidp"
colnames(d_indresppm)[1]<-"mother_pidp"

d_indresppf<-join_all(list(d_indrespc,d_indresppf), by="father_pidp", type='left')
d_indresppm<-join_all(list(d_indrespc,d_indresppm), by="mother_pidp", type='left')

d_indrespp<-join_all(list(d_indresppm,d_indresppf), by="pidp", type='left')

d_indrespp<-d_indrespp %>% distinct_at(vars(pidp), .keep_all = TRUE)

rm(father,mother,d_egoaltt,d_indrespc,d_indresppf,d_indresppm,d_indresppt)

#drop duplicate columns
d_indrespp <- d_indrespp %>% select(-contains(".1"))

## add cross wave identifier
d_indrespp$from_wave_d<-1

```

##### Wave 5

```{r}
mothers <- e_egoalt %>%
  filter(e_relationship_dv %in% c(4) & e_asex==2) %>%
  select(pidp, apidp)
mothers$mother_pidp=mothers$apidp

e_egoalt <- e_egoalt %>%
  full_join(mothers, by=c("pidp", "apidp")) 

rm(mothers)

fathers <- e_egoalt %>%
  filter(e_relationship_dv %in% c(4) & e_asex==1) %>%
  select(pidp, apidp)
fathers$father_pidp=fathers$apidp

e_egoalt <- e_egoalt %>%
  full_join(fathers, by=c("pidp", "apidp"))

rm(fathers)

other_relatives <- e_egoalt %>%
  filter(!(e_relationship_dv%in% c(1,2,3,4,9)) ) %>%
  select(pidp, apidp)
other_relatives$other_relatives_pidp=other_relatives$apidp

e_egoalt <- e_egoalt %>%
  full_join(other_relatives, by=c("pidp", "apidp"))

rm(other_relatives)

#at least two relatives in the household structure who are not the focal individual's parent, partner, or child
test<-e_egoalt%>%aggregate(other_relatives_pidp~pidp,FUN=length)
colnames(test)<-c("pidp","relativenum")
e_egoalt<-join_all(list(e_egoalt,test),by="pidp",type="left")
rm(test)


#whether respondent live with a child
child <- e_egoalt %>%
  filter(e_relationship_dv%in% c(9) ) %>%
  select(pidp, apidp)
child$child_pidp=child$apidp
e_egoalt <- e_egoalt %>%
  full_join(child, by=c("pidp", "apidp"))
rm(child)
#count number of respondent children
test<-e_egoalt%>%aggregate(child_pidp~pidp,FUN=length)
colnames(test)<-c("pidp","childnum")
e_egoalt<-join_all(list(e_egoalt,test),by="pidp",type="left")
rm(test)


#whether respondent cohabit with a partner(marriage)
mar <- e_egoalt %>%
  filter(e_relationship_dv%in% c(1,2) ) %>%
  select(pidp, apidp)
mar$mar_pidp=mar$apidp
e_egoalt <- e_egoalt %>%
  full_join(mar, by=c("pidp", "apidp"))
rm(mar)
#count number of respondent married partner
test<-e_egoalt%>%aggregate(mar_pidp~pidp,FUN=length)
colnames(test)<-c("pidp","live_with_husbandwife")
e_egoalt<-join_all(list(e_egoalt,test),by="pidp",type="left")
rm(test)

#whether respondent cohabit with a partner(cohabitation)
cohab <- e_egoalt %>%
  filter(e_relationship_dv%in% c(3) ) %>%
  select(pidp, apidp)
cohab$cohab_pidp=cohab$apidp
e_egoalt <- e_egoalt %>%
  full_join(cohab, by=c("pidp", "apidp"))
rm(cohab)
#count number of cohabitee
test<-e_egoalt%>%aggregate(cohab_pidp~pidp,FUN=length)
colnames(test)<-c("pidp","live_with_cohabitee")
e_egoalt<-join_all(list(e_egoalt,test),by="pidp",type="left")
rm(test)


# leave: not live with mothers
e_egoalt$separated_m <- labelled(
  ifelse((!is.na(e_egoalt$mother_pidp) & e_egoalt$e_enwstat==5), -8, 
  ifelse((!is.na(e_egoalt$mother_pidp)  & e_egoalt$e_anwstat==5), 3,
  ifelse((!is.na(e_egoalt$mother_pidp)  & 
          e_egoalt$e_anwstat==2 & e_egoalt$e_enwstat %in% c(3,4)), 2,
  ifelse((!is.na(e_egoalt$mother_pidp) & 
          e_egoalt$e_anwstat %in% c(3,4) & e_egoalt$e_enwstat==2), 2,
  ifelse((!is.na(e_egoalt$mother_pidp) &
          e_egoalt$e_anwstat==2 & e_egoalt$e_enwstat==2), 1,
  ifelse((!is.na(e_egoalt$mother_pidp)& e_egoalt$e_anwstat==1), 0,
        ifelse((!is.na(e_egoalt$mother_pidp)), -9, NA))))))),
  
  label = "Whether living with biological mother at the next wave",
  labels = c("missing" = -9, 
             "ego not alive at next wave" = -8,
             "living together at next wave" = 0, "separated_m at next wave" = 1,
             "possibly separated_m at next wave" = 2,
             "mother not alive at next wave" = 3))

#leave: not live with fathers
e_egoalt$separated_f <- labelled(
  ifelse((!is.na(e_egoalt$father_pidp) & e_egoalt$e_enwstat==5), -8, 
  ifelse((!is.na(e_egoalt$father_pidp)  & e_egoalt$e_anwstat==5), 3,
  ifelse((!is.na(e_egoalt$father_pidp)  & 
          e_egoalt$e_anwstat==2 & e_egoalt$e_enwstat %in% c(3,4)), 2,
  ifelse((!is.na(e_egoalt$father_pidp) & 
          e_egoalt$e_anwstat %in% c(3,4) & e_egoalt$e_enwstat==2), 2,
  ifelse((!is.na(e_egoalt$father_pidp) &
          e_egoalt$e_anwstat==2 & e_egoalt$e_enwstat==2), 1,
  ifelse((!is.na(e_egoalt$father_pidp) & e_egoalt$e_anwstat==1), 0,
        ifelse((!is.na(e_egoalt$father_pidp)), -9, NA))))))),
  
  label = "Whether living with biological father at the next wave",
  labels = c("missing" = -9, 
             "ego not alive at next wave" = -8,
             "living together at next wave" = 0, "separated at next wave" = 1,
             "possibly separated at next wave" = 2,
             "father not alive at next wave" = 3))


#fill the separate indicator
e_egoalt<-e_egoalt %>%group_by(pidp) %>%tidyr::fill(separated_m,.direction="updown")
e_egoalt<-e_egoalt %>%group_by(pidp) %>%tidyr::fill(separated_f,.direction="updown")


#find out who separate from both parents
#not live with both parents
e_egoalt$separated<- labelled(
  ifelse((e_egoalt$separated_m%in%c(1)&e_egoalt$separated_f%in%c(1)),1,
         
  ifelse((e_egoalt$separated_m%in%c(1)& is.na(e_egoalt$separated_f)),1,#one
  ifelse((e_egoalt$separated_f%in%c(1)& is.na(e_egoalt$separated_m)),1,
         
  ifelse((e_egoalt$separated_f%in%c(1)& e_egoalt$separated_m%in%c(3)),1,#deadth
  ifelse((e_egoalt$separated_m%in%c(1)& e_egoalt$separated_f%in%c(3)),1,      

  #possibly separated       
  ifelse((e_egoalt$separated_m%in%c(2)&e_egoalt$separated_f%in%c(2)),2,
  ifelse((e_egoalt$separated_m%in%c(1)&e_egoalt$separated_f%in%c(2)),2,
  ifelse((e_egoalt$separated_m%in%c(2)&e_egoalt$separated_f%in%c(1)),2,
         
  ifelse((e_egoalt$separated_m%in%c(2)& is.na(e_egoalt$separated_f)),2,#one
  ifelse((e_egoalt$separated_f%in%c(2)& is.na(e_egoalt$separated_m)),2, 
         
  ifelse((e_egoalt$separated_f%in%c(2)& e_egoalt$separated_m%in%c(3)),1,#deadth
  ifelse((e_egoalt$separated_m%in%c(2)& e_egoalt$separated_f%in%c(3)),1,             
         
  #living together     
  ifelse((e_egoalt$separated_m%in%c(0)|e_egoalt$separated_f%in%c(0)),0,
  #respondents dead
  ifelse((e_egoalt$separated_m%in%c(-8)|e_egoalt$separated_f%in%c(-8)),-8,
         ifelse((!is.na(e_egoalt$separated_m)|!is.na(e_egoalt$separated_f)),-9,NA))))))))))))))),
         
  label = "Whether living with at least one biological parent at the next wave",
  labels = c("missing" = -9, 
             "ego not alive at next wave" = -8,
             "living together with at least one parent at next wave" = 0,
             "separated from both parents at next wave" = 1,
             "possibly separated from both parents at next wave" = 2))


#living with both parents indicator 
e_egoalt<-e_egoalt %>%group_by(pidp) %>%tidyr::fill(mother_pidp,.direction="updown")
e_egoalt<-e_egoalt %>%group_by(pidp) %>%tidyr::fill(father_pidp,.direction="updown")


#flags for living with mother or father this wave
e_egoalt<-e_egoalt%>%group_by(pidp)%>%mutate(livewithmother=ifelse(!is.na(e_egoalt$mother_pidp),1,0))
e_egoalt<-e_egoalt%>%group_by(pidp)%>%mutate(livewithfather=ifelse(!is.na(e_egoalt$father_pidp),1,0))

#living with both parents this wave
e_egoalt$liveboth<-c(0)
e_egoalt$liveboth[e_egoalt$livewithmother==1 & e_egoalt$livewithfather==1]<-1


#a column for living with mother, father, or both this wave
e_egoalt$lvpa<-c(0)
e_egoalt$lvpa[e_egoalt$livewithmother==1]<-1
e_egoalt$lvpa[e_egoalt$livewithfather==1]<-2
e_egoalt$lvpa[e_egoalt$liveboth==1]<-3
e_egoalt$lvpa[e_egoalt$lvpa==0]<-NA

e_egoalt$lvpa<-factor(e_egoalt$lvpa, levels=c(1,2,3),labels=c("live with mother","live with father","live with both parents"))

#select only for those who live with at least one parent this wave and at risk of leaving next wave
e_egoalt<-e_egoalt[which(e_egoalt$lvpa%in%c("live with mother","live with father","live with both parents")),]

#merge datafiles
e_indresp<-e_indresp%>%dplyr::select(pidp, e_hidp, e_mastat_dv,
         e_age_dv, e_sex_dv, e_hiqual_dv,
         e_mastat_dv, e_racel_dv,e_fimnnet_dv,e_nchild_dv,e_urban_dv,e_gor_dv,e_jbstat,e_sf1,e_scsf1,e_susp)


e_egoaltt<-e_egoalt%>%dplyr::select(pidp,mother_pidp,father_pidp,separated_m,separated_f,separated,lvpa,relativenum,childnum,live_with_husbandwife,live_with_cohabitee)

#child levels
e_indrespc<-join_all(list(e_indresp,e_egoaltt), by='pidp', type='left')
e_indrespc<-e_indrespc %>% distinct_at(vars(pidp), .keep_all = TRUE)

e_indrespc<-e_indrespc[(which(!is.na(e_indrespc$mother_pidp)|!is.na(e_indrespc$father_pidp))),]



#add parent levels
e_indresppt <-e_indresp

#join parental data by pidp
father<-as.data.frame(e_indrespc$father_pidp)
mother<-as.data.frame(e_indrespc$mother_pidp)

colnames(father)[1]<-"pidp"
colnames(mother)[1]<-"pidp"

#attached parental values
e_indresppf<-join_all(list(father,e_indresppt), by='pidp', type='left')
e_indresppm<-join_all(list(mother,e_indresppt), by='pidp', type='left')

#for housing tenure
e_indresppf<-join_all(list(e_indresppf,e_hhresp), by='e_hidp', type='left')
e_indresppm<-join_all(list(e_indresppm,e_hhresp), by='e_hidp', type='left')

#for emboost
e_indresppf<-join_all(list(e_indresppf,e_hhsamp), by='e_hidp', type='left')
e_indresppm<-join_all(list(e_indresppm,e_hhsamp), by='e_hidp', type='left')

#rename var to differentiate parents
e_indresppf <-
        rename_at(e_indresppf, vars(starts_with("e_")), ~str_replace(., "e_", "ip_")) 
e_indresppm <-
        rename_at(e_indresppm, vars(starts_with("e_")), ~str_replace(., "e_", "im_")) 

#join to the child-level data by parent's pidp
colnames(e_indresppf)[1]<-"father_pidp"
colnames(e_indresppm)[1]<-"mother_pidp"

e_indresppf<-join_all(list(e_indrespc,e_indresppf), by="father_pidp", type='left')
e_indresppm<-join_all(list(e_indrespc,e_indresppm), by="mother_pidp", type='left')

e_indrespp<-join_all(list(e_indresppm,e_indresppf), by="pidp", type='left')

e_indrespp<-e_indrespp %>% distinct_at(vars(pidp), .keep_all = TRUE)

rm(father,mother,e_egoaltt,e_indrespc,e_indresppf,e_indresppm,e_indresppt)

#drop duplicate columns
e_indrespp <- e_indrespp %>% select(-contains(".1"))

## add cross wave identifier
e_indrespp$from_wave_e<-1

```

##### Wave 6

```{r}
mothers <- f_egoalt %>%
  filter(f_relationship_dv %in% c(4) & f_asex==2) %>%
  select(pidp, apidp)
mothers$mother_pidp=mothers$apidp

f_egoalt <- f_egoalt %>%
  full_join(mothers, by=c("pidp", "apidp")) 

rm(mothers)

fathers <- f_egoalt %>%
  filter(f_relationship_dv %in% c(4) & f_asex==1) %>%
  select(pidp, apidp)
fathers$father_pidp=fathers$apidp

f_egoalt <- f_egoalt %>%
  full_join(fathers, by=c("pidp", "apidp"))

rm(fathers)

other_relatives <- f_egoalt %>%
  filter(!(f_relationship_dv%in% c(1,2,3,4,9)) ) %>%
  select(pidp, apidp)
other_relatives$other_relatives_pidp=other_relatives$apidp

f_egoalt <- f_egoalt %>%
  full_join(other_relatives, by=c("pidp", "apidp"))

rm(other_relatives)

#at least two relatives in the household structure who are not the focal individual's parent, partner, or child
test<-f_egoalt%>%aggregate(other_relatives_pidp~pidp,FUN=length)
colnames(test)<-c("pidp","relativenum")
f_egoalt<-join_all(list(f_egoalt,test),by="pidp",type="left")
rm(test)


#whether respondent live with a child
child <- f_egoalt %>%
  filter(f_relationship_dv%in% c(9) ) %>%
  select(pidp, apidp)
child$child_pidp=child$apidp
f_egoalt <- f_egoalt %>%
  full_join(child, by=c("pidp", "apidp"))
rm(child)
#count number of respondent children
test<-f_egoalt%>%aggregate(child_pidp~pidp,FUN=length)
colnames(test)<-c("pidp","childnum")
f_egoalt<-join_all(list(f_egoalt,test),by="pidp",type="left")
rm(test)


#whether respondent cohabit with a partner(marriage)
mar <- f_egoalt %>%
  filter(f_relationship_dv%in% c(1,2) ) %>%
  select(pidp, apidp)
mar$mar_pidp=mar$apidp
f_egoalt <- f_egoalt %>%
  full_join(mar, by=c("pidp", "apidp"))
rm(mar)
#count number of respondent married partner
test<-f_egoalt%>%aggregate(mar_pidp~pidp,FUN=length)
colnames(test)<-c("pidp","live_with_husbandwife")
f_egoalt<-join_all(list(f_egoalt,test),by="pidp",type="left")
rm(test)

#whether respondent cohabit with a partner(cohabitation)
cohab <- f_egoalt %>%
  filter(f_relationship_dv%in% c(3) ) %>%
  select(pidp, apidp)
cohab$cohab_pidp=cohab$apidp
f_egoalt <- f_egoalt %>%
  full_join(cohab, by=c("pidp", "apidp"))
rm(cohab)
#count number of cohabitee
test<-f_egoalt%>%aggregate(cohab_pidp~pidp,FUN=length)
colnames(test)<-c("pidp","live_with_cohabitee")
f_egoalt<-join_all(list(f_egoalt,test),by="pidp",type="left")
rm(test)


# leave: not live with mothers
f_egoalt$separated_m <- labelled(
  ifelse((!is.na(f_egoalt$mother_pidp) & f_egoalt$f_enwstat==5), -8, 
  ifelse((!is.na(f_egoalt$mother_pidp)  & f_egoalt$f_anwstat==5), 3,
  ifelse((!is.na(f_egoalt$mother_pidp)  & 
          f_egoalt$f_anwstat==2 & f_egoalt$f_enwstat %in% c(3,4)), 2,
  ifelse((!is.na(f_egoalt$mother_pidp) & 
          f_egoalt$f_anwstat %in% c(3,4) & f_egoalt$f_enwstat==2), 2,
  ifelse((!is.na(f_egoalt$mother_pidp) &
          f_egoalt$f_anwstat==2 & f_egoalt$f_enwstat==2), 1,
  ifelse((!is.na(f_egoalt$mother_pidp)& f_egoalt$f_anwstat==1), 0,
        ifelse((!is.na(f_egoalt$mother_pidp)), -9, NA))))))),
  
  label = "Whether living with biological mother at the next wave",
  labels = c("missing" = -9, 
             "ego not alive at next wave" = -8,
             "living together at next wave" = 0, "separated_m at next wave" = 1,
             "possibly separated_m at next wave" = 2,
             "mother not alive at next wave" = 3))

#leave: not live with fathers
f_egoalt$separated_f <- labelled(
  ifelse((!is.na(f_egoalt$father_pidp) & f_egoalt$f_enwstat==5), -8, 
  ifelse((!is.na(f_egoalt$father_pidp)  & f_egoalt$f_anwstat==5), 3,
  ifelse((!is.na(f_egoalt$father_pidp)  & 
          f_egoalt$f_anwstat==2 & f_egoalt$f_enwstat %in% c(3,4)), 2,
  ifelse((!is.na(f_egoalt$father_pidp) & 
          f_egoalt$f_anwstat %in% c(3,4) & f_egoalt$f_enwstat==2), 2,
  ifelse((!is.na(f_egoalt$father_pidp) &
          f_egoalt$f_anwstat==2 & f_egoalt$f_enwstat==2), 1,
  ifelse((!is.na(f_egoalt$father_pidp) & f_egoalt$f_anwstat==1), 0,
        ifelse((!is.na(f_egoalt$father_pidp)), -9, NA))))))),
  
  label = "Whether living with biological father at the next wave",
  labels = c("missing" = -9, 
             "ego not alive at next wave" = -8,
             "living together at next wave" = 0, "separated at next wave" = 1,
             "possibly separated at next wave" = 2,
             "father not alive at next wave" = 3))


#fill the separate indicator
f_egoalt<-f_egoalt %>%group_by(pidp) %>%tidyr::fill(separated_m,.direction="updown")
f_egoalt<-f_egoalt %>%group_by(pidp) %>%tidyr::fill(separated_f,.direction="updown")


#find out who separate from both parents
#not live with both parents
f_egoalt$separated<- labelled(
  ifelse((f_egoalt$separated_m%in%c(1)&f_egoalt$separated_f%in%c(1)),1,
         
  ifelse((f_egoalt$separated_m%in%c(1)& is.na(f_egoalt$separated_f)),1,#one
  ifelse((f_egoalt$separated_f%in%c(1)& is.na(f_egoalt$separated_m)),1,
         
  ifelse((f_egoalt$separated_f%in%c(1)& f_egoalt$separated_m%in%c(3)),1,#deadth
  ifelse((f_egoalt$separated_m%in%c(1)& f_egoalt$separated_f%in%c(3)),1,      

  #possibly separated       
  ifelse((f_egoalt$separated_m%in%c(2)&f_egoalt$separated_f%in%c(2)),2,
  ifelse((f_egoalt$separated_m%in%c(1)&f_egoalt$separated_f%in%c(2)),2,
  ifelse((f_egoalt$separated_m%in%c(2)&f_egoalt$separated_f%in%c(1)),2,
         
  ifelse((f_egoalt$separated_m%in%c(2)& is.na(f_egoalt$separated_f)),2,#one
  ifelse((f_egoalt$separated_f%in%c(2)& is.na(f_egoalt$separated_m)),2, 
         
  ifelse((f_egoalt$separated_f%in%c(2)& f_egoalt$separated_m%in%c(3)),1,#deadth
  ifelse((f_egoalt$separated_m%in%c(2)& f_egoalt$separated_f%in%c(3)),1,             
         
  #living together     
  ifelse((f_egoalt$separated_m%in%c(0)|f_egoalt$separated_f%in%c(0)),0,
  #respondents dead
  ifelse((f_egoalt$separated_m%in%c(-8)|f_egoalt$separated_f%in%c(-8)),-8,
         ifelse((!is.na(f_egoalt$separated_m)|!is.na(f_egoalt$separated_f)),-9,NA))))))))))))))),
         
  label = "Whether living with at least one biological parent at the next wave",
  labels = c("missing" = -9, 
             "ego not alive at next wave" = -8,
             "living together with at least one parent at next wave" = 0,
             "separated from both parents at next wave" = 1,
             "possibly separated from both parents at next wave" = 2))


#living with both parents indicator 
f_egoalt<-f_egoalt %>%group_by(pidp) %>%tidyr::fill(mother_pidp,.direction="updown")
f_egoalt<-f_egoalt %>%group_by(pidp) %>%tidyr::fill(father_pidp,.direction="updown")


#flags for living with mother or father this wave
f_egoalt<-f_egoalt%>%group_by(pidp)%>%mutate(livewithmother=ifelse(!is.na(f_egoalt$mother_pidp),1,0))
f_egoalt<-f_egoalt%>%group_by(pidp)%>%mutate(livewithfather=ifelse(!is.na(f_egoalt$father_pidp),1,0))

#living with both parents this wave
f_egoalt$liveboth<-c(0)
f_egoalt$liveboth[f_egoalt$livewithmother==1 & f_egoalt$livewithfather==1]<-1


#a column for living with mother, father, or both this wave
f_egoalt$lvpa<-c(0)
f_egoalt$lvpa[f_egoalt$livewithmother==1]<-1
f_egoalt$lvpa[f_egoalt$livewithfather==1]<-2
f_egoalt$lvpa[f_egoalt$liveboth==1]<-3
f_egoalt$lvpa[f_egoalt$lvpa==0]<-NA

f_egoalt$lvpa<-factor(f_egoalt$lvpa, levels=c(1,2,3),labels=c("live with mother","live with father","live with both parents"))

#select only for those who live with at least one parent this wave and at risk of leaving next wave
f_egoalt<-f_egoalt[which(f_egoalt$lvpa%in%c("live with mother","live with father","live with both parents")),]

#merge datafiles
f_indresp<-f_indresp%>%dplyr::select(pidp, f_hidp, f_mastat_dv,
         f_age_dv, f_sex_dv, f_hiqual_dv,
         f_mastat_dv, f_racel_dv,f_fimnnet_dv,f_nchild_dv,f_urban_dv,f_gor_dv,f_jbstat,f_sf1,f_scsf1,f_susp)


f_egoaltt<-f_egoalt%>%dplyr::select(pidp,mother_pidp,father_pidp,separated_m,separated_f,separated,lvpa,relativenum,childnum,live_with_husbandwife,live_with_cohabitee)

#child levels
f_indrespc<-join_all(list(f_indresp,f_egoaltt), by='pidp', type='left')
f_indrespc<-f_indrespc %>% distinct_at(vars(pidp), .keep_all = TRUE)

f_indrespc<-f_indrespc[(which(!is.na(f_indrespc$mother_pidp)|!is.na(f_indrespc$father_pidp))),]



#add parent levels
f_indresppt <-f_indresp

#join parental data by pidp
father<-as.data.frame(f_indrespc$father_pidp)
mother<-as.data.frame(f_indrespc$mother_pidp)

colnames(father)[1]<-"pidp"
colnames(mother)[1]<-"pidp"

#attached parental values
f_indresppf<-join_all(list(father,f_indresppt), by='pidp', type='left')
f_indresppm<-join_all(list(mother,f_indresppt), by='pidp', type='left')

#for housing tenure
f_indresppf<-join_all(list(f_indresppf,f_hhresp), by='f_hidp', type='left')
f_indresppm<-join_all(list(f_indresppm,f_hhresp), by='f_hidp', type='left')

#for emboost
f_indresppf<-join_all(list(f_indresppf,f_hhsamp), by='f_hidp', type='left')
f_indresppm<-join_all(list(f_indresppm,f_hhsamp), by='f_hidp', type='left')

#rename var to differentiate parents
f_indresppf <-
        rename_at(f_indresppf, vars(starts_with("f_")), ~str_replace(., "f_", "ip_")) 
f_indresppm <-
        rename_at(f_indresppm, vars(starts_with("f_")), ~str_replace(., "f_", "im_")) 

#join to the child-level data by parent's pidp
colnames(f_indresppf)[1]<-"father_pidp"
colnames(f_indresppm)[1]<-"mother_pidp"

f_indresppf<-join_all(list(f_indrespc,f_indresppf), by="father_pidp", type='left')
f_indresppm<-join_all(list(f_indrespc,f_indresppm), by="mother_pidp", type='left')

f_indrespp<-join_all(list(f_indresppm,f_indresppf), by="pidp", type='left')

f_indrespp<-f_indrespp %>% distinct_at(vars(pidp), .keep_all = TRUE)

rm(father,mother,f_egoaltt,f_indrespc,f_indresppf,f_indresppm,f_indresppt)

#drop duplicate columns
f_indrespp <- f_indrespp %>% select(-contains(".1"))

## add cross wave identifier
f_indrespp$from_wave_f<-1

```

#### Wave 7

```{r}
mothers <- g_egoalt %>%
  filter(g_relationship_dv %in% c(4) & g_asex==2) %>%
  select(pidp, apidp)
mothers$mother_pidp=mothers$apidp

g_egoalt <- g_egoalt %>%
  full_join(mothers, by=c("pidp", "apidp")) 

rm(mothers)

fathers <- g_egoalt %>%
  filter(g_relationship_dv %in% c(4) & g_asex==1) %>%
  select(pidp, apidp)
fathers$father_pidp=fathers$apidp

g_egoalt <- g_egoalt %>%
  full_join(fathers, by=c("pidp", "apidp"))

rm(fathers)

other_relatives <- g_egoalt %>%
  filter(!(g_relationship_dv%in% c(1,2,3,4,9)) ) %>%
  select(pidp, apidp)
other_relatives$other_relatives_pidp=other_relatives$apidp

g_egoalt <- g_egoalt %>%
  full_join(other_relatives, by=c("pidp", "apidp"))

rm(other_relatives)

#at least two relatives in the household structure who are not the focal individual's parent, partner, or child
test<-g_egoalt%>%aggregate(other_relatives_pidp~pidp,FUN=length)
colnames(test)<-c("pidp","relativenum")
g_egoalt<-join_all(list(g_egoalt,test),by="pidp",type="left")
rm(test)


#whether respondent live with a child
child <- g_egoalt %>%
  filter(g_relationship_dv%in% c(9) ) %>%
  select(pidp, apidp)
child$child_pidp=child$apidp
g_egoalt <- g_egoalt %>%
  full_join(child, by=c("pidp", "apidp"))
rm(child)
#count number of respondent children
test<-g_egoalt%>%aggregate(child_pidp~pidp,FUN=length)
colnames(test)<-c("pidp","childnum")
g_egoalt<-join_all(list(g_egoalt,test),by="pidp",type="left")
rm(test)


#whether respondent cohabit with a partner(marriage)
mar <- g_egoalt %>%
  filter(g_relationship_dv%in% c(1,2) ) %>%
  select(pidp, apidp)
mar$mar_pidp=mar$apidp
g_egoalt <- g_egoalt %>%
  full_join(mar, by=c("pidp", "apidp"))
rm(mar)
#count number of respondent married partner
test<-g_egoalt%>%aggregate(mar_pidp~pidp,FUN=length)
colnames(test)<-c("pidp","live_with_husbandwife")
g_egoalt<-join_all(list(g_egoalt,test),by="pidp",type="left")
rm(test)

#whether respondent cohabit with a partner(cohabitation)
cohab <- g_egoalt %>%
  filter(g_relationship_dv%in% c(3) ) %>%
  select(pidp, apidp)
cohab$cohab_pidp=cohab$apidp
g_egoalt <- g_egoalt %>%
  full_join(cohab, by=c("pidp", "apidp"))
rm(cohab)
#count number of cohabitee
test<-g_egoalt%>%aggregate(cohab_pidp~pidp,FUN=length)
colnames(test)<-c("pidp","live_with_cohabitee")
g_egoalt<-join_all(list(g_egoalt,test),by="pidp",type="left")
rm(test)


# leave: not live with mothers
g_egoalt$separated_m <- labelled(
  ifelse((!is.na(g_egoalt$mother_pidp) & g_egoalt$g_enwstat==5), -8, 
  ifelse((!is.na(g_egoalt$mother_pidp)  & g_egoalt$g_anwstat==5), 3,
  ifelse((!is.na(g_egoalt$mother_pidp)  & 
          g_egoalt$g_anwstat==2 & g_egoalt$g_enwstat %in% c(3,4)), 2,
  ifelse((!is.na(g_egoalt$mother_pidp) & 
          g_egoalt$g_anwstat %in% c(3,4) & g_egoalt$g_enwstat==2), 2,
  ifelse((!is.na(g_egoalt$mother_pidp) &
          g_egoalt$g_anwstat==2 & g_egoalt$g_enwstat==2), 1,
  ifelse((!is.na(g_egoalt$mother_pidp)& g_egoalt$g_anwstat==1), 0,
        ifelse((!is.na(g_egoalt$mother_pidp)), -9, NA))))))),
  
  label = "Whether living with biological mother at the next wave",
  labels = c("missing" = -9, 
             "ego not alive at next wave" = -8,
             "living together at next wave" = 0, "separated_m at next wave" = 1,
             "possibly separated_m at next wave" = 2,
             "mother not alive at next wave" = 3))

#leave: not live with fathers
g_egoalt$separated_f <- labelled(
  ifelse((!is.na(g_egoalt$father_pidp) & g_egoalt$g_enwstat==5), -8, 
  ifelse((!is.na(g_egoalt$father_pidp)  & g_egoalt$g_anwstat==5), 3,
  ifelse((!is.na(g_egoalt$father_pidp)  & 
          g_egoalt$g_anwstat==2 & g_egoalt$g_enwstat %in% c(3,4)), 2,
  ifelse((!is.na(g_egoalt$father_pidp) & 
          g_egoalt$g_anwstat %in% c(3,4) & g_egoalt$g_enwstat==2), 2,
  ifelse((!is.na(g_egoalt$father_pidp) &
          g_egoalt$g_anwstat==2 & g_egoalt$g_enwstat==2), 1,
  ifelse((!is.na(g_egoalt$father_pidp) & g_egoalt$g_anwstat==1), 0,
        ifelse((!is.na(g_egoalt$father_pidp)), -9, NA))))))),
  
  label = "Whether living with biological father at the next wave",
  labels = c("missing" = -9, 
             "ego not alive at next wave" = -8,
             "living together at next wave" = 0, "separated at next wave" = 1,
             "possibly separated at next wave" = 2,
             "father not alive at next wave" = 3))


#fill the separate indicator
g_egoalt<-g_egoalt %>%group_by(pidp) %>%tidyr::fill(separated_m,.direction="updown")
g_egoalt<-g_egoalt %>%group_by(pidp) %>%tidyr::fill(separated_f,.direction="updown")


#find out who separate from both parents
#not live with both parents
g_egoalt$separated<- labelled(
  ifelse((g_egoalt$separated_m%in%c(1)&g_egoalt$separated_f%in%c(1)),1,
         
  ifelse((g_egoalt$separated_m%in%c(1)& is.na(g_egoalt$separated_f)),1,#one
  ifelse((g_egoalt$separated_f%in%c(1)& is.na(g_egoalt$separated_m)),1,
         
  ifelse((g_egoalt$separated_f%in%c(1)& g_egoalt$separated_m%in%c(3)),1,#deadth
  ifelse((g_egoalt$separated_m%in%c(1)& g_egoalt$separated_f%in%c(3)),1,      

  #possibly separated       
  ifelse((g_egoalt$separated_m%in%c(2)&g_egoalt$separated_f%in%c(2)),2,
  ifelse((g_egoalt$separated_m%in%c(1)&g_egoalt$separated_f%in%c(2)),2,
  ifelse((g_egoalt$separated_m%in%c(2)&g_egoalt$separated_f%in%c(1)),2,
         
  ifelse((g_egoalt$separated_m%in%c(2)& is.na(g_egoalt$separated_f)),2,#one
  ifelse((g_egoalt$separated_f%in%c(2)& is.na(g_egoalt$separated_m)),2, 
         
  ifelse((g_egoalt$separated_f%in%c(2)& g_egoalt$separated_m%in%c(3)),1,#deadth
  ifelse((g_egoalt$separated_m%in%c(2)& g_egoalt$separated_f%in%c(3)),1,             
         
  #living together     
  ifelse((g_egoalt$separated_m%in%c(0)|g_egoalt$separated_f%in%c(0)),0,
  #respondents dead
  ifelse((g_egoalt$separated_m%in%c(-8)|g_egoalt$separated_f%in%c(-8)),-8,
         ifelse((!is.na(g_egoalt$separated_m)|!is.na(g_egoalt$separated_f)),-9,NA))))))))))))))),
         
  label = "Whether living with at least one biological parent at the next wave",
  labels = c("missing" = -9, 
             "ego not alive at next wave" = -8,
             "living together with at least one parent at next wave" = 0,
             "separated from both parents at next wave" = 1,
             "possibly separated from both parents at next wave" = 2))


#living with both parents indicator 
g_egoalt<-g_egoalt %>%group_by(pidp) %>%tidyr::fill(mother_pidp,.direction="updown")
g_egoalt<-g_egoalt %>%group_by(pidp) %>%tidyr::fill(father_pidp,.direction="updown")


#flags for living with mother or father this wave
g_egoalt<-g_egoalt%>%group_by(pidp)%>%mutate(livewithmother=ifelse(!is.na(g_egoalt$mother_pidp),1,0))
g_egoalt<-g_egoalt%>%group_by(pidp)%>%mutate(livewithfather=ifelse(!is.na(g_egoalt$father_pidp),1,0))

#living with both parents this wave
g_egoalt$liveboth<-c(0)
g_egoalt$liveboth[g_egoalt$livewithmother==1 & g_egoalt$livewithfather==1]<-1


#a column for living with mother, father, or both this wave
g_egoalt$lvpa<-c(0)
g_egoalt$lvpa[g_egoalt$livewithmother==1]<-1
g_egoalt$lvpa[g_egoalt$livewithfather==1]<-2
g_egoalt$lvpa[g_egoalt$liveboth==1]<-3
g_egoalt$lvpa[g_egoalt$lvpa==0]<-NA

g_egoalt$lvpa<-factor(g_egoalt$lvpa, levels=c(1,2,3),labels=c("live with mother","live with father","live with both parents"))

#select only for those who live with at least one parent this wave and at risk of leaving next wave
g_egoalt<-g_egoalt[which(g_egoalt$lvpa%in%c("live with mother","live with father","live with both parents")),]

#merge datafiles
g_indresp<-g_indresp%>%dplyr::select(pidp, g_hidp, g_mastat_dv,
         g_age_dv, g_sex_dv, g_hiqual_dv,
         g_mastat_dv, g_racel_dv,g_fimnnet_dv,g_nchild_dv,g_urban_dv,g_gor_dv,g_jbstat,g_sf1,g_susp)


g_egoaltt<-g_egoalt%>%dplyr::select(pidp,mother_pidp,father_pidp,separated_m,separated_f,separated,lvpa,relativenum,childnum,live_with_husbandwife,live_with_cohabitee)

#child levels
g_indrespc<-join_all(list(g_indresp,g_egoaltt), by='pidp', type='left')
g_indrespc<-g_indrespc %>% distinct_at(vars(pidp), .keep_all = TRUE)

g_indrespc<-g_indrespc[(which(!is.na(g_indrespc$mother_pidp)|!is.na(g_indrespc$father_pidp))),]



#add parent levels
g_indresppt <-g_indresp

#join parental data by pidp
father<-as.data.frame(g_indrespc$father_pidp)
mother<-as.data.frame(g_indrespc$mother_pidp)

colnames(father)[1]<-"pidp"
colnames(mother)[1]<-"pidp"

#attached parental values
g_indresppf<-join_all(list(father,g_indresppt), by='pidp', type='left')
g_indresppm<-join_all(list(mother,g_indresppt), by='pidp', type='left')

#for housing tenure
g_indresppf<-join_all(list(g_indresppf,g_hhresp), by='g_hidp', type='left')
g_indresppm<-join_all(list(g_indresppm,g_hhresp), by='g_hidp', type='left')

#for emboost
g_indresppf<-join_all(list(g_indresppf,g_hhsamp), by='g_hidp', type='left')
g_indresppm<-join_all(list(g_indresppm,g_hhsamp), by='g_hidp', type='left')

#rename var to differentiate parents
g_indresppf <-
        rename_at(g_indresppf, vars(starts_with("g_")), ~str_replace(., "g_", "ip_")) 
g_indresppm <-
        rename_at(g_indresppm, vars(starts_with("g_")), ~str_replace(., "g_", "im_")) 

#join to the child-level data by parent's pidp
colnames(g_indresppf)[1]<-"father_pidp"
colnames(g_indresppm)[1]<-"mother_pidp"

g_indresppf<-join_all(list(g_indrespc,g_indresppf), by="father_pidp", type='left')
g_indresppm<-join_all(list(g_indrespc,g_indresppm), by="mother_pidp", type='left')

g_indrespp<-join_all(list(g_indresppm,g_indresppf), by="pidp", type='left')

g_indrespp<-g_indrespp %>% distinct_at(vars(pidp), .keep_all = TRUE)

rm(father,mother,g_egoaltt,g_indrespc,g_indresppf,g_indresppm,g_indresppt)

#drop duplicate columns
g_indrespp <- g_indrespp %>% select(-contains(".1"))

## add cross wave identifier
g_indrespp$from_wave_g<-1

```

#### Wave 8\~13

##### Wave 8

```{r}
mothers <- h_egoalt %>%
  filter(h_relationship_dv %in% c(4) & h_asex==2) %>%
  select(pidp, apidp)
mothers$mother_pidp=mothers$apidp

h_egoalt <- h_egoalt %>%
  full_join(mothers, by=c("pidp", "apidp")) 

rm(mothers)

fathers <- h_egoalt %>%
  filter(h_relationship_dv %in% c(4) & h_asex==1) %>%
  select(pidp, apidp)
fathers$father_pidp=fathers$apidp

h_egoalt <- h_egoalt %>%
  full_join(fathers, by=c("pidp", "apidp"))

rm(fathers)

other_relatives <- h_egoalt %>%
  filter(!(h_relationship_dv%in% c(1,2,3,4,9)) ) %>%
  select(pidp, apidp)
other_relatives$other_relatives_pidp=other_relatives$apidp

h_egoalt <- h_egoalt %>%
  full_join(other_relatives, by=c("pidp", "apidp"))

rm(other_relatives)

#at least two relatives in the household structure who are not the focal individual's parent, partner, or child
test<-h_egoalt%>%aggregate(other_relatives_pidp~pidp,FUN=length)
colnames(test)<-c("pidp","relativenum")
h_egoalt<-join_all(list(h_egoalt,test),by="pidp",type="left")
rm(test)


#whether respondent live with a child
child <- h_egoalt %>%
  filter(h_relationship_dv%in% c(9) ) %>%
  select(pidp, apidp)
child$child_pidp=child$apidp
h_egoalt <- h_egoalt %>%
  full_join(child, by=c("pidp", "apidp"))
rm(child)
#count number of respondent children
test<-h_egoalt%>%aggregate(child_pidp~pidp,FUN=length)
colnames(test)<-c("pidp","childnum")
h_egoalt<-join_all(list(h_egoalt,test),by="pidp",type="left")
rm(test)


#whether respondent cohabit with a partner(marriage)
mar <- h_egoalt %>%
  filter(h_relationship_dv%in% c(1,2) ) %>%
  select(pidp, apidp)
mar$mar_pidp=mar$apidp
h_egoalt <- h_egoalt %>%
  full_join(mar, by=c("pidp", "apidp"))
rm(mar)
#count number of respondent married partner
test<-h_egoalt%>%aggregate(mar_pidp~pidp,FUN=length)
colnames(test)<-c("pidp","live_with_husbandwife")
h_egoalt<-join_all(list(h_egoalt,test),by="pidp",type="left")
rm(test)

#whether respondent cohabit with a partner(cohabitation)
cohab <- h_egoalt %>%
  filter(h_relationship_dv%in% c(3) ) %>%
  select(pidp, apidp)
cohab$cohab_pidp=cohab$apidp
h_egoalt <- h_egoalt %>%
  full_join(cohab, by=c("pidp", "apidp"))
rm(cohab)
#count number of cohabitee
test<-h_egoalt%>%aggregate(cohab_pidp~pidp,FUN=length)
colnames(test)<-c("pidp","live_with_cohabitee")
h_egoalt<-join_all(list(h_egoalt,test),by="pidp",type="left")
rm(test)


# leave: not live with mothers
h_egoalt$separated_m <- labelled(
  ifelse((!is.na(h_egoalt$mother_pidp) & h_egoalt$h_enwstat==5), -8, 
  ifelse((!is.na(h_egoalt$mother_pidp)  & h_egoalt$h_anwstat==5), 3,
  ifelse((!is.na(h_egoalt$mother_pidp)  & 
          h_egoalt$h_anwstat==2 & h_egoalt$h_enwstat %in% c(3,4)), 2,
  ifelse((!is.na(h_egoalt$mother_pidp) & 
          h_egoalt$h_anwstat %in% c(3,4) & h_egoalt$h_enwstat==2), 2,
  ifelse((!is.na(h_egoalt$mother_pidp) &
          h_egoalt$h_anwstat==2 & h_egoalt$h_enwstat==2), 1,
  ifelse((!is.na(h_egoalt$mother_pidp)& h_egoalt$h_anwstat==1), 0,
        ifelse((!is.na(h_egoalt$mother_pidp)), -9, NA))))))),
  
  label = "Whether living with biological mother at the next wave",
  labels = c("missing" = -9, 
             "ego not alive at next wave" = -8,
             "living together at next wave" = 0, "separated_m at next wave" = 1,
             "possibly separated_m at next wave" = 2,
             "mother not alive at next wave" = 3))

#leave: not live with fathers
h_egoalt$separated_f <- labelled(
  ifelse((!is.na(h_egoalt$father_pidp) & h_egoalt$h_enwstat==5), -8, 
  ifelse((!is.na(h_egoalt$father_pidp)  & h_egoalt$h_anwstat==5), 3,
  ifelse((!is.na(h_egoalt$father_pidp)  & 
          h_egoalt$h_anwstat==2 & h_egoalt$h_enwstat %in% c(3,4)), 2,
  ifelse((!is.na(h_egoalt$father_pidp) & 
          h_egoalt$h_anwstat %in% c(3,4) & h_egoalt$h_enwstat==2), 2,
  ifelse((!is.na(h_egoalt$father_pidp) &
          h_egoalt$h_anwstat==2 & h_egoalt$h_enwstat==2), 1,
  ifelse((!is.na(h_egoalt$father_pidp) & h_egoalt$h_anwstat==1), 0,
        ifelse((!is.na(h_egoalt$father_pidp)), -9, NA))))))),
  
  label = "Whether living with biological father at the next wave",
  labels = c("missing" = -9, 
             "ego not alive at next wave" = -8,
             "living together at next wave" = 0, "separated at next wave" = 1,
             "possibly separated at next wave" = 2,
             "father not alive at next wave" = 3))


#fill the separate indicator
h_egoalt<-h_egoalt %>%group_by(pidp) %>%tidyr::fill(separated_m,.direction="updown")
h_egoalt<-h_egoalt %>%group_by(pidp) %>%tidyr::fill(separated_f,.direction="updown")


#find out who separate from both parents
#not live with both parents
h_egoalt$separated<- labelled(
  ifelse((h_egoalt$separated_m%in%c(1)&h_egoalt$separated_f%in%c(1)),1,
         
  ifelse((h_egoalt$separated_m%in%c(1)& is.na(h_egoalt$separated_f)),1,#one
  ifelse((h_egoalt$separated_f%in%c(1)& is.na(h_egoalt$separated_m)),1,
         
  ifelse((h_egoalt$separated_f%in%c(1)& h_egoalt$separated_m%in%c(3)),1,#deadth
  ifelse((h_egoalt$separated_m%in%c(1)& h_egoalt$separated_f%in%c(3)),1,      

  #possibly separated       
  ifelse((h_egoalt$separated_m%in%c(2)&h_egoalt$separated_f%in%c(2)),2,
  ifelse((h_egoalt$separated_m%in%c(1)&h_egoalt$separated_f%in%c(2)),2,
  ifelse((h_egoalt$separated_m%in%c(2)&h_egoalt$separated_f%in%c(1)),2,
         
  ifelse((h_egoalt$separated_m%in%c(2)& is.na(h_egoalt$separated_f)),2,#one
  ifelse((h_egoalt$separated_f%in%c(2)& is.na(h_egoalt$separated_m)),2, 
         
  ifelse((h_egoalt$separated_f%in%c(2)& h_egoalt$separated_m%in%c(3)),1,#deadth
  ifelse((h_egoalt$separated_m%in%c(2)& h_egoalt$separated_f%in%c(3)),1,             
         
  #living together     
  ifelse((h_egoalt$separated_m%in%c(0)|h_egoalt$separated_f%in%c(0)),0,
  #respondents dead
  ifelse((h_egoalt$separated_m%in%c(-8)|h_egoalt$separated_f%in%c(-8)),-8,
         ifelse((!is.na(h_egoalt$separated_m)|!is.na(h_egoalt$separated_f)),-9,NA))))))))))))))),
         
  label = "Whether living with at least one biological parent at the next wave",
  labels = c("missing" = -9, 
             "ego not alive at next wave" = -8,
             "living together with at least one parent at next wave" = 0,
             "separated from both parents at next wave" = 1,
             "possibly separated from both parents at next wave" = 2))


#living with both parents indicator 
h_egoalt<-h_egoalt %>%group_by(pidp) %>%tidyr::fill(mother_pidp,.direction="updown")
h_egoalt<-h_egoalt %>%group_by(pidp) %>%tidyr::fill(father_pidp,.direction="updown")


#flags for living with mother or father this wave
h_egoalt<-h_egoalt%>%group_by(pidp)%>%mutate(livewithmother=ifelse(!is.na(h_egoalt$mother_pidp),1,0))
h_egoalt<-h_egoalt%>%group_by(pidp)%>%mutate(livewithfather=ifelse(!is.na(h_egoalt$father_pidp),1,0))

#living with both parents this wave
h_egoalt$liveboth<-c(0)
h_egoalt$liveboth[h_egoalt$livewithmother==1 & h_egoalt$livewithfather==1]<-1


#a column for living with mother, father, or both this wave
h_egoalt$lvpa<-c(0)
h_egoalt$lvpa[h_egoalt$livewithmother==1]<-1
h_egoalt$lvpa[h_egoalt$livewithfather==1]<-2
h_egoalt$lvpa[h_egoalt$liveboth==1]<-3
h_egoalt$lvpa[h_egoalt$lvpa==0]<-NA

h_egoalt$lvpa<-factor(h_egoalt$lvpa, levels=c(1,2,3),labels=c("live with mother","live with father","live with both parents"))

#select only for those who live with at least one parent this wave and at risk of leaving next wave
h_egoalt<-h_egoalt[which(h_egoalt$lvpa%in%c("live with mother","live with father","live with both parents")),]
```

```{r}
#merge datafiles
h_indresp<-h_indresp%>%dplyr::select(pidp, h_hidp, h_mastat_dv,
         h_age_dv, h_sex_dv, h_hiqual_dv,
         h_mastat_dv, h_racel_dv,h_fimnnet_dv,h_nchild_dv,h_urban_dv,h_gor_dv,h_jbstat,h_sf1,h_scsf1,h_susp)


h_egoaltt<-h_egoalt%>%dplyr::select(pidp,mother_pidp,father_pidp,separated_m,separated_f,separated,lvpa,relativenum,childnum,live_with_husbandwife,live_with_cohabitee)

#child levels
h_indrespc<-join_all(list(h_indresp,h_egoaltt), by='pidp', type='left')
h_indrespc<-h_indrespc %>% distinct_at(vars(pidp), .keep_all = TRUE)

h_indrespc<-h_indrespc[(which(!is.na(h_indrespc$mother_pidp)|!is.na(h_indrespc$father_pidp))),]



#add parent levels
h_indresppt <-h_indresp

#join parental data by pidp
father<-as.data.frame(h_indrespc$father_pidp)
mother<-as.data.frame(h_indrespc$mother_pidp)

colnames(father)[1]<-"pidp"
colnames(mother)[1]<-"pidp"

#attached parental values
h_indresppf<-join_all(list(father,h_indresppt), by='pidp', type='left')
h_indresppm<-join_all(list(mother,h_indresppt), by='pidp', type='left')

#for housing tenure
h_indresppf<-join_all(list(h_indresppf,h_hhresp), by='h_hidp', type='left')
h_indresppm<-join_all(list(h_indresppm,h_hhresp), by='h_hidp', type='left')

#for emboost
h_indresppf<-join_all(list(h_indresppf,h_hhsamp), by='h_hidp', type='left')
h_indresppm<-join_all(list(h_indresppm,h_hhsamp), by='h_hidp', type='left')

#rename var to differentiate parents
h_indresppf <-
        rename_at(h_indresppf, vars(starts_with("h_")), ~str_replace(., "h_", "ip_")) 
h_indresppm <-
        rename_at(h_indresppm, vars(starts_with("h_")), ~str_replace(., "h_", "im_")) 

#join to the child-level data by parent's pidp
colnames(h_indresppf)[1]<-"father_pidp"
colnames(h_indresppm)[1]<-"mother_pidp"

h_indresppf<-join_all(list(h_indrespc,h_indresppf), by="father_pidp", type='left')
h_indresppm<-join_all(list(h_indrespc,h_indresppm), by="mother_pidp", type='left')

h_indrespp<-join_all(list(h_indresppm,h_indresppf), by="pidp", type='left')

h_indrespp<-h_indrespp %>% distinct_at(vars(pidp), .keep_all = TRUE)

rm(father,mother,h_egoaltt,h_indrespc,h_indresppf,h_indresppm,h_indresppt)

#drop duplicate columns
h_indrespp <- h_indrespp %>% select(-contains(".1"))


```

```{r}
## add cross wave identifier
h_indrespp$from_wave_h<-1
```

##### Wave 9

```{r}
mothers <- i_egoalt %>%
  filter(i_relationship_dv %in% c(4) & i_asex==2) %>%
  select(pidp, apidp)
mothers$mother_pidp=mothers$apidp

i_egoalt <- i_egoalt %>%
  full_join(mothers, by=c("pidp", "apidp")) 

rm(mothers)

fathers <- i_egoalt %>%
  filter(i_relationship_dv %in% c(4) & i_asex==1) %>%
  select(pidp, apidp)
fathers$father_pidp=fathers$apidp

i_egoalt <- i_egoalt %>%
  full_join(fathers, by=c("pidp", "apidp"))

rm(fathers)

other_relatives <- i_egoalt %>%
  filter(!(i_relationship_dv%in% c(1,2,3,4,9)) ) %>%
  select(pidp, apidp)
other_relatives$other_relatives_pidp=other_relatives$apidp

i_egoalt <- i_egoalt %>%
  full_join(other_relatives, by=c("pidp", "apidp"))

rm(other_relatives)

#at least two relatives in the household structure who are not the focal individual's parent, partner, or child
test<-i_egoalt%>%aggregate(other_relatives_pidp~pidp,FUN=length)
colnames(test)<-c("pidp","relativenum")
i_egoalt<-join_all(list(i_egoalt,test),by="pidp",type="left")
rm(test)


#whether respondent live with a child
child <- i_egoalt %>%
  filter(i_relationship_dv%in% c(9) ) %>%
  select(pidp, apidp)
child$child_pidp=child$apidp
i_egoalt <- i_egoalt %>%
  full_join(child, by=c("pidp", "apidp"))
rm(child)
#count number of respondent children
test<-i_egoalt%>%aggregate(child_pidp~pidp,FUN=length)
colnames(test)<-c("pidp","childnum")
i_egoalt<-join_all(list(i_egoalt,test),by="pidp",type="left")
rm(test)


#whether respondent cohabit with a partner(marriage)
mar <- i_egoalt %>%
  filter(i_relationship_dv%in% c(1,2) ) %>%
  select(pidp, apidp)
mar$mar_pidp=mar$apidp
i_egoalt <- i_egoalt %>%
  full_join(mar, by=c("pidp", "apidp"))
rm(mar)
#count number of respondent married partner
test<-i_egoalt%>%aggregate(mar_pidp~pidp,FUN=length)
colnames(test)<-c("pidp","live_with_husbandwife")
i_egoalt<-join_all(list(i_egoalt,test),by="pidp",type="left")
rm(test)

#whether respondent cohabit with a partner(cohabitation)
cohab <- i_egoalt %>%
  filter(i_relationship_dv%in% c(3) ) %>%
  select(pidp, apidp)
cohab$cohab_pidp=cohab$apidp
i_egoalt <- i_egoalt %>%
  full_join(cohab, by=c("pidp", "apidp"))
rm(cohab)
#count number of cohabitee
test<-i_egoalt%>%aggregate(cohab_pidp~pidp,FUN=length)
colnames(test)<-c("pidp","live_with_cohabitee")
i_egoalt<-join_all(list(i_egoalt,test),by="pidp",type="left")
rm(test)


# leave: not live with mothers
i_egoalt$separated_m <- labelled(
  ifelse((!is.na(i_egoalt$mother_pidp) & i_egoalt$i_enwstat==5), -8, 
  ifelse((!is.na(i_egoalt$mother_pidp)  & i_egoalt$i_anwstat==5), 3,
  ifelse((!is.na(i_egoalt$mother_pidp)  & 
          i_egoalt$i_anwstat==2 & i_egoalt$i_enwstat %in% c(3,4)), 2,
  ifelse((!is.na(i_egoalt$mother_pidp) & 
          i_egoalt$i_anwstat %in% c(3,4) & i_egoalt$i_enwstat==2), 2,
  ifelse((!is.na(i_egoalt$mother_pidp) &
          i_egoalt$i_anwstat==2 & i_egoalt$i_enwstat==2), 1,
  ifelse((!is.na(i_egoalt$mother_pidp)& i_egoalt$i_anwstat==1), 0,
        ifelse((!is.na(i_egoalt$mother_pidp)), -9, NA))))))),
  
  label = "Whether living with biological mother at the next wave",
  labels = c("missing" = -9, 
             "ego not alive at next wave" = -8,
             "living together at next wave" = 0, "separated_m at next wave" = 1,
             "possibly separated_m at next wave" = 2,
             "mother not alive at next wave" = 3))

#leave: not live with fathers
i_egoalt$separated_f <- labelled(
  ifelse((!is.na(i_egoalt$father_pidp) & i_egoalt$i_enwstat==5), -8, 
  ifelse((!is.na(i_egoalt$father_pidp)  & i_egoalt$i_anwstat==5), 3,
  ifelse((!is.na(i_egoalt$father_pidp)  & 
          i_egoalt$i_anwstat==2 & i_egoalt$i_enwstat %in% c(3,4)), 2,
  ifelse((!is.na(i_egoalt$father_pidp) & 
          i_egoalt$i_anwstat %in% c(3,4) & i_egoalt$i_enwstat==2), 2,
  ifelse((!is.na(i_egoalt$father_pidp) &
          i_egoalt$i_anwstat==2 & i_egoalt$i_enwstat==2), 1,
  ifelse((!is.na(i_egoalt$father_pidp) & i_egoalt$i_anwstat==1), 0,
        ifelse((!is.na(i_egoalt$father_pidp)), -9, NA))))))),
  
  label = "Whether living with biological father at the next wave",
  labels = c("missing" = -9, 
             "ego not alive at next wave" = -8,
             "living together at next wave" = 0, "separated at next wave" = 1,
             "possibly separated at next wave" = 2,
             "father not alive at next wave" = 3))


#fill the separate indicator
i_egoalt<-i_egoalt %>%group_by(pidp) %>%tidyr::fill(separated_m,.direction="updown")
i_egoalt<-i_egoalt %>%group_by(pidp) %>%tidyr::fill(separated_f,.direction="updown")


#find out who separate from both parents
#not live with both parents
i_egoalt$separated<- labelled(
  ifelse((i_egoalt$separated_m%in%c(1)&i_egoalt$separated_f%in%c(1)),1,
         
  ifelse((i_egoalt$separated_m%in%c(1)& is.na(i_egoalt$separated_f)),1,#one
  ifelse((i_egoalt$separated_f%in%c(1)& is.na(i_egoalt$separated_m)),1,
         
  ifelse((i_egoalt$separated_f%in%c(1)& i_egoalt$separated_m%in%c(3)),1,#deadth
  ifelse((i_egoalt$separated_m%in%c(1)& i_egoalt$separated_f%in%c(3)),1,      

  #possibly separated       
  ifelse((i_egoalt$separated_m%in%c(2)&i_egoalt$separated_f%in%c(2)),2,
  ifelse((i_egoalt$separated_m%in%c(1)&i_egoalt$separated_f%in%c(2)),2,
  ifelse((i_egoalt$separated_m%in%c(2)&i_egoalt$separated_f%in%c(1)),2,
         
  ifelse((i_egoalt$separated_m%in%c(2)& is.na(i_egoalt$separated_f)),2,#one
  ifelse((i_egoalt$separated_f%in%c(2)& is.na(i_egoalt$separated_m)),2, 
         
  ifelse((i_egoalt$separated_f%in%c(2)& i_egoalt$separated_m%in%c(3)),1,#deadth
  ifelse((i_egoalt$separated_m%in%c(2)& i_egoalt$separated_f%in%c(3)),1,             
         
  #living together     
  ifelse((i_egoalt$separated_m%in%c(0)|i_egoalt$separated_f%in%c(0)),0,
  #respondents dead
  ifelse((i_egoalt$separated_m%in%c(-8)|i_egoalt$separated_f%in%c(-8)),-8,
         ifelse((!is.na(i_egoalt$separated_m)|!is.na(i_egoalt$separated_f)),-9,NA))))))))))))))),
         
  label = "Whether living with at least one biological parent at the next wave",
  labels = c("missing" = -9, 
             "ego not alive at next wave" = -8,
             "living together with at least one parent at next wave" = 0,
             "separated from both parents at next wave" = 1,
             "possibly separated from both parents at next wave" = 2))


#living with both parents indicator 
i_egoalt<-i_egoalt %>%group_by(pidp) %>%tidyr::fill(mother_pidp,.direction="updown")
i_egoalt<-i_egoalt %>%group_by(pidp) %>%tidyr::fill(father_pidp,.direction="updown")


#flags for living with mother or father this wave
i_egoalt<-i_egoalt%>%group_by(pidp)%>%mutate(livewithmother=ifelse(!is.na(i_egoalt$mother_pidp),1,0))
i_egoalt<-i_egoalt%>%group_by(pidp)%>%mutate(livewithfather=ifelse(!is.na(i_egoalt$father_pidp),1,0))

#living with both parents this wave
i_egoalt$liveboth<-c(0)
i_egoalt$liveboth[i_egoalt$livewithmother==1 & i_egoalt$livewithfather==1]<-1


#a column for living with mother, father, or both this wave
i_egoalt$lvpa<-c(0)
i_egoalt$lvpa[i_egoalt$livewithmother==1]<-1
i_egoalt$lvpa[i_egoalt$livewithfather==1]<-2
i_egoalt$lvpa[i_egoalt$liveboth==1]<-3
i_egoalt$lvpa[i_egoalt$lvpa==0]<-NA

i_egoalt$lvpa<-factor(i_egoalt$lvpa, levels=c(1,2,3),labels=c("live with mother","live with father","live with both parents"))

#select only for those who live with at least one parent this wave and at risk of leaving next wave
i_egoalt<-i_egoalt[which(i_egoalt$lvpa%in%c("live with mother","live with father","live with both parents")),]



```

```{r}
#merge datafiles
i_indresp<-i_indresp%>%dplyr::select(pidp, i_hidp, i_mastat_dv,
         i_age_dv, i_sex_dv, i_hiqual_dv,
         i_mastat_dv, i_racel_dv,i_fimnnet_dv,i_nchild_dv,i_urban_dv,i_gor_dv,i_jbstat,i_sf1,i_scsf1,i_susp)


i_egoaltt<-i_egoalt%>%dplyr::select(pidp,mother_pidp,father_pidp,separated_m,separated_f,separated,lvpa,relativenum,childnum,live_with_husbandwife,live_with_cohabitee)

#child levels
i_indrespc<-join_all(list(i_indresp,i_egoaltt), by='pidp', type='left')
i_indrespc<-i_indrespc %>% distinct_at(vars(pidp), .keep_all = TRUE)

i_indrespc<-i_indrespc[(which(!is.na(i_indrespc$mother_pidp)|!is.na(i_indrespc$father_pidp))),]



#add parent levels
i_indresppt <-i_indresp

#join parental data by pidp
father<-as.data.frame(i_indrespc$father_pidp)
mother<-as.data.frame(i_indrespc$mother_pidp)

colnames(father)[1]<-"pidp"
colnames(mother)[1]<-"pidp"

#attached parental values
i_indresppf<-join_all(list(father,i_indresppt), by='pidp', type='left')
i_indresppm<-join_all(list(mother,i_indresppt), by='pidp', type='left')

#for housing tenure
i_indresppf<-join_all(list(i_indresppf,i_hhresp), by='i_hidp', type='left')
i_indresppm<-join_all(list(i_indresppm,i_hhresp), by='i_hidp', type='left')

#for emboost
i_indresppf<-join_all(list(i_indresppf,i_hhsamp), by='i_hidp', type='left')
i_indresppm<-join_all(list(i_indresppm,i_hhsamp), by='i_hidp', type='left')

#rename var to differentiate parents
i_indresppf <-
        rename_at(i_indresppf, vars(starts_with("i_")), ~str_replace(., "i_", "ip_")) 
i_indresppm <-
        rename_at(i_indresppm, vars(starts_with("i_")), ~str_replace(., "i_", "im_")) 

#join to the child-level data by parent's pidp
colnames(i_indresppf)[1]<-"father_pidp"
colnames(i_indresppm)[1]<-"mother_pidp"

i_indresppf<-join_all(list(i_indrespc,i_indresppf), by="father_pidp", type='left')
i_indresppm<-join_all(list(i_indrespc,i_indresppm), by="mother_pidp", type='left')

i_indrespp<-join_all(list(i_indresppm,i_indresppf), by="pidp", type='left')

i_indrespp<-i_indrespp %>% distinct_at(vars(pidp), .keep_all = TRUE)

rm(father,mother,i_egoaltt,i_indrespc,i_indresppf,i_indresppm,i_indresppt)

#drop duplicate columns
i_indrespp <- i_indrespp %>% select(-contains(".1"))

```

```{r}
## add cross wave identifier
i_indrespp$from_wave_i<-1
```

##### Wave 10

```{r}
mothers <- j_egoalt %>%
  filter(j_relationship_dv %in% c(4) & j_asex==2) %>%
  select(pidp, apidp)
mothers$mother_pidp=mothers$apidp

j_egoalt <- j_egoalt %>%
  full_join(mothers, by=c("pidp", "apidp")) 

rm(mothers)

fathers <- j_egoalt %>%
  filter(j_relationship_dv %in% c(4) & j_asex==1) %>%
  select(pidp, apidp)
fathers$father_pidp=fathers$apidp

j_egoalt <- j_egoalt %>%
  full_join(fathers, by=c("pidp", "apidp"))

rm(fathers)

other_relatives <- j_egoalt %>%
  filter(!(j_relationship_dv%in% c(1,2,3,4,9)) ) %>%
  select(pidp, apidp)
other_relatives$other_relatives_pidp=other_relatives$apidp

j_egoalt <- j_egoalt %>%
  full_join(other_relatives, by=c("pidp", "apidp"))

rm(other_relatives)

#at least two relatives in the household structure who are not the focal individual's parent, partner, or child
test<-j_egoalt%>%aggregate(other_relatives_pidp~pidp,FUN=length)
colnames(test)<-c("pidp","relativenum")
j_egoalt<-join_all(list(j_egoalt,test),by="pidp",type="left")
rm(test)


#whether respondent live with a child
child <- j_egoalt %>%
  filter(j_relationship_dv%in% c(9) ) %>%
  select(pidp, apidp)
child$child_pidp=child$apidp
j_egoalt <- j_egoalt %>%
  full_join(child, by=c("pidp", "apidp"))
rm(child)
#count number of respondent children
test<-j_egoalt%>%aggregate(child_pidp~pidp,FUN=length)
colnames(test)<-c("pidp","childnum")
j_egoalt<-join_all(list(j_egoalt,test),by="pidp",type="left")
rm(test)


#whether respondent cohabit with a partner(marriage)
mar <- j_egoalt %>%
  filter(j_relationship_dv%in% c(1,2) ) %>%
  select(pidp, apidp)
mar$mar_pidp=mar$apidp
j_egoalt <- j_egoalt %>%
  full_join(mar, by=c("pidp", "apidp"))
rm(mar)
#count number of respondent married partner
test<-j_egoalt%>%aggregate(mar_pidp~pidp,FUN=length)
colnames(test)<-c("pidp","live_with_husbandwife")
j_egoalt<-join_all(list(j_egoalt,test),by="pidp",type="left")
rm(test)

#whether respondent cohabit with a partner(cohabitation)
cohab <- j_egoalt %>%
  filter(j_relationship_dv%in% c(3) ) %>%
  select(pidp, apidp)
cohab$cohab_pidp=cohab$apidp
j_egoalt <- j_egoalt %>%
  full_join(cohab, by=c("pidp", "apidp"))
rm(cohab)
#count number of cohabitee
test<-j_egoalt%>%aggregate(cohab_pidp~pidp,FUN=length)
colnames(test)<-c("pidp","live_with_cohabitee")
j_egoalt<-join_all(list(j_egoalt,test),by="pidp",type="left")
rm(test)


# leave: not live with mothers
j_egoalt$separated_m <- labelled(
  ifelse((!is.na(j_egoalt$mother_pidp) & j_egoalt$j_enwstat==5), -8, 
  ifelse((!is.na(j_egoalt$mother_pidp)  & j_egoalt$j_anwstat==5), 3,
  ifelse((!is.na(j_egoalt$mother_pidp)  & 
          j_egoalt$j_anwstat==2 & j_egoalt$j_enwstat %in% c(3,4)), 2,
  ifelse((!is.na(j_egoalt$mother_pidp) & 
          j_egoalt$j_anwstat %in% c(3,4) & j_egoalt$j_enwstat==2), 2,
  ifelse((!is.na(j_egoalt$mother_pidp) &
          j_egoalt$j_anwstat==2 & j_egoalt$j_enwstat==2), 1,
  ifelse((!is.na(j_egoalt$mother_pidp)& j_egoalt$j_anwstat==1), 0,
        ifelse((!is.na(j_egoalt$mother_pidp)), -9, NA))))))),
  
  label = "Whether living with biological mother at the next wave",
  labels = c("missing" = -9, 
             "ego not alive at next wave" = -8,
             "living together at next wave" = 0, "separated_m at next wave" = 1,
             "possibly separated_m at next wave" = 2,
             "mother not alive at next wave" = 3))

#leave: not live with fathers
j_egoalt$separated_f <- labelled(
  ifelse((!is.na(j_egoalt$father_pidp) & j_egoalt$j_enwstat==5), -8, 
  ifelse((!is.na(j_egoalt$father_pidp)  & j_egoalt$j_anwstat==5), 3,
  ifelse((!is.na(j_egoalt$father_pidp)  & 
          j_egoalt$j_anwstat==2 & j_egoalt$j_enwstat %in% c(3,4)), 2,
  ifelse((!is.na(j_egoalt$father_pidp) & 
          j_egoalt$j_anwstat %in% c(3,4) & j_egoalt$j_enwstat==2), 2,
  ifelse((!is.na(j_egoalt$father_pidp) &
          j_egoalt$j_anwstat==2 & j_egoalt$j_enwstat==2), 1,
  ifelse((!is.na(j_egoalt$father_pidp) & j_egoalt$j_anwstat==1), 0,
        ifelse((!is.na(j_egoalt$father_pidp)), -9, NA))))))),
  
  label = "Whether living with biological father at the next wave",
  labels = c("missing" = -9, 
             "ego not alive at next wave" = -8,
             "living together at next wave" = 0, "separated at next wave" = 1,
             "possibly separated at next wave" = 2,
             "father not alive at next wave" = 3))


#fill the separate indicator
j_egoalt<-j_egoalt %>%group_by(pidp) %>%tidyr::fill(separated_m,.direction="updown")
j_egoalt<-j_egoalt %>%group_by(pidp) %>%tidyr::fill(separated_f,.direction="updown")


#find out who separate from both parents
#not live with both parents
j_egoalt$separated<- labelled(
  ifelse((j_egoalt$separated_m%in%c(1)&j_egoalt$separated_f%in%c(1)),1,
         
  ifelse((j_egoalt$separated_m%in%c(1)& is.na(j_egoalt$separated_f)),1,#one
  ifelse((j_egoalt$separated_f%in%c(1)& is.na(j_egoalt$separated_m)),1,
         
  ifelse((j_egoalt$separated_f%in%c(1)& j_egoalt$separated_m%in%c(3)),1,#deadth
  ifelse((j_egoalt$separated_m%in%c(1)& j_egoalt$separated_f%in%c(3)),1,      

  #possibly separated       
  ifelse((j_egoalt$separated_m%in%c(2)&j_egoalt$separated_f%in%c(2)),2,
  ifelse((j_egoalt$separated_m%in%c(1)&j_egoalt$separated_f%in%c(2)),2,
  ifelse((j_egoalt$separated_m%in%c(2)&j_egoalt$separated_f%in%c(1)),2,
         
  ifelse((j_egoalt$separated_m%in%c(2)& is.na(j_egoalt$separated_f)),2,#one
  ifelse((j_egoalt$separated_f%in%c(2)& is.na(j_egoalt$separated_m)),2, 
         
  ifelse((j_egoalt$separated_f%in%c(2)& j_egoalt$separated_m%in%c(3)),1,#deadth
  ifelse((j_egoalt$separated_m%in%c(2)& j_egoalt$separated_f%in%c(3)),1,             
         
  #living together     
  ifelse((j_egoalt$separated_m%in%c(0)|j_egoalt$separated_f%in%c(0)),0,
  #respondents dead
  ifelse((j_egoalt$separated_m%in%c(-8)|j_egoalt$separated_f%in%c(-8)),-8,
         ifelse((!is.na(j_egoalt$separated_m)|!is.na(j_egoalt$separated_f)),-9,NA))))))))))))))),
         
  label = "Whether living with at least one biological parent at the next wave",
  labels = c("missing" = -9, 
             "ego not alive at next wave" = -8,
             "living together with at least one parent at next wave" = 0,
             "separated from both parents at next wave" = 1,
             "possibly separated from both parents at next wave" = 2))


#living with both parents indicator 
j_egoalt<-j_egoalt %>%group_by(pidp) %>%tidyr::fill(mother_pidp,.direction="updown")
j_egoalt<-j_egoalt %>%group_by(pidp) %>%tidyr::fill(father_pidp,.direction="updown")


#flags for living with mother or father this wave
j_egoalt<-j_egoalt%>%group_by(pidp)%>%mutate(livewithmother=ifelse(!is.na(j_egoalt$mother_pidp),1,0))
j_egoalt<-j_egoalt%>%group_by(pidp)%>%mutate(livewithfather=ifelse(!is.na(j_egoalt$father_pidp),1,0))

#living with both parents this wave
j_egoalt$liveboth<-c(0)
j_egoalt$liveboth[j_egoalt$livewithmother==1 & j_egoalt$livewithfather==1]<-1


#a column for living with mother, father, or both this wave
j_egoalt$lvpa<-c(0)
j_egoalt$lvpa[j_egoalt$livewithmother==1]<-1
j_egoalt$lvpa[j_egoalt$livewithfather==1]<-2
j_egoalt$lvpa[j_egoalt$liveboth==1]<-3
j_egoalt$lvpa[j_egoalt$lvpa==0]<-NA

j_egoalt$lvpa<-factor(j_egoalt$lvpa, levels=c(1,2,3),labels=c("live with mother","live with father","live with both parents"))

#select only for those who live with at least one parent this wave and at risk of leaving next wave
j_egoalt<-j_egoalt[which(j_egoalt$lvpa%in%c("live with mother","live with father","live with both parents")),]

```

```{r}
#merge datafiles
j_indresp<-j_indresp%>%dplyr::select(pidp, j_hidp, j_mastat_dv,
         j_age_dv, j_sex_dv, j_hiqual_dv,
         j_mastat_dv, j_racel_dv,j_fimnnet_dv,j_nchild_dv,j_urban_dv,j_gor_dv,j_jbstat,j_sf1,j_scsf1,j_susp)


j_egoaltt<-j_egoalt%>%dplyr::select(pidp,mother_pidp,father_pidp,separated_m,separated_f,separated,lvpa,relativenum,childnum,live_with_husbandwife,live_with_cohabitee)

#child levels
j_indrespc<-join_all(list(j_indresp,j_egoaltt), by='pidp', type='left')
j_indrespc<-j_indrespc %>% distinct_at(vars(pidp), .keep_all = TRUE)

j_indrespc<-j_indrespc[(which(!is.na(j_indrespc$mother_pidp)|!is.na(j_indrespc$father_pidp))),]



#add parent levels
j_indresppt <-j_indresp

#join parental data by pidp
father<-as.data.frame(j_indrespc$father_pidp)
mother<-as.data.frame(j_indrespc$mother_pidp)

colnames(father)[1]<-"pidp"
colnames(mother)[1]<-"pidp"

#attached parental values
j_indresppf<-join_all(list(father,j_indresppt), by='pidp', type='left')
j_indresppm<-join_all(list(mother,j_indresppt), by='pidp', type='left')

#for housing tenure
j_indresppf<-join_all(list(j_indresppf,j_hhresp), by='j_hidp', type='left')
j_indresppm<-join_all(list(j_indresppm,j_hhresp), by='j_hidp', type='left')

#for emboost
j_indresppf<-join_all(list(j_indresppf,j_hhsamp), by='j_hidp', type='left')
j_indresppm<-join_all(list(j_indresppm,j_hhsamp), by='j_hidp', type='left')

#rename var to differentiate parents
j_indresppf <-
        rename_at(j_indresppf, vars(starts_with("j_")), ~str_replace(., "j_", "ip_")) 
j_indresppm <-
        rename_at(j_indresppm, vars(starts_with("j_")), ~str_replace(., "j_", "im_")) 

#join to the child-level data by parent's pidp
colnames(j_indresppf)[1]<-"father_pidp"
colnames(j_indresppm)[1]<-"mother_pidp"

j_indresppf<-join_all(list(j_indrespc,j_indresppf), by="father_pidp", type='left')
j_indresppm<-join_all(list(j_indrespc,j_indresppm), by="mother_pidp", type='left')

j_indrespp<-join_all(list(j_indresppm,j_indresppf), by="pidp", type='left')

j_indrespp<-j_indrespp %>% distinct_at(vars(pidp), .keep_all = TRUE)

rm(father,mother,j_egoaltt,j_indrespc,j_indresppf,j_indresppm,j_indresppt)

#drop duplicate columns
j_indrespp <- j_indrespp %>% select(-contains(".1"))

```

```{r}
j_indrespp$from_wave_j<-1
```

##### Wave 11

```{r}
mothers <- k_egoalt %>%
  filter(k_relationship_dv %in% c(4) & k_asex==2) %>%
  select(pidp, apidp)
mothers$mother_pidp=mothers$apidp

k_egoalt <- k_egoalt %>%
  full_join(mothers, by=c("pidp", "apidp")) 

rm(mothers)

fathers <- k_egoalt %>%
  filter(k_relationship_dv %in% c(4) & k_asex==1) %>%
  select(pidp, apidp)
fathers$father_pidp=fathers$apidp

k_egoalt <- k_egoalt %>%
  full_join(fathers, by=c("pidp", "apidp"))

rm(fathers)

other_relatives <- k_egoalt %>%
  filter(!(k_relationship_dv%in% c(1,2,3,4,9)) ) %>%
  select(pidp, apidp)
other_relatives$other_relatives_pidp=other_relatives$apidp

k_egoalt <- k_egoalt %>%
  full_join(other_relatives, by=c("pidp", "apidp"))

rm(other_relatives)

#at least two relatives in the household structure who are not the focal individual's parent, partner, or child
test<-k_egoalt%>%aggregate(other_relatives_pidp~pidp,FUN=length)
colnames(test)<-c("pidp","relativenum")
k_egoalt<-join_all(list(k_egoalt,test),by="pidp",type="left")
rm(test)


#whether respondent live with a child
child <- k_egoalt %>%
  filter(k_relationship_dv%in% c(9) ) %>%
  select(pidp, apidp)
child$child_pidp=child$apidp
k_egoalt <- k_egoalt %>%
  full_join(child, by=c("pidp", "apidp"))
rm(child)
#count number of respondent children
test<-k_egoalt%>%aggregate(child_pidp~pidp,FUN=length)
colnames(test)<-c("pidp","childnum")
k_egoalt<-join_all(list(k_egoalt,test),by="pidp",type="left")
rm(test)


#whether respondent cohabit with a partner(marriage)
mar <- k_egoalt %>%
  filter(k_relationship_dv%in% c(1,2) ) %>%
  select(pidp, apidp)
mar$mar_pidp=mar$apidp
k_egoalt <- k_egoalt %>%
  full_join(mar, by=c("pidp", "apidp"))
rm(mar)
#count number of respondent married partner
test<-k_egoalt%>%aggregate(mar_pidp~pidp,FUN=length)
colnames(test)<-c("pidp","live_with_husbandwife")
k_egoalt<-join_all(list(k_egoalt,test),by="pidp",type="left")
rm(test)

#whether respondent cohabit with a partner(cohabitation)
cohab <- k_egoalt %>%
  filter(k_relationship_dv%in% c(3) ) %>%
  select(pidp, apidp)
cohab$cohab_pidp=cohab$apidp
k_egoalt <- k_egoalt %>%
  full_join(cohab, by=c("pidp", "apidp"))
rm(cohab)
#count number of cohabitee
test<-k_egoalt%>%aggregate(cohab_pidp~pidp,FUN=length)
colnames(test)<-c("pidp","live_with_cohabitee")
k_egoalt<-join_all(list(k_egoalt,test),by="pidp",type="left")
rm(test)


# leave: not live with mothers
k_egoalt$separated_m <- labelled(
  ifelse((!is.na(k_egoalt$mother_pidp) & k_egoalt$k_enwstat==5), -8, 
  ifelse((!is.na(k_egoalt$mother_pidp)  & k_egoalt$k_anwstat==5), 3,
  ifelse((!is.na(k_egoalt$mother_pidp)  & 
          k_egoalt$k_anwstat==2 & k_egoalt$k_enwstat %in% c(3,4)), 2,
  ifelse((!is.na(k_egoalt$mother_pidp) & 
          k_egoalt$k_anwstat %in% c(3,4) & k_egoalt$k_enwstat==2), 2,
  ifelse((!is.na(k_egoalt$mother_pidp) &
          k_egoalt$k_anwstat==2 & k_egoalt$k_enwstat==2), 1,
  ifelse((!is.na(k_egoalt$mother_pidp)& k_egoalt$k_anwstat==1), 0,
        ifelse((!is.na(k_egoalt$mother_pidp)), -9, NA))))))),
  
  label = "Whether living with biological mother at the next wave",
  labels = c("missing" = -9, 
             "ego not alive at next wave" = -8,
             "living together at next wave" = 0, "separated_m at next wave" = 1,
             "possibly separated_m at next wave" = 2,
             "mother not alive at next wave" = 3))

#leave: not live with fathers
k_egoalt$separated_f <- labelled(
  ifelse((!is.na(k_egoalt$father_pidp) & k_egoalt$k_enwstat==5), -8, 
  ifelse((!is.na(k_egoalt$father_pidp)  & k_egoalt$k_anwstat==5), 3,
  ifelse((!is.na(k_egoalt$father_pidp)  & 
          k_egoalt$k_anwstat==2 & k_egoalt$k_enwstat %in% c(3,4)), 2,
  ifelse((!is.na(k_egoalt$father_pidp) & 
          k_egoalt$k_anwstat %in% c(3,4) & k_egoalt$k_enwstat==2), 2,
  ifelse((!is.na(k_egoalt$father_pidp) &
          k_egoalt$k_anwstat==2 & k_egoalt$k_enwstat==2), 1,
  ifelse((!is.na(k_egoalt$father_pidp) & k_egoalt$k_anwstat==1), 0,
        ifelse((!is.na(k_egoalt$father_pidp)), -9, NA))))))),
  
  label = "Whether living with biological father at the next wave",
  labels = c("missing" = -9, 
             "ego not alive at next wave" = -8,
             "living together at next wave" = 0, "separated at next wave" = 1,
             "possibly separated at next wave" = 2,
             "father not alive at next wave" = 3))


#fill the separate indicator
k_egoalt<-k_egoalt %>%group_by(pidp) %>%tidyr::fill(separated_m,.direction="updown")
k_egoalt<-k_egoalt %>%group_by(pidp) %>%tidyr::fill(separated_f,.direction="updown")


#find out who separate from both parents
#not live with both parents
k_egoalt$separated<- labelled(
  ifelse((k_egoalt$separated_m%in%c(1)&k_egoalt$separated_f%in%c(1)),1,
         
  ifelse((k_egoalt$separated_m%in%c(1)& is.na(k_egoalt$separated_f)),1,#one
  ifelse((k_egoalt$separated_f%in%c(1)& is.na(k_egoalt$separated_m)),1,
         
  ifelse((k_egoalt$separated_f%in%c(1)& k_egoalt$separated_m%in%c(3)),1,#deadth
  ifelse((k_egoalt$separated_m%in%c(1)& k_egoalt$separated_f%in%c(3)),1,      

  #possibly separated       
  ifelse((k_egoalt$separated_m%in%c(2)&k_egoalt$separated_f%in%c(2)),2,
  ifelse((k_egoalt$separated_m%in%c(1)&k_egoalt$separated_f%in%c(2)),2,
  ifelse((k_egoalt$separated_m%in%c(2)&k_egoalt$separated_f%in%c(1)),2,
         
  ifelse((k_egoalt$separated_m%in%c(2)& is.na(k_egoalt$separated_f)),2,#one
  ifelse((k_egoalt$separated_f%in%c(2)& is.na(k_egoalt$separated_m)),2, 
         
  ifelse((k_egoalt$separated_f%in%c(2)& k_egoalt$separated_m%in%c(3)),1,#deadth
  ifelse((k_egoalt$separated_m%in%c(2)& k_egoalt$separated_f%in%c(3)),1,             
         
  #living together     
  ifelse((k_egoalt$separated_m%in%c(0)|k_egoalt$separated_f%in%c(0)),0,
  #respondents dead
  ifelse((k_egoalt$separated_m%in%c(-8)|k_egoalt$separated_f%in%c(-8)),-8,
         ifelse((!is.na(k_egoalt$separated_m)|!is.na(k_egoalt$separated_f)),-9,NA))))))))))))))),
         
  label = "Whether living with at least one biological parent at the next wave",
  labels = c("missing" = -9, 
             "ego not alive at next wave" = -8,
             "living together with at least one parent at next wave" = 0,
             "separated from both parents at next wave" = 1,
             "possibly separated from both parents at next wave" = 2))


#living with both parents indicator 
k_egoalt<-k_egoalt %>%group_by(pidp) %>%tidyr::fill(mother_pidp,.direction="updown")
k_egoalt<-k_egoalt %>%group_by(pidp) %>%tidyr::fill(father_pidp,.direction="updown")


#flags for living with mother or father this wave
k_egoalt<-k_egoalt%>%group_by(pidp)%>%mutate(livewithmother=ifelse(!is.na(k_egoalt$mother_pidp),1,0))
k_egoalt<-k_egoalt%>%group_by(pidp)%>%mutate(livewithfather=ifelse(!is.na(k_egoalt$father_pidp),1,0))

#living with both parents this wave
k_egoalt$liveboth<-c(0)
k_egoalt$liveboth[k_egoalt$livewithmother==1 & k_egoalt$livewithfather==1]<-1


#a column for living with mother, father, or both this wave
k_egoalt$lvpa<-c(0)
k_egoalt$lvpa[k_egoalt$livewithmother==1]<-1
k_egoalt$lvpa[k_egoalt$livewithfather==1]<-2
k_egoalt$lvpa[k_egoalt$liveboth==1]<-3
k_egoalt$lvpa[k_egoalt$lvpa==0]<-NA

k_egoalt$lvpa<-factor(k_egoalt$lvpa, levels=c(1,2,3),labels=c("live with mother","live with father","live with both parents"))

#select only for those who live with at least one parent this wave and at risk of leaving next wave
k_egoalt<-k_egoalt[which(k_egoalt$lvpa%in%c("live with mother","live with father","live with both parents")),]

```

```{r}
#merge datafiles
k_indresp<-k_indresp%>%dplyr::select(pidp, k_hidp, k_mastat_dv,
         k_age_dv, k_sex_dv, k_hiqual_dv,
         k_mastat_dv, k_racel_dv,k_fimnnet_dv,k_nchild_dv,k_urban_dv,k_gor_dv,k_jbstat,k_sf1,k_scsf1,k_susp)


k_egoaltt<-k_egoalt%>%dplyr::select(pidp,mother_pidp,father_pidp,separated_m,separated_f,separated,lvpa,relativenum,childnum,live_with_husbandwife,live_with_cohabitee)

#child levels
k_indrespc<-join_all(list(k_indresp,k_egoaltt), by='pidp', type='left')
k_indrespc<-k_indrespc %>% distinct_at(vars(pidp), .keep_all = TRUE)

k_indrespc<-k_indrespc[(which(!is.na(k_indrespc$mother_pidp)|!is.na(k_indrespc$father_pidp))),]



#add parent levels
k_indresppt <-k_indresp

#join parental data by pidp
father<-as.data.frame(k_indrespc$father_pidp)
mother<-as.data.frame(k_indrespc$mother_pidp)

colnames(father)[1]<-"pidp"
colnames(mother)[1]<-"pidp"

#attached parental values
k_indresppf<-join_all(list(father,k_indresppt), by='pidp', type='left')
k_indresppm<-join_all(list(mother,k_indresppt), by='pidp', type='left')

#for housing tenure
k_indresppf<-join_all(list(k_indresppf,k_hhresp), by='k_hidp', type='left')
k_indresppm<-join_all(list(k_indresppm,k_hhresp), by='k_hidp', type='left')

#for emboost
k_indresppf<-join_all(list(k_indresppf,k_hhsamp), by='k_hidp', type='left')
k_indresppm<-join_all(list(k_indresppm,k_hhsamp), by='k_hidp', type='left')



#rename var to differentiate parents
k_indresppf <-
        rename_at(k_indresppf, vars(starts_with("k_")), ~str_replace(., "k_", "ip_")) 
k_indresppm <-
        rename_at(k_indresppm, vars(starts_with("k_")), ~str_replace(., "k_", "im_")) 

#join to the child-level data by parent's pidp
colnames(k_indresppf)[1]<-"father_pidp"
colnames(k_indresppm)[1]<-"mother_pidp"

k_indresppf<-join_all(list(k_indrespc,k_indresppf), by="father_pidp", type='left')
k_indresppm<-join_all(list(k_indrespc,k_indresppm), by="mother_pidp", type='left')

k_indrespp<-join_all(list(k_indresppm,k_indresppf), by="pidp", type='left')

k_indrespp<-k_indrespp %>% distinct_at(vars(pidp), .keep_all = TRUE)

rm(father,mother,k_egoaltt,k_indrespc,k_indresppf,k_indresppm,k_indresppt)

#drop duplicate columns
k_indrespp <- k_indrespp %>% select(-contains(".1"))

```

```{r}
k_indrespp$from_wave_k<-1
```

##### Wave 12

```{r}
mothers <- l_egoalt %>%
  filter(l_relationship_dv %in% c(4) & l_asex==2) %>%
  select(pidp, apidp)
mothers$mother_pidp=mothers$apidp

l_egoalt <- l_egoalt %>%
  full_join(mothers, by=c("pidp", "apidp")) 

rm(mothers)

fathers <- l_egoalt %>%
  filter(l_relationship_dv %in% c(4) & l_asex==1) %>%
  select(pidp, apidp)
fathers$father_pidp=fathers$apidp

l_egoalt <- l_egoalt %>%
  full_join(fathers, by=c("pidp", "apidp"))

rm(fathers)

other_relatives <- l_egoalt %>%
  filter(!(l_relationship_dv%in% c(1,2,3,4,9)) ) %>%
  select(pidp, apidp)
other_relatives$other_relatives_pidp=other_relatives$apidp

l_egoalt <- l_egoalt %>%
  full_join(other_relatives, by=c("pidp", "apidp"))

rm(other_relatives)

#at least two relatives in the household structure who are not the focal individual's parent, partner, or child
test<-l_egoalt%>%aggregate(other_relatives_pidp~pidp,FUN=length)
colnames(test)<-c("pidp","relativenum")
l_egoalt<-join_all(list(l_egoalt,test),by="pidp",type="left")
rm(test)


#whether respondent live with a child
child <- l_egoalt %>%
  filter(l_relationship_dv%in% c(9) ) %>%
  select(pidp, apidp)
child$child_pidp=child$apidp
l_egoalt <- l_egoalt %>%
  full_join(child, by=c("pidp", "apidp"))
rm(child)
#count number of respondent children
test<-l_egoalt%>%aggregate(child_pidp~pidp,FUN=length)
colnames(test)<-c("pidp","childnum")
l_egoalt<-join_all(list(l_egoalt,test),by="pidp",type="left")
rm(test)


#whether respondent cohabit with a partner(marriage)
mar <- l_egoalt %>%
  filter(l_relationship_dv%in% c(1,2) ) %>%
  select(pidp, apidp)
mar$mar_pidp=mar$apidp
l_egoalt <- l_egoalt %>%
  full_join(mar, by=c("pidp", "apidp"))
rm(mar)
#count number of respondent married partner
test<-l_egoalt%>%aggregate(mar_pidp~pidp,FUN=length)
colnames(test)<-c("pidp","live_with_husbandwife")
l_egoalt<-join_all(list(l_egoalt,test),by="pidp",type="left")
rm(test)

#whether respondent cohabit with a partner(cohabitation)
cohab <- l_egoalt %>%
  filter(l_relationship_dv%in% c(3) ) %>%
  select(pidp, apidp)
cohab$cohab_pidp=cohab$apidp
l_egoalt <- l_egoalt %>%
  full_join(cohab, by=c("pidp", "apidp"))
rm(cohab)
#count number of cohabitee
test<-l_egoalt%>%aggregate(cohab_pidp~pidp,FUN=length)
colnames(test)<-c("pidp","live_with_cohabitee")
l_egoalt<-join_all(list(l_egoalt,test),by="pidp",type="left")
rm(test)


# leave: not live with mothers
l_egoalt$separated_m <- labelled(
  ifelse((!is.na(l_egoalt$mother_pidp) & l_egoalt$l_enwstat==5), -8, 
  ifelse((!is.na(l_egoalt$mother_pidp)  & l_egoalt$l_anwstat==5), 3,
  ifelse((!is.na(l_egoalt$mother_pidp)  & 
          l_egoalt$l_anwstat==2 & l_egoalt$l_enwstat %in% c(3,4)), 2,
  ifelse((!is.na(l_egoalt$mother_pidp) & 
          l_egoalt$l_anwstat %in% c(3,4) & l_egoalt$l_enwstat==2), 2,
  ifelse((!is.na(l_egoalt$mother_pidp) &
          l_egoalt$l_anwstat==2 & l_egoalt$l_enwstat==2), 1,
  ifelse((!is.na(l_egoalt$mother_pidp)& l_egoalt$l_anwstat==1), 0,
        ifelse((!is.na(l_egoalt$mother_pidp)), -9, NA))))))),
  
  label = "Whether living with biological mother at the next wave",
  labels = c("missing" = -9, 
             "ego not alive at next wave" = -8,
             "living together at next wave" = 0, "separated_m at next wave" = 1,
             "possibly separated_m at next wave" = 2,
             "mother not alive at next wave" = 3))

#leave: not live with fathers
l_egoalt$separated_f <- labelled(
  ifelse((!is.na(l_egoalt$father_pidp) & l_egoalt$l_enwstat==5), -8, 
  ifelse((!is.na(l_egoalt$father_pidp)  & l_egoalt$l_anwstat==5), 3,
  ifelse((!is.na(l_egoalt$father_pidp)  & 
          l_egoalt$l_anwstat==2 & l_egoalt$l_enwstat %in% c(3,4)), 2,
  ifelse((!is.na(l_egoalt$father_pidp) & 
          l_egoalt$l_anwstat %in% c(3,4) & l_egoalt$l_enwstat==2), 2,
  ifelse((!is.na(l_egoalt$father_pidp) &
          l_egoalt$l_anwstat==2 & l_egoalt$l_enwstat==2), 1,
  ifelse((!is.na(l_egoalt$father_pidp) & l_egoalt$l_anwstat==1), 0,
        ifelse((!is.na(l_egoalt$father_pidp)), -9, NA))))))),
  
  label = "Whether living with biological father at the next wave",
  labels = c("missing" = -9, 
             "ego not alive at next wave" = -8,
             "living together at next wave" = 0, "separated at next wave" = 1,
             "possibly separated at next wave" = 2,
             "father not alive at next wave" = 3))


#fill the separate indicator
l_egoalt<-l_egoalt %>%group_by(pidp) %>%tidyr::fill(separated_m,.direction="updown")
l_egoalt<-l_egoalt %>%group_by(pidp) %>%tidyr::fill(separated_f,.direction="updown")


#find out who separate from both parents
#not live with both parents
l_egoalt$separated<- labelled(
  ifelse((l_egoalt$separated_m%in%c(1)&l_egoalt$separated_f%in%c(1)),1,
         
  ifelse((l_egoalt$separated_m%in%c(1)& is.na(l_egoalt$separated_f)),1,#one
  ifelse((l_egoalt$separated_f%in%c(1)& is.na(l_egoalt$separated_m)),1,
         
  ifelse((l_egoalt$separated_f%in%c(1)& l_egoalt$separated_m%in%c(3)),1,#deadth
  ifelse((l_egoalt$separated_m%in%c(1)& l_egoalt$separated_f%in%c(3)),1,      

  #possibly separated       
  ifelse((l_egoalt$separated_m%in%c(2)&l_egoalt$separated_f%in%c(2)),2,
  ifelse((l_egoalt$separated_m%in%c(1)&l_egoalt$separated_f%in%c(2)),2,
  ifelse((l_egoalt$separated_m%in%c(2)&l_egoalt$separated_f%in%c(1)),2,
         
  ifelse((l_egoalt$separated_m%in%c(2)& is.na(l_egoalt$separated_f)),2,#one
  ifelse((l_egoalt$separated_f%in%c(2)& is.na(l_egoalt$separated_m)),2, 
         
  ifelse((l_egoalt$separated_f%in%c(2)& l_egoalt$separated_m%in%c(3)),1,#deadth
  ifelse((l_egoalt$separated_m%in%c(2)& l_egoalt$separated_f%in%c(3)),1,             
         
  #living together     
  ifelse((l_egoalt$separated_m%in%c(0)|l_egoalt$separated_f%in%c(0)),0,
  #respondents dead
  ifelse((l_egoalt$separated_m%in%c(-8)|l_egoalt$separated_f%in%c(-8)),-8,
         ifelse((!is.na(l_egoalt$separated_m)|!is.na(l_egoalt$separated_f)),-9,NA))))))))))))))),
         
  label = "Whether living with at least one biological parent at the next wave",
  labels = c("missing" = -9, 
             "ego not alive at next wave" = -8,
             "living together with at least one parent at next wave" = 0,
             "separated from both parents at next wave" = 1,
             "possibly separated from both parents at next wave" = 2))


#living with both parents indicator 
l_egoalt<-l_egoalt %>%group_by(pidp) %>%tidyr::fill(mother_pidp,.direction="updown")
l_egoalt<-l_egoalt %>%group_by(pidp) %>%tidyr::fill(father_pidp,.direction="updown")


#flags for living with mother or father this wave
l_egoalt<-l_egoalt%>%group_by(pidp)%>%mutate(livewithmother=ifelse(!is.na(l_egoalt$mother_pidp),1,0))
l_egoalt<-l_egoalt%>%group_by(pidp)%>%mutate(livewithfather=ifelse(!is.na(l_egoalt$father_pidp),1,0))

#living with both parents this wave
l_egoalt$liveboth<-c(0)
l_egoalt$liveboth[l_egoalt$livewithmother==1 & l_egoalt$livewithfather==1]<-1


#a column for living with mother, father, or both this wave
l_egoalt$lvpa<-c(0)
l_egoalt$lvpa[l_egoalt$livewithmother==1]<-1
l_egoalt$lvpa[l_egoalt$livewithfather==1]<-2
l_egoalt$lvpa[l_egoalt$liveboth==1]<-3
l_egoalt$lvpa[l_egoalt$lvpa==0]<-NA

l_egoalt$lvpa<-factor(l_egoalt$lvpa, levels=c(1,2,3),labels=c("live with mother","live with father","live with both parents"))

#select only for those who live with at least one parent this wave and at risk of leaving next wave
l_egoalt<-l_egoalt[which(l_egoalt$lvpa%in%c("live with mother","live with father","live with both parents")),]

```

```{r}

#merge datafiles
l_indresp<-l_indresp%>%dplyr::select(pidp, l_hidp, l_mastat_dv,
         l_age_dv, l_sex_dv, l_hiqual_dv,
         l_mastat_dv, l_racel_dv,l_fimnnet_dv,l_nchild_dv,l_urban_dv,l_gor_dv,l_jbstat,l_sf1,l_scsf1)


l_egoaltt<-l_egoalt%>%dplyr::select(pidp,mother_pidp,father_pidp,separated_m,separated_f,separated,lvpa,relativenum,childnum,live_with_husbandwife,live_with_cohabitee)

#child levels
l_indrespc<-join_all(list(l_indresp,l_egoaltt), by='pidp', type='left')
l_indrespc<-l_indrespc %>% distinct_at(vars(pidp), .keep_all = TRUE)

l_indrespc<-l_indrespc[(which(!is.na(l_indrespc$mother_pidp)|!is.na(l_indrespc$father_pidp))),]



#add parent levels
l_indresppt <-l_indresp

#join parental data by pidp
father<-as.data.frame(l_indrespc$father_pidp)
mother<-as.data.frame(l_indrespc$mother_pidp)

colnames(father)[1]<-"pidp"
colnames(mother)[1]<-"pidp"

#attached parental values
l_indresppf<-join_all(list(father,l_indresppt), by='pidp', type='left')
l_indresppm<-join_all(list(mother,l_indresppt), by='pidp', type='left')

#for housing tenure
l_indresppf<-join_all(list(l_indresppf,l_hhresp), by='l_hidp', type='left')
l_indresppm<-join_all(list(l_indresppm,l_hhresp), by='l_hidp', type='left')

#for emboost
l_indresppf<-join_all(list(l_indresppf,l_hhsamp), by='l_hidp', type='left')
l_indresppm<-join_all(list(l_indresppm,l_hhsamp), by='l_hidp', type='left')

#rename var to differentiate parents
l_indresppf <-
        rename_at(l_indresppf, vars(starts_with("l_")), ~str_replace(., "l_", "ip_")) 
l_indresppm <-
        rename_at(l_indresppm, vars(starts_with("l_")), ~str_replace(., "l_", "im_")) 

#join to the child-level data by parent's pidp
colnames(l_indresppf)[1]<-"father_pidp"
colnames(l_indresppm)[1]<-"mother_pidp"

l_indresppf<-join_all(list(l_indrespc,l_indresppf), by="father_pidp", type='left')
l_indresppm<-join_all(list(l_indrespc,l_indresppm), by="mother_pidp", type='left')

l_indrespp<-join_all(list(l_indresppm,l_indresppf), by="pidp", type='left')

l_indrespp<-l_indrespp %>% distinct_at(vars(pidp), .keep_all = TRUE)

rm(father,mother,l_egoaltt,l_indrespc,l_indresppf,l_indresppm,l_indresppt)

#drop duplicate columns
l_indrespp <- l_indrespp %>% select(-contains(".1"))

```

```{r}
l_indrespp$from_wave_l<-1
```

##### Wave 13

```{r}
mothers <- m_egoalt %>%
  filter(m_relationship_dv %in% c(4) & m_asex==2) %>%
  select(pidp, apidp)
mothers$mother_pidp=mothers$apidp

m_egoalt <- m_egoalt %>%
  full_join(mothers, by=c("pidp", "apidp")) 

rm(mothers)

fathers <- m_egoalt %>%
  filter(m_relationship_dv %in% c(4) & m_asex==1) %>%
  select(pidp, apidp)
fathers$father_pidp=fathers$apidp

m_egoalt <- m_egoalt %>%
  full_join(fathers, by=c("pidp", "apidp"))

rm(fathers)

other_relatives <- m_egoalt %>%
  filter(!(m_relationship_dv%in% c(1,2,3,4,9)) ) %>%
  select(pidp, apidp)
other_relatives$other_relatives_pidp=other_relatives$apidp

m_egoalt <- m_egoalt %>%
  full_join(other_relatives, by=c("pidp", "apidp"))

rm(other_relatives)

#at least two relatives in the household structure who are not the focal individual's parent, partner, or child
test<-m_egoalt%>%aggregate(other_relatives_pidp~pidp,FUN=length)
colnames(test)<-c("pidp","relativenum")
m_egoalt<-join_all(list(m_egoalt,test),by="pidp",type="left")
rm(test)


#whether respondent live with a child
child <- m_egoalt %>%
  filter(m_relationship_dv%in% c(9) ) %>%
  select(pidp, apidp)
child$child_pidp=child$apidp
m_egoalt <- m_egoalt %>%
  full_join(child, by=c("pidp", "apidp"))
rm(child)
#count number of respondent children
test<-m_egoalt%>%aggregate(child_pidp~pidp,FUN=length)
colnames(test)<-c("pidp","childnum")
m_egoalt<-join_all(list(m_egoalt,test),by="pidp",type="left")
rm(test)


#whether respondent cohabit with a partner(marriage)
mar <- m_egoalt %>%
  filter(m_relationship_dv%in% c(1,2) ) %>%
  select(pidp, apidp)
mar$mar_pidp=mar$apidp
m_egoalt <- m_egoalt %>%
  full_join(mar, by=c("pidp", "apidp"))
rm(mar)
#count number of respondent married partner
test<-m_egoalt%>%aggregate(mar_pidp~pidp,FUN=length)
colnames(test)<-c("pidp","live_with_husbandwife")
m_egoalt<-join_all(list(m_egoalt,test),by="pidp",type="left")
rm(test)

#whether respondent cohabit with a partner(cohabitation)
cohab <- m_egoalt %>%
  filter(m_relationship_dv%in% c(3) ) %>%
  select(pidp, apidp)
cohab$cohab_pidp=cohab$apidp
m_egoalt <- m_egoalt %>%
  full_join(cohab, by=c("pidp", "apidp"))
rm(cohab)
#count number of cohabitee
test<-m_egoalt%>%aggregate(cohab_pidp~pidp,FUN=length)
colnames(test)<-c("pidp","live_with_cohabitee")
m_egoalt<-join_all(list(m_egoalt,test),by="pidp",type="left")
rm(test)


# leave: not live with mothers
m_egoalt$separated_m <- labelled(
  ifelse((!is.na(m_egoalt$mother_pidp) & m_egoalt$m_enwstat==5), -8, 
  ifelse((!is.na(m_egoalt$mother_pidp)  & m_egoalt$m_anwstat==5), 3,
  ifelse((!is.na(m_egoalt$mother_pidp)  & 
          m_egoalt$m_anwstat==2 & m_egoalt$m_enwstat %in% c(3,4)), 2,
  ifelse((!is.na(m_egoalt$mother_pidp) & 
          m_egoalt$m_anwstat %in% c(3,4) & m_egoalt$m_enwstat==2), 2,
  ifelse((!is.na(m_egoalt$mother_pidp) &
          m_egoalt$m_anwstat==2 & m_egoalt$m_enwstat==2), 1,
  ifelse((!is.na(m_egoalt$mother_pidp)& m_egoalt$m_anwstat==1), 0,
        ifelse((!is.na(m_egoalt$mother_pidp)), -9, NA))))))),
  
  label = "Whether living with biological mother at the next wave",
  labels = c("missing" = -9, 
             "ego not alive at next wave" = -8,
             "living together at next wave" = 0, "separated_m at next wave" = 1,
             "possibly separated_m at next wave" = 2,
             "mother not alive at next wave" = 3))

#leave: not live with fathers
m_egoalt$separated_f <- labelled(
  ifelse((!is.na(m_egoalt$father_pidp) & m_egoalt$m_enwstat==5), -8, 
  ifelse((!is.na(m_egoalt$father_pidp)  & m_egoalt$m_anwstat==5), 3,
  ifelse((!is.na(m_egoalt$father_pidp)  & 
          m_egoalt$m_anwstat==2 & m_egoalt$m_enwstat %in% c(3,4)), 2,
  ifelse((!is.na(m_egoalt$father_pidp) & 
          m_egoalt$m_anwstat %in% c(3,4) & m_egoalt$m_enwstat==2), 2,
  ifelse((!is.na(m_egoalt$father_pidp) &
          m_egoalt$m_anwstat==2 & m_egoalt$m_enwstat==2), 1,
  ifelse((!is.na(m_egoalt$father_pidp) & m_egoalt$m_anwstat==1), 0,
        ifelse((!is.na(m_egoalt$father_pidp)), -9, NA))))))),
  
  label = "Whether living with biological father at the next wave",
  labels = c("missing" = -9, 
             "ego not alive at next wave" = -8,
             "living together at next wave" = 0, "separated at next wave" = 1,
             "possibly separated at next wave" = 2,
             "father not alive at next wave" = 3))


#fill the separate indicator
m_egoalt<-m_egoalt %>%group_by(pidp) %>%tidyr::fill(separated_m,.direction="updown")
m_egoalt<-m_egoalt %>%group_by(pidp) %>%tidyr::fill(separated_f,.direction="updown")


#find out who separate from both parents
#not live with both parents
m_egoalt$separated<- labelled(
  ifelse((m_egoalt$separated_m%in%c(1)&m_egoalt$separated_f%in%c(1)),1,
         
  ifelse((m_egoalt$separated_m%in%c(1)& is.na(m_egoalt$separated_f)),1,#one
  ifelse((m_egoalt$separated_f%in%c(1)& is.na(m_egoalt$separated_m)),1,
         
  ifelse((m_egoalt$separated_f%in%c(1)& m_egoalt$separated_m%in%c(3)),1,#deadth
  ifelse((m_egoalt$separated_m%in%c(1)& m_egoalt$separated_f%in%c(3)),1,      

  #possibly separated       
  ifelse((m_egoalt$separated_m%in%c(2)&m_egoalt$separated_f%in%c(2)),2,
  ifelse((m_egoalt$separated_m%in%c(1)&m_egoalt$separated_f%in%c(2)),2,
  ifelse((m_egoalt$separated_m%in%c(2)&m_egoalt$separated_f%in%c(1)),2,
         
  ifelse((m_egoalt$separated_m%in%c(2)& is.na(m_egoalt$separated_f)),2,#one
  ifelse((m_egoalt$separated_f%in%c(2)& is.na(m_egoalt$separated_m)),2, 
         
  ifelse((m_egoalt$separated_f%in%c(2)& m_egoalt$separated_m%in%c(3)),1,#deadth
  ifelse((m_egoalt$separated_m%in%c(2)& m_egoalt$separated_f%in%c(3)),1,             
         
  #living together     
  ifelse((m_egoalt$separated_m%in%c(0)|m_egoalt$separated_f%in%c(0)),0,
  #respondents dead
  ifelse((m_egoalt$separated_m%in%c(-8)|m_egoalt$separated_f%in%c(-8)),-8,
         ifelse((!is.na(m_egoalt$separated_m)|!is.na(m_egoalt$separated_f)),-9,NA))))))))))))))),
         
  label = "Whether living with at least one biological parent at the next wave",
  labels = c("missing" = -9, 
             "ego not alive at next wave" = -8,
             "living together with at least one parent at next wave" = 0,
             "separated from both parents at next wave" = 1,
             "possibly separated from both parents at next wave" = 2))


#living with both parents indicator 
m_egoalt<-m_egoalt %>%group_by(pidp) %>%tidyr::fill(mother_pidp,.direction="updown")
m_egoalt<-m_egoalt %>%group_by(pidp) %>%tidyr::fill(father_pidp,.direction="updown")


#flags for living with mother or father this wave
m_egoalt<-m_egoalt%>%group_by(pidp)%>%mutate(livewithmother=ifelse(!is.na(m_egoalt$mother_pidp),1,0))
m_egoalt<-m_egoalt%>%group_by(pidp)%>%mutate(livewithfather=ifelse(!is.na(m_egoalt$father_pidp),1,0))

#living with both parents this wave
m_egoalt$liveboth<-c(0)
m_egoalt$liveboth[m_egoalt$livewithmother==1 & m_egoalt$livewithfather==1]<-1


#a column for living with mother, father, or both this wave
m_egoalt$lvpa<-c(0)
m_egoalt$lvpa[m_egoalt$livewithmother==1]<-1
m_egoalt$lvpa[m_egoalt$livewithfather==1]<-2
m_egoalt$lvpa[m_egoalt$liveboth==1]<-3
m_egoalt$lvpa[m_egoalt$lvpa==0]<-NA

m_egoalt$lvpa<-factor(m_egoalt$lvpa, levels=c(1,2,3),labels=c("live with mother","live with father","live with both parents"))

#select only for those who live with at least one parent this wave and at risk of leaving next wave
m_egoalt<-m_egoalt[which(m_egoalt$lvpa%in%c("live with mother","live with father","live with both parents")),]

```

```{r}
#merge datafiles
m_indresp<-m_indresp%>%dplyr::select(pidp, m_hidp, m_mastat_dv,
         m_age_dv, m_sex_dv, m_hiqual_dv,
         m_mastat_dv, m_racel_dv,m_fimnnet_dv,m_nchild_dv,m_urban_dv,m_gor_dv,m_jbstat,m_sf1,m_scsf1)


m_egoaltt<-m_egoalt%>%dplyr::select(pidp,mother_pidp,father_pidp,separated_m,separated_f,separated,lvpa,relativenum,childnum,live_with_husbandwife,live_with_cohabitee)

#child levels
m_indrespc<-join_all(list(m_indresp,m_egoaltt), by='pidp', type='left')
m_indrespc<-m_indrespc %>% distinct_at(vars(pidp), .keep_all = TRUE)

m_indrespc<-m_indrespc[(which(!is.na(m_indrespc$mother_pidp)|!is.na(m_indrespc$father_pidp))),]



#add parent levels
m_indresppt <-m_indresp

#join parental data by pidp
father<-as.data.frame(m_indrespc$father_pidp)
mother<-as.data.frame(m_indrespc$mother_pidp)

colnames(father)[1]<-"pidp"
colnames(mother)[1]<-"pidp"

#attached parental values
m_indresppf<-join_all(list(father,m_indresppt), by='pidp', type='left')
m_indresppm<-join_all(list(mother,m_indresppt), by='pidp', type='left')

#for housing tenure
m_indresppf<-join_all(list(m_indresppf,m_hhresp), by='m_hidp', type='left')
m_indresppm<-join_all(list(m_indresppm,m_hhresp), by='m_hidp', type='left')

#for emboost
m_indresppf<-join_all(list(m_indresppf,m_hhsamp), by='m_hidp', type='left')
m_indresppm<-join_all(list(m_indresppm,m_hhsamp), by='m_hidp', type='left')

#rename var to differentiate parents
m_indresppf <-
        rename_at(m_indresppf, vars(starts_with("m_")), ~str_replace(., "m_", "ip_")) 
m_indresppm <-
        rename_at(m_indresppm, vars(starts_with("m_")), ~str_replace(., "m_", "im_")) 

#join to the child-level data by parent's pidp
colnames(m_indresppf)[1]<-"father_pidp"
colnames(m_indresppm)[1]<-"mother_pidp"

m_indresppf<-join_all(list(m_indrespc,m_indresppf), by="father_pidp", type='left')
m_indresppm<-join_all(list(m_indrespc,m_indresppm), by="mother_pidp", type='left')

m_indrespp<-join_all(list(m_indresppm,m_indresppf), by="pidp", type='left')

m_indrespp<-m_indrespp %>% distinct_at(vars(pidp), .keep_all = TRUE)

rm(father,mother,m_egoaltt,m_indrespc,m_indresppf,m_indresppm,m_indresppt)

#drop duplicate columns
m_indrespp <- m_indrespp %>% select(-contains(".1"))


```

```{r}
m_indrespp$from_wave_m<-1
```

#### Merging all

```{r}
#remove all the prefixes
a_indrespp <-
        rename_at(a_indrespp, vars(starts_with("a_")), ~str_replace(., "a_", ""))
b_indrespp <-
        rename_at(b_indrespp, vars(starts_with("b_")), ~str_replace(., "b_", ""))
c_indrespp <-
        rename_at(c_indrespp, vars(starts_with("c_")), ~str_replace(., "c_", ""))
d_indrespp <-
        rename_at(d_indrespp, vars(starts_with("d_")), ~str_replace(., "d_", ""))
e_indrespp <-
        rename_at(e_indrespp, vars(starts_with("e_")), ~str_replace(., "e_", ""))
f_indrespp <-
        rename_at(f_indrespp, vars(starts_with("f_")), ~str_replace(., "f_", ""))
g_indrespp <-
        rename_at(g_indrespp, vars(starts_with("g_")), ~str_replace(., "g_", ""))
h_indrespp <-
        rename_at(h_indrespp, vars(starts_with("h_")), ~str_replace(., "h_", ""))
i_indrespp <-
        rename_at(i_indrespp, vars(starts_with("i_")), ~str_replace(., "i_", ""))
j_indrespp <-
        rename_at(j_indrespp, vars(starts_with("j_")), ~str_replace(., "j_", ""))
k_indrespp <-
        rename_at(k_indrespp, vars(starts_with("k_")), ~str_replace(., "k_", ""))
l_indrespp <-
        rename_at(l_indrespp, vars(starts_with("l_")), ~str_replace(., "l_", ""))
m_indrespp <-
        rename_at(m_indrespp, vars(starts_with("m_")), ~str_replace(., "m_", ""))

indrespa<-rbind.fill(a_indrespp,b_indrespp,c_indrespp,d_indrespp,e_indrespp,f_indrespp)
indrespa<-indrespa[which(indrespa$age_dv%in%c(16:30)),]

indrespb<-rbind.fill(h_indrespp,i_indrespp,j_indrespp,k_indrespp,l_indrespp,m_indrespp)
indrespb<-indrespb[which(indrespb$age_dv%in%c(16:30)),]

indresp<-rbind.fill(a_indrespp,b_indrespp,c_indrespp,d_indrespp,e_indrespp,f_indrespp,g_indrespp,h_indrespp,i_indrespp,j_indrespp,k_indrespp,l_indrespp,m_indrespp)
indresp<-indresp[which(indresp$age_dv%in%c(16:30)),]
```

```{r}
#transform the variables to get the information of the household interview participation,emboost, and iemb members
indrespa<-indrespa%>%mutate(hhinterview=coalesce(im_ivfho,ip_ivfho))
indrespa<-indrespa%>%mutate(emboost=coalesce(im_emboost,ip_emboost))

indrespb<-indrespb%>%mutate(hhinterview=coalesce(im_ivfho,ip_ivfho))
indrespb<-indrespb%>%mutate(emboost=coalesce(im_emboost,ip_emboost))
indrespb<-indrespb%>%mutate(iemb=coalesce(im_iemb,ip_iemb))

indresp<-indresp%>%mutate(hhinterview=coalesce(im_ivfho,ip_ivfho))
indresp<-indresp%>%mutate(emboost=coalesce(im_emboost,ip_emboost))
indresp<-indresp%>%mutate(iemb=coalesce(im_iemb,ip_iemb))
```

```{r}
#do not include the cases lost completely at t+1

```

## Remove all the used data to clean space

```{r}
rm (a_egoalt, b_egoalt, c_egoalt, d_egoalt, e_egoalt, f_egoalt, g_egoalt, h_egoalt, i_egoalt, j_egoalt, k_egoalt, l_egoalt, m_egoalt, n_egoalt )
rm(a_hhresp, b_hhresp, c_hhresp, d_hhresp, e_hhresp, f_hhresp, g_hhresp, h_hhresp, i_hhresp, j_hhresp, k_hhresp, l_hhresp, m_hhresp, n_hhresp)
rm(a_hhsamp, b_hhsamp, c_hhsamp, d_hhsamp, e_hhsamp, f_hhsamp, g_hhsamp, h_hhsamp, i_hhsamp, j_hhsamp, k_hhsamp, l_hhsamp, m_hhsamp, n_hhsamp )
rm(a_indrespp, b_indrespp, c_indrespp, d_indrespp, e_indrespp, f_indrespp,  h_indrespp, i_indrespp, j_indrespp, k_indrespp, l_indrespp, m_indrespp )
```

#### Coding variables

child level

```{r}
#child level

#level of education completed
indrespa$edu<-c(0)
indrespa$edu[indrespa$hiqual_dv%in%c(9)]<-1 #low (everything below)
indrespa$edu[indrespa$hiqual_dv%in%c(3,4,5)]<-2 #middle (completed A-level or secondary high school)
indrespa$edu[indrespa$hiqual_dv%in%c(1,2)]<-3 #high (have a degree)
indrespa$edu[indrespa$edu==0]<-NA

print(attr(indrespa$hiqual_dv,"labels"))
indrespa$edu<-factor(indrespa$edu,levels=c(1,2,3),labels=c('low',"middle","high"))

#two-category education
indrespa$edu2<-c(0)
indrespa$edu2[indrespa$hiqual_dv%in%c(1,2)]<-1 #high (have a degree)
indrespa$edu2[is.na(indrespa$hiqual_dv)]<-NA

#family structure
indrespa$family_status<-c(0)
#coresident partner and child
indrespa$family_status[indrespa$childnum>=1 & indrespa$live_with_husbandwife>=1]<-1
indrespa$family_status[indrespa$childnum>=1 & indrespa$live_with_cohabitee>=1]<-1
#coresident partner
indrespa$family_status[indrespa$live_with_cohabitee>=1 &indrespa$childnum==0]<-2
indrespa$family_status[indrespa$live_with_husbandwife>=1 &indrespa$childnum==0]<-2
indrespa$family_status[indrespa$live_with_cohabitee>=1 &is.na(indrespa$childnum)]<-2
indrespa$family_status[indrespa$live_with_husbandwife>=1 &is.na(indrespa$childnum)]<-2

#coresident child
indrespa$family_status[indrespa$childnum>=1 &indrespa$live_with_husbandwife==0 & indrespa$live_with_cohabitee==0]<-3
indrespa$family_status[indrespa$childnum>=1 &is.na(indrespa$live_with_husbandwife)& indrespa$live_with_cohabitee==0]<-3
indrespa$family_status[indrespa$childnum>=1 &indrespa$live_with_husbandwife==0 & is.na(indrespa$live_with_cohabitee)]<-3
indrespa$family_status[indrespa$childnum>=1 &is.na(indrespa$live_with_husbandwife) & is.na(indrespa$live_with_cohabitee)]<-3

#no coresident partner or child=0

indrespa$family_status<-factor(indrespa$family_status,levels=c(0,1,2,3),labels=c("No coresident partner or child","coresident partner and child","coresident partner","coresident child"))

#age centered
indrespa$age_centered<-indrespa$age_dv-mean(indrespa$age_dv)
#age squared
indrespa$age_sq<-indrespa$age_centered**2


#logarithm of income
indrespa$fimnnet_dv[indrespa$fimnnet_dv<0]<-0
#add 1 to all income values to avoid -inf in log transformation
indrespa$incomeadd<-indrespa$fimnnet_dv+1
indrespa$lnincome<-log(indrespa$incomeadd)
indrespa<-indrespa%>%dplyr::select(-incomeadd)


#racel groups 
indrespa$racel<-c(0)
indrespa$racel[indrespa$racel_dv%in%c(1,2,3,4)]<-1 #Whites
indrespa$racel[indrespa$racel_dv%in%c(14,15)]<-2 #African Caribbean
indrespa$racel[indrespa$racel_dv%in%c(9,10,11)]<-3 #Indiani,Pakistani, Bangladeshi
indrespa$racel[indrespa$racel_dv%in%c(12,13)]<-4 #Other Asian
indrespa$racel[indrespa$racel==0]<-5 #Other

indrespa$racel<-factor(indrespa$racel,levels=c(1,2,3,4,5),labels=c("Whites","African Caribbean","Indiani,Pakistani, Bangladeshi","Other Asian","Other"))

indrespa$racel[is.na(indrespa$racel_dv)]<-NA

##two-categories
indrespa$racel2<-c(0)
indrespa$racel2[indrespa$racel_dv%in%c(1,2,3,4)]<-1 #Whites
indrespa$racel2[!(indrespa$racel_dv%in%c(1,2,3,4))]<-2 #non-Whites
indrespa$racel2[is.na(indrespa$racel_dv)]<-NA

indrespa$racel2<-factor(indrespa$racel2,levels=c(1,2),labels=c("Whites","non-Whites"))

#education status
indrespa<-indrespa %>%
+     mutate(student = case_when(
+         jbstat==7~1,
+         jbstat!=7~0))#full-time student

#employment status
indrespa$unemployed<-c(0)
indrespa$unemployed[indrespa$jbstat%in%c(3)]<-1 
indrespa$unemployed[is.na(indrespa$jbstat)]<-NA

#housing prices
indrespa$houseprices<-c(0)
indrespa$houseprices[indrespa$gor_dv%in%c(1,10,11,12)]<-1 #low
indrespa$houseprices[indrespa$gor_dv%in%c(2,3,4,5)]<-2 #middle
indrespa$houseprices[indrespa$gor_dv%in%c(6,7,8,9)]<-3 #high
indrespa$houseprices[is.na(indrespa$gor_dv)]<-NA

indrespa$houseprices<-factor(indrespa$houseprices,levels=c(1,2,3),labels=c("low","middle","high"))

#urban,sex binary
indrespa$sex<-c(0)
indrespa$sex[indrespa$sex_dv==2]<-1 #females
indrespa$sex[is.na(indrespa$sex_dv)]<-NA

indrespa$urban<-c(0)
indrespa$urban[indrespa$urban_dv==1]<-1 #urban areas
indrespa$urban[is.na(indrespa$urban_dv)]<-NA

indrespa<-indrespa%>%mutate(health=coalesce(sf1,scsf1))

#living with both biological parents
indrespa$liveboth<-c(0)
indrespa$liveboth[indrespa$lvpa=="live with both parents"]<-1
indrespa$liveboth[is.na(indrespa$lvpa)]<-NA

#relative num for family structure
indrespa$large_hh<-c(0)
indrespa$large_hh[indrespa$relativenum>=2]<-1
indrespa$large_hh<-factor(indrespa$large_hh,levels=c(0,1),labels=c("small hh","large hh"))
```

```{r}
#child level

#level of education completed
indresp$edu<-c(0)
indresp$edu[indresp$hiqual_dv%in%c(9)]<-1 #low (everything below)
indresp$edu[indresp$hiqual_dv%in%c(3,4,5)]<-2 #middle (completed A-level or secondary high school)
indresp$edu[indresp$hiqual_dv%in%c(1,2)]<-3 #high (have a degree)
indresp$edu[indresp$edu==0]<-NA

print(attr(indresp$hiqual_dv,"labels"))
indresp$edu<-factor(indresp$edu,levels=c(1,2,3),labels=c('low',"middle","high"))

#two-category education
indresp$edu2<-c(0)
indresp$edu2[indresp$hiqual_dv%in%c(1,2)]<-1 #high (have a degree)
indresp$edu2[is.na(indresp$hiqual_dv)]<-NA

#family structure
indresp$family_status<-c(0)
#coresident partner and child
indresp$family_status[indresp$childnum>=1 & indresp$live_with_husbandwife>=1]<-1
indresp$family_status[indresp$childnum>=1 & indresp$live_with_cohabitee>=1]<-1
#coresident partner
indresp$family_status[indresp$live_with_cohabitee>=1 &indresp$childnum==0]<-2
indresp$family_status[indresp$live_with_husbandwife>=1 &indresp$childnum==0]<-2
indresp$family_status[indresp$live_with_cohabitee>=1 &is.na(indresp$childnum)]<-2
indresp$family_status[indresp$live_with_husbandwife>=1 &is.na(indresp$childnum)]<-2

#coresident child
indresp$family_status[indresp$childnum>=1 &indresp$live_with_husbandwife==0 & indresp$live_with_cohabitee==0]<-3
indresp$family_status[indresp$childnum>=1 &is.na(indresp$live_with_husbandwife)& indresp$live_with_cohabitee==0]<-3
indresp$family_status[indresp$childnum>=1 &indresp$live_with_husbandwife==0 & is.na(indresp$live_with_cohabitee)]<-3
indresp$family_status[indresp$childnum>=1 &is.na(indresp$live_with_husbandwife) & is.na(indresp$live_with_cohabitee)]<-3

#no coresident partner or child=0

indresp$family_status<-factor(indresp$family_status,levels=c(0,1,2,3),labels=c("No coresident partner or child","coresident partner and child","coresident partner","coresident child"))

#age centered
indresp$age_centered<-indresp$age_dv-mean(indresp$age_dv)
#age squared
indresp$age_sq<-indresp$age_centered**2


#logarithm of income
indresp$fimnnet_dv[indresp$fimnnet_dv<0]<-0
#add 1 to all income values to avoid -inf in log transformation
indresp$incomeadd<-indresp$fimnnet_dv+1
indresp$lnincome<-log(indresp$incomeadd)
indresp<-indresp%>%dplyr::select(-incomeadd)


#racel groups 
indresp$racel<-c(0)
indresp$racel[indresp$racel_dv%in%c(1,2,3,4)]<-1 #Whites
indresp$racel[indresp$racel_dv%in%c(14,15)]<-2 #African Caribbean
indresp$racel[indresp$racel_dv%in%c(9,10,11)]<-3 #Indiani,Pakistani, Bangladeshi
indresp$racel[indresp$racel_dv%in%c(12,13)]<-4 #Other Asian
indresp$racel[indresp$racel==0]<-5 #Other

indresp$racel<-factor(indresp$racel,levels=c(1,2,3,4,5),labels=c("Whites","African Caribbean","Indiani,Pakistani, Bangladeshi","Other Asian","Other"))

indresp$racel[is.na(indresp$racel_dv)]<-NA

##two-categories
indresp$racel2<-c(0)
indresp$racel2[indresp$racel_dv%in%c(1,2,3,4)]<-1 #Whites
indresp$racel2[!(indresp$racel_dv%in%c(1,2,3,4))]<-2 #non-Whites
indresp$racel2[is.na(indresp$racel_dv)]<-NA

indresp$racel2<-factor(indresp$racel2,levels=c(1,2),labels=c("Whites","non-Whites"))

#education status
indresp<-indresp %>%
+     mutate(student = case_when(
+         jbstat==7~1,
+         jbstat!=7~0))#full-time student #full-time student


#employment status
indresp$unemployed<-c(0)
indresp$unemployed[indresp$jbstat%in%c(3)]<-1 
indresp$unemployed[is.na(indresp$jbstat)]<-NA

#housing prices
indresp$houseprices<-c(0)
indresp$houseprices[indresp$gor_dv%in%c(1,10,11,12)]<-1 #low
indresp$houseprices[indresp$gor_dv%in%c(2,3,4,5)]<-2 #middle
indresp$houseprices[indresp$gor_dv%in%c(6,7,8,9)]<-3 #high
indresp$houseprices[is.na(indresp$gor_dv)]<-NA

indresp$houseprices<-factor(indresp$houseprices,levels=c(1,2,3),labels=c("low","middle","high"))

#urban,sex binary
indresp$sex<-c(0)
indresp$sex[indresp$sex_dv==2]<-1 #females
indresp$sex[is.na(indresp$sex_dv)]<-NA

indresp$urban<-c(0)
indresp$urban[indresp$urban_dv==1]<-1 #urban areas
indresp$urban[is.na(indresp$urban_dv)]<-NA

indresp<-indresp%>%mutate(health=coalesce(sf1,scsf1))

#living with both biological parents
indresp$liveboth<-c(0)
indresp$liveboth[indresp$lvpa=="live with both parents"]<-1
indresp$liveboth[is.na(indresp$lvpa)]<-NA

#relative num for family structure
indresp$large_hh<-c(0)
indresp$large_hh[indresp$relativenum>=2]<-1
indresp$large_hh<-factor(indresp$large_hh,levels=c(0,1),labels=c("small hh","large hh"))


```

```{r}
#child level

#level of education completed
indrespb$edu<-c(0)
indrespb$edu[indrespb$hiqual_dv%in%c(9)]<-1 #low (everything below)
indrespb$edu[indrespb$hiqual_dv%in%c(3,4,5)]<-2 #middle (completed A-level or secondary high school)
indrespb$edu[indrespb$hiqual_dv%in%c(1,2)]<-3 #high (have a degree)
indrespb$edu[indrespb$edu==0]<-NA

print(attr(indrespb$hiqual_dv,"labels"))
indrespb$edu<-factor(indrespb$edu,levels=c(1,2,3),labels=c('low',"middle","high"))

#two-category education
indrespb$edu2<-c(0)
indrespb$edu2[indrespb$hiqual_dv%in%c(1,2)]<-1 #high (have a degree)
indrespb$edu2[is.na(indrespb$hiqual_dv)]<-NA

#family structure
indrespb$family_status<-c(0)
#coresident partner and child
indrespb$family_status[indrespb$childnum>=1 & indrespb$live_with_husbandwife>=1]<-1
indrespb$family_status[indrespb$childnum>=1 & indrespb$live_with_cohabitee>=1]<-1
#coresident partner
indrespb$family_status[indrespb$live_with_cohabitee>=1 &indrespb$childnum==0]<-2
indrespb$family_status[indrespb$live_with_husbandwife>=1 &indrespb$childnum==0]<-2
indrespb$family_status[indrespb$live_with_cohabitee>=1 &is.na(indrespb$childnum)]<-2
indrespb$family_status[indrespb$live_with_husbandwife>=1 &is.na(indrespb$childnum)]<-2

#coresident child
indrespb$family_status[indrespb$childnum>=1 &indrespb$live_with_husbandwife==0 & indrespb$live_with_cohabitee==0]<-3
indrespb$family_status[indrespb$childnum>=1 &is.na(indrespb$live_with_husbandwife)& indrespb$live_with_cohabitee==0]<-3
indrespb$family_status[indrespb$childnum>=1 &indrespb$live_with_husbandwife==0 & is.na(indrespb$live_with_cohabitee)]<-3
indrespb$family_status[indrespb$childnum>=1 &is.na(indrespb$live_with_husbandwife) & is.na(indrespb$live_with_cohabitee)]<-3

#no coresident partner or child=0

indrespb$family_status<-factor(indrespb$family_status,levels=c(0,1,2,3),labels=c("No coresident partner or child","coresident partner and child","coresident partner","coresident child"))

#age centered
indrespb$age_centered<-indrespb$age_dv-mean(indrespb$age_dv)
#age squared
indrespb$age_sq<-indrespb$age_centered**2


#logarithm of income
indrespb$fimnnet_dv[indrespb$fimnnet_dv<0]<-0
#add 1 to all income values to avoid -inf in log transformation
indrespb$incomeadd<-indrespb$fimnnet_dv+1
indrespb$lnincome<-log(indrespb$incomeadd)
indrespb<-indrespb%>%dplyr::select(-incomeadd)


#racel groups 
indrespb$racel<-c(0)
indrespb$racel[indrespb$racel_dv%in%c(1,2,3,4)]<-1 #Whites
indrespb$racel[indrespb$racel_dv%in%c(14,15)]<-2 #African Caribbean
indrespb$racel[indrespb$racel_dv%in%c(9,10,11)]<-3 #Indiani,Pakistani, Bangladeshi
indrespb$racel[indrespb$racel_dv%in%c(12,13)]<-4 #Other Asian
indrespb$racel[indrespb$racel==0]<-5 #Other

indrespb$racel<-factor(indrespb$racel,levels=c(1,2,3,4,5),labels=c("Whites","African Caribbean","Indiani,Pakistani, Bangladeshi","Other Asian","Other"))

indrespb$racel[is.na(indrespb$racel_dv)]<-NA

##two-categories
indrespb$racel2<-c(0)
indrespb$racel2[indrespb$racel_dv%in%c(1,2,3,4)]<-1 #Whites
indrespb$racel2[!(indrespb$racel_dv%in%c(1,2,3,4))]<-2 #non-Whites
indrespb$racel2[is.na(indrespb$racel_dv)]<-NA

indrespb$racel2<-factor(indrespb$racel2,levels=c(1,2),labels=c("Whites","non-Whites"))

#education status
indrespb<-indrespb %>%
+     mutate(student = case_when(
+         jbstat==7~1,
+         jbstat!=7~0))#full-time student

#employment status
indrespb$unemployed<-c(0)
indrespb$unemployed[indrespb$jbstat%in%c(3)]<-1 
indrespb$unemployed[is.na(indrespb$jbstat)]<-NA

#housing prices
indrespb$houseprices<-c(0)
indrespb$houseprices[indrespb$gor_dv%in%c(1,10,11,12)]<-1 #low
indrespb$houseprices[indrespb$gor_dv%in%c(2,3,4,5)]<-2 #middle
indrespb$houseprices[indrespb$gor_dv%in%c(6,7,8,9)]<-3 #high
indrespb$houseprices[is.na(indrespb$gor_dv)]<-NA

indrespb$houseprices<-factor(indrespb$houseprices,levels=c(1,2,3),labels=c("low","middle","high"))

#urban,sex binary
indrespb$sex<-c(0)
indrespb$sex[indrespb$sex_dv==2]<-1 #females
indrespb$sex[is.na(indrespb$sex_dv)]<-NA

indrespb$urban<-c(0)
indrespb$urban[indrespb$urban_dv==1]<-1 #urban areas
indrespb$urban[is.na(indrespb$urban_dv)]<-NA

indrespb<-indrespb%>%mutate(health=coalesce(sf1,scsf1))

#living with both biological parents
indrespb$liveboth<-c(0)
indrespb$liveboth[indrespb$lvpa=="live with both parents"]<-1
indrespb$liveboth[is.na(indrespb$lvpa)]<-NA

#relative num for family structure
indrespb$large_hh<-c(0)
indrespb$large_hh[indrespb$relativenum>=2]<-1
indrespb$large_hh<-factor(indrespb$large_hh,levels=c(0,1),labels=c("small hh","large hh"))

```

parental level

```{r}
#level of education completed
#Fathers:
indresp$paedu<-c(0)
indresp$paedu[indresp$ip_hiqual_dv%in%c(9)]<-1 #low (everything below)
indresp$paedu[indresp$ip_hiqual_dv%in%c(3,4,5)]<-2 #middle (completed A-level or secondary high school)
indresp$paedu[indresp$ip_hiqual_dv%in%c(1,2)]<-3 #high (have a degree)
indresp$paedu[indresp$paedu==0]<-NA

print(attr(indresp$ip_hiqual_dv,"labels"))
indresp$paedu<-factor(indresp$paedu,levels=c(1,2,3),labels=c('low',"middle","high"))

#Mothers:
indresp$maedu<-c(0)
indresp$maedu[indresp$im_hiqual_dv%in%c(9)]<-1 #low (everything below)
indresp$maedu[indresp$im_hiqual_dv%in%c(3,4,5)]<-2 #middle (completed A-level or secondary high school)
indresp$maedu[indresp$im_hiqual_dv%in%c(1,2)]<-3 #high (have a degree)
indresp$maedu[indresp$maedu==0]<-NA

indresp$maedu<-factor(indresp$maedu,levels=c(1,2,3),labels=c('low',"middle","high"))


#the highest education level between two parents
indresp<-transform(indresp, parentedu = pmin(im_hiqual_dv, ip_hiqual_dv))
indresp$parentedu<-ifelse(is.na(indresp$parentedu), indresp$im_hiqual_dv, indresp$parentedu)
indresp$parentedu<-ifelse(is.na(indresp$parentedu), indresp$ip_hiqual_dv, indresp$parentedu)

indresp$parent_edu<-c(0)
indresp$parent_edu[indresp$parentedu%in%c(9)]<-1 #low (everything below, the category "other" is included)
indresp$parent_edu[indresp$parentedu%in%c(3,4,5)]<-2 #middle (complete A-level or have some qualifications)
indresp$parent_edu[indresp$parentedu%in%c(1,2)]<-3 #high (have a degree)
indresp$parent_edu[indresp$parentedu==0]<-NA

indresp$parent_edu<-factor(indresp$parent_edu,levels=c(1,2,3),labels=c('low',"middle","high"))

#two-category education
indresp$parent_edu2<-c(0)
indresp$parent_edu2[indresp$parentedu%in%c(1,2)]<-1 #high (have a degree)
indresp$parent_edu2[is.na(indresp$parentedu)]<-NA

indresp<-indresp%>%dplyr::select(-parentedu)

#general health of parents**
indresp<-indresp%>%mutate(health_father=coalesce(ip_sf1, ip_scsf1))
indresp<-indresp%>%mutate(health_mother=coalesce(im_sf1, im_scsf1))
#least healthy parent
indresp<-transform(indresp, parenthealth = pmax(health_father, health_mother))
indresp$parenthealth<-ifelse(is.na(indresp$parenthealth), indresp$health_father, indresp$parenthealth)
indresp$parenthealth<-ifelse(is.na(indresp$parenthealth), indresp$health_mother, indresp$parenthealth)

#parent's age (youngest)
indresp <- transform(indresp, parentage = pmin(ip_age_dv
, im_age_dv))
indresp$parentage<-ifelse(is.na(indresp$parentage), indresp$ip_age_dv, indresp$parentage)
indresp$parentage<-ifelse(is.na(indresp$parentage), indresp$im_age_dv, indresp$parentage) 

#parent's income (sum and logged)
indresp$palnincome<-indresp$ip_fimnnet_dv+indresp$im_fimnnet_dv
indresp$palnincome<-ifelse(is.na(indresp$palnincome), indresp$ip_fimnnet_dv, indresp$palnincome)
indresp$palnincome<-ifelse(is.na(indresp$palnincome), indresp$im_fimnnet_dv, indresp$palnincome) 

indresp$palnincome[indresp$palnincome<0]<-0
#add 1 to all income values to avoid -inf in log transformation
indresp$paincomeadd<-indresp$palnincome+1
indresp$palnincome<-log(indresp$paincomeadd)
indresp<-indresp%>%dplyr::select(-paincomeadd)

#parent's income (quartiles)
indresp$paincome<-indresp$ip_fimnnet_dv+indresp$im_fimnnet_dv
indresp$paincome<-ifelse(is.na(indresp$paincome), indresp$ip_fimnnet_dv, indresp$paincome)
indresp$paincome<-ifelse(is.na(indresp$paincome), indresp$im_fimnnet_dv, indresp$paincome) 

print(quantile(indresp$paincome, probs = c(0,0.25,0.5,0.75,1),na.rm=T))
indresp$paincomeq<-c(0)
indresp$paincomeq[indresp$paincome<1246.52 ]<-1
indresp$paincomeq[indresp$paincome>=1246.52  & indresp$paincome<2010.00]<-2
indresp$paincomeq[indresp$paincome>=2010.00  & indresp$paincome<3175.83]<-3
indresp$paincomeq[indresp$paincome>=3175.83]<-4
indresp$paincomeq[indresp$paincomeq==0]<-NA


#parental tenure
indresp$mateure<-c(0)
indresp$mateure[indresp$im_tenure_dv%in%c(1,2)]<-1 #ownership
indresp$mateure[indresp$im_tenure_dv%in%c(3,4,5)]<-2 #social rent
indresp$mateure[indresp$im_tenure_dv%in%c(6,7,8)]<-3 #private rent n other
indresp$mateure[indresp$mateure==0]<-NA

indresp$mateure<-factor(indresp$mateure,levels=c(1,2,3),labels=c("ownership","social rent","private rent n other"))

indresp$pateure<-c(0)
indresp$pateure[indresp$ip_tenure_dv%in%c(1,2)]<-1 #ownership
indresp$pateure[indresp$ip_tenure_dv%in%c(3,4,5)]<-2 #social rent
indresp$pateure[indresp$ip_tenure_dv%in%c(6,7,8)]<-3 #private rent n other
indresp$pateure[indresp$pateure==0]<-NA

indresp$pateure<-factor(indresp$pateure,levels=c(1,2,3),labels=c("ownership","social rent","private rent n other"))

#the parents who have the most adv housing
indresp <- transform(indresp, housingtenure = pmin(ip_tenure_dv, im_tenure_dv))
indresp$housingtenure<-ifelse(is.na(indresp$housingtenure), indresp$ip_tenure_dv, indresp$housingtenure)
indresp$housingtenure<-ifelse(is.na(indresp$housingtenure), indresp$im_tenure_dv, indresp$housingtenure) 

indresp$housing_tenure<-c(0)
indresp$housing_tenure[indresp$housingtenure%in%c(1,2)]<-1 #ownership
indresp$housing_tenure[indresp$housingtenure%in%c(3,4,5)]<-2 #social rent
indresp$housing_tenure[indresp$housingtenure%in%c(6,7,8)]<-3 #private rent n other
indresp$housing_tenure[indresp$housing_tenure==0]<-NA
indresp$housing_tenure<-factor(indresp$housing_tenure,levels=c(1,2,3),labels=c("ownership","social rent","private rent n other"))

indresp<-indresp%>%dplyr::select(-housingtenure)

```

```{r}
#level of education completed
#Fathers:
indrespa$paedu<-c(0)
indrespa$paedu[indrespa$ip_hiqual_dv%in%c(9)]<-1 #low (everything below)
indrespa$paedu[indrespa$ip_hiqual_dv%in%c(3,4,5)]<-2 #middle (completed A-level or secondary high school)
indrespa$paedu[indrespa$ip_hiqual_dv%in%c(1,2)]<-3 #high (have a degree)
indrespa$paedu[indrespa$paedu==0]<-NA

print(attr(indrespa$ip_hiqual_dv,"labels"))
indrespa$paedu<-factor(indrespa$paedu,levels=c(1,2,3),labels=c('low',"middle","high"))

#Mothers:
indrespa$maedu<-c(0)
indrespa$maedu[indrespa$im_hiqual_dv%in%c(9)]<-1 #low (everything below)
indrespa$maedu[indrespa$im_hiqual_dv%in%c(3,4,5)]<-2 #middle (completed A-level or secondary high school)
indrespa$maedu[indrespa$im_hiqual_dv%in%c(1,2)]<-3 #high (have a degree)
indrespa$maedu[indrespa$maedu==0]<-NA

indrespa$maedu<-factor(indrespa$maedu,levels=c(1,2,3),labels=c('low',"middle","high"))


#the highest education level between two parents
indrespa<-transform(indrespa, parentedu = pmin(im_hiqual_dv, ip_hiqual_dv))
indrespa$parentedu<-ifelse(is.na(indrespa$parentedu), indrespa$im_hiqual_dv, indrespa$parentedu)
indrespa$parentedu<-ifelse(is.na(indrespa$parentedu), indrespa$ip_hiqual_dv, indrespa$parentedu)

indrespa$parent_edu<-c(0)
indrespa$parent_edu[indrespa$parentedu%in%c(9)]<-1 #low (everything below, the category "other" is included)
indrespa$parent_edu[indrespa$parentedu%in%c(3,4,5)]<-2 #middle (complete A-level or have some qualifications)
indrespa$parent_edu[indrespa$parentedu%in%c(1,2)]<-3 #high (have a degree)
indrespa$parent_edu[indrespa$parentedu==0]<-NA

indrespa$parent_edu<-factor(indrespa$parent_edu,levels=c(1,2,3),labels=c('low',"middle","high"))

#two-category education
indrespa$parent_edu2<-c(0)
indrespa$parent_edu2[indrespa$parentedu%in%c(1,2)]<-1 #high (have a degree)
indrespa$parent_edu2[is.na(indrespa$parentedu)]<-NA

indrespa<-indrespa%>%dplyr::select(-parentedu)

#general health of parents**
indrespa<-indrespa%>%mutate(health_father=coalesce(ip_sf1, ip_scsf1))
indrespa<-indrespa%>%mutate(health_mother=coalesce(im_sf1, im_scsf1))
#least healthy parent
indrespa<-transform(indrespa, parenthealth = pmax(health_father, health_mother))
indrespa$parenthealth<-ifelse(is.na(indrespa$parenthealth), indrespa$health_father, indrespa$parenthealth)
indrespa$parenthealth<-ifelse(is.na(indrespa$parenthealth), indrespa$health_mother, indrespa$parenthealth)

#parent's age (youngest)
indrespa <- transform(indrespa, parentage = pmin(ip_age_dv
, im_age_dv))
indrespa$parentage<-ifelse(is.na(indrespa$parentage), indrespa$ip_age_dv, indrespa$parentage)
indrespa$parentage<-ifelse(is.na(indrespa$parentage), indrespa$im_age_dv, indrespa$parentage) 

#parent's income (sum and logged)
indrespa$palnincome<-indrespa$ip_fimnnet_dv+indrespa$im_fimnnet_dv
indrespa$palnincome<-ifelse(is.na(indrespa$palnincome), indrespa$ip_fimnnet_dv, indrespa$palnincome)
indrespa$palnincome<-ifelse(is.na(indrespa$palnincome), indrespa$im_fimnnet_dv, indrespa$palnincome) 

indrespa$palnincome[indrespa$palnincome<0]<-0
#add 1 to all income values to avoid -inf in log transformation
indrespa$paincomeadd<-indrespa$palnincome+1
indrespa$palnincome<-log(indrespa$paincomeadd)
indrespa<-indrespa%>%dplyr::select(-paincomeadd)

#parent's income (quartiles)
indrespa$paincome<-indrespa$ip_fimnnet_dv+indrespa$im_fimnnet_dv
indrespa$paincome<-ifelse(is.na(indrespa$paincome), indrespa$ip_fimnnet_dv, indrespa$paincome)
indrespa$paincome<-ifelse(is.na(indrespa$paincome), indrespa$im_fimnnet_dv, indrespa$paincome) 

print(quantile(indrespa$paincome, probs = c(0,0.25,0.5,0.75,1),na.rm=T))
indrespa$paincomeq<-c(0)
indrespa$paincomeq[indrespa$paincome<1246.52 ]<-1
indrespa$paincomeq[indrespa$paincome>=1246.52  & indrespa$paincome<2010.00]<-2
indrespa$paincomeq[indrespa$paincome>=2010.00  & indrespa$paincome<3175.83]<-3
indrespa$paincomeq[indrespa$paincome>=3175.83]<-4
indrespa$paincomeq[indrespa$paincomeq==0]<-NA


#parental tenure
indrespa$mateure<-c(0)
indrespa$mateure[indrespa$im_tenure_dv%in%c(1,2)]<-1 #ownership
indrespa$mateure[indrespa$im_tenure_dv%in%c(3,4,5)]<-2 #social rent
indrespa$mateure[indrespa$im_tenure_dv%in%c(6,7,8)]<-3 #private rent n other
indrespa$mateure[indrespa$mateure==0]<-NA

indrespa$mateure<-factor(indrespa$mateure,levels=c(1,2,3),labels=c("ownership","social rent","private rent n other"))

indrespa$pateure<-c(0)
indrespa$pateure[indrespa$ip_tenure_dv%in%c(1,2)]<-1 #ownership
indrespa$pateure[indrespa$ip_tenure_dv%in%c(3,4,5)]<-2 #social rent
indrespa$pateure[indrespa$ip_tenure_dv%in%c(6,7,8)]<-3 #private rent n other
indrespa$pateure[indrespa$pateure==0]<-NA

indrespa$pateure<-factor(indrespa$pateure,levels=c(1,2,3),labels=c("ownership","social rent","private rent n other"))

#the parents who have the most adv housing
indrespa <- transform(indrespa, housingtenure = pmin(ip_tenure_dv, im_tenure_dv))
indrespa$housingtenure<-ifelse(is.na(indrespa$housingtenure), indrespa$ip_tenure_dv, indrespa$housingtenure)
indrespa$housingtenure<-ifelse(is.na(indrespa$housingtenure), indrespa$im_tenure_dv, indrespa$housingtenure) 

indrespa$housing_tenure<-c(0)
indrespa$housing_tenure[indrespa$housingtenure%in%c(1,2)]<-1 #ownership
indrespa$housing_tenure[indrespa$housingtenure%in%c(3,4,5)]<-2 #social rent
indrespa$housing_tenure[indrespa$housingtenure%in%c(6,7,8)]<-3 #private rent n other
indrespa$housing_tenure[indrespa$housing_tenure==0]<-NA
indrespa$housing_tenure<-factor(indrespa$housing_tenure,levels=c(1,2,3),labels=c("ownership","social rent","private rent n other"))

indrespa<-indrespa%>%dplyr::select(-housingtenure)

```

```{r}
#level of education completed
#Fathers:
indrespb$paedu<-c(0)
indrespb$paedu[indrespb$ip_hiqual_dv%in%c(9)]<-1 #low (everything below)
indrespb$paedu[indrespb$ip_hiqual_dv%in%c(3,4,5)]<-2 #middle (completed A-level or secondary high school)
indrespb$paedu[indrespb$ip_hiqual_dv%in%c(1,2)]<-3 #high (have a degree)
indrespb$paedu[indrespb$paedu==0]<-NA

print(attr(indrespb$ip_hiqual_dv,"labels"))
indrespb$paedu<-factor(indrespb$paedu,levels=c(1,2,3),labels=c('low',"middle","high"))

#Mothers:
indrespb$maedu<-c(0)
indrespb$maedu[indrespb$im_hiqual_dv%in%c(9)]<-1 #low (everything below)
indrespb$maedu[indrespb$im_hiqual_dv%in%c(3,4,5)]<-2 #middle (completed A-level or secondary high school)
indrespb$maedu[indrespb$im_hiqual_dv%in%c(1,2)]<-3 #high (have a degree)
indrespb$maedu[indrespb$maedu==0]<-NA

indrespb$maedu<-factor(indrespb$maedu,levels=c(1,2,3),labels=c('low',"middle","high"))


#the highest education level between two parents
indrespb<-transform(indrespb, parentedu = pmin(im_hiqual_dv, ip_hiqual_dv))
indrespb$parentedu<-ifelse(is.na(indrespb$parentedu), indrespb$im_hiqual_dv, indrespb$parentedu)
indrespb$parentedu<-ifelse(is.na(indrespb$parentedu), indrespb$ip_hiqual_dv, indrespb$parentedu)

indrespb$parent_edu<-c(0)
indrespb$parent_edu[indrespb$parentedu%in%c(9)]<-1 #low (everything below, the category "other" is included)
indrespb$parent_edu[indrespb$parentedu%in%c(3,4,5)]<-2 #middle (complete A-level or have some qualifications)
indrespb$parent_edu[indrespb$parentedu%in%c(1,2)]<-3 #high (have a degree)
indrespb$parent_edu[indrespb$parentedu==0]<-NA

indrespb$parent_edu<-factor(indrespb$parent_edu,levels=c(1,2,3),labels=c('low',"middle","high"))

#two-category education
indrespb$parent_edu2<-c(0)
indrespb$parent_edu2[indrespb$parentedu%in%c(1,2)]<-1 #high (have a degree)
indrespb$parent_edu2[is.na(indrespb$parentedu)]<-NA

indrespb<-indrespb%>%dplyr::select(-parentedu)

#general health of parents**
indrespb<-indrespb%>%mutate(health_father=coalesce(ip_sf1, ip_scsf1))
indrespb<-indrespb%>%mutate(health_mother=coalesce(im_sf1, im_scsf1))
#least healthy parent
indrespb<-transform(indrespb, parenthealth = pmax(health_father, health_mother))
indrespb$parenthealth<-ifelse(is.na(indrespb$parenthealth), indrespb$health_father, indrespb$parenthealth)
indrespb$parenthealth<-ifelse(is.na(indrespb$parenthealth), indrespb$health_mother, indrespb$parenthealth)

#parent's age (youngest)
indrespb <- transform(indrespb, parentage = pmin(ip_age_dv
, im_age_dv))
indrespb$parentage<-ifelse(is.na(indrespb$parentage), indrespb$ip_age_dv, indrespb$parentage)
indrespb$parentage<-ifelse(is.na(indrespb$parentage), indrespb$im_age_dv, indrespb$parentage) 

#parent's income (sum and logged)
indrespb$palnincome<-indrespb$ip_fimnnet_dv+indrespb$im_fimnnet_dv
indrespb$palnincome<-ifelse(is.na(indrespb$palnincome), indrespb$ip_fimnnet_dv, indrespb$palnincome)
indrespb$palnincome<-ifelse(is.na(indrespb$palnincome), indrespb$im_fimnnet_dv, indrespb$palnincome) 

indrespb$palnincome[indrespb$palnincome<0]<-0
#add 1 to all income values to avoid -inf in log transformation
indrespb$paincomeadd<-indrespb$palnincome+1
indrespb$palnincome<-log(indrespb$paincomeadd)
indrespb<-indrespb%>%dplyr::select(-paincomeadd)

#parent's income (quartiles)
indrespb$paincome<-indrespb$ip_fimnnet_dv+indrespb$im_fimnnet_dv
indrespb$paincome<-ifelse(is.na(indrespb$paincome), indrespb$ip_fimnnet_dv, indrespb$paincome)
indrespb$paincome<-ifelse(is.na(indrespb$paincome), indrespb$im_fimnnet_dv, indrespb$paincome) 

print(quantile(indrespb$paincome, probs = c(0,0.25,0.5,0.75,1),na.rm=T))
indrespb$paincomeq<-c(0)
indrespb$paincomeq[indrespb$paincome<1246.52 ]<-1
indrespb$paincomeq[indrespb$paincome>=1246.52  & indrespb$paincome<2010.00]<-2
indrespb$paincomeq[indrespb$paincome>=2010.00  & indrespb$paincome<3175.83]<-3
indrespb$paincomeq[indrespb$paincome>=3175.83]<-4
indrespb$paincomeq[indrespb$paincomeq==0]<-NA


#parental tenure
indrespb$mateure<-c(0)
indrespb$mateure[indrespb$im_tenure_dv%in%c(1,2)]<-1 #ownership
indrespb$mateure[indrespb$im_tenure_dv%in%c(3,4,5)]<-2 #social rent
indrespb$mateure[indrespb$im_tenure_dv%in%c(6,7,8)]<-3 #private rent n other
indrespb$mateure[indrespb$mateure==0]<-NA

indrespb$mateure<-factor(indrespb$mateure,levels=c(1,2,3),labels=c("ownership","social rent","private rent n other"))

indrespb$pateure<-c(0)
indrespb$pateure[indrespb$ip_tenure_dv%in%c(1,2)]<-1 #ownership
indrespb$pateure[indrespb$ip_tenure_dv%in%c(3,4,5)]<-2 #social rent
indrespb$pateure[indrespb$ip_tenure_dv%in%c(6,7,8)]<-3 #private rent n other
indrespb$pateure[indrespb$pateure==0]<-NA

indrespb$pateure<-factor(indrespb$pateure,levels=c(1,2,3),labels=c("ownership","social rent","private rent n other"))

#the parents who have the most adv housing
indrespb <- transform(indrespb, housingtenure = pmin(ip_tenure_dv, im_tenure_dv))
indrespb$housingtenure<-ifelse(is.na(indrespb$housingtenure), indrespb$ip_tenure_dv, indrespb$housingtenure)
indrespb$housingtenure<-ifelse(is.na(indrespb$housingtenure), indrespb$im_tenure_dv, indrespb$housingtenure) 

indrespb$housing_tenure<-c(0)
indrespb$housing_tenure[indrespb$housingtenure%in%c(1,2)]<-1 #ownership
indrespb$housing_tenure[indrespb$housingtenure%in%c(3,4,5)]<-2 #social rent
indrespb$housing_tenure[indrespb$housingtenure%in%c(6,7,8)]<-3 #private rent n other
indrespb$housing_tenure[indrespb$housing_tenure==0]<-NA
indrespb$housing_tenure<-factor(indrespb$housing_tenure,levels=c(1,2,3),labels=c("ownership","social rent","private rent n other"))

indrespb<-indrespb%>%dplyr::select(-housingtenure)

```

```{r}
#cross_wave n interaction variables
#age * parental lnincome
indresp$palnincomeXage<-indresp$palnincome*indrespb$age_centered
#age * parental lnincome quartiles
indresp$paincomeqXage<-indresp$paincomeq*indresp$age_centered

#cross wave identifiers
indresp$wave<-c(0)
indresp$wave[indresp$from_wave_a==1]<-1
indresp$wave[indresp$from_wave_b==1]<-2
indresp$wave[indresp$from_wave_c==1]<-3
indresp$wave[indresp$from_wave_d==1]<-4
indresp$wave[indresp$from_wave_e==1]<-5
indresp$wave[indresp$from_wave_f==1]<-6
indresp$wave[indresp$from_wave_g==1]<-7
indresp$wave[indresp$from_wave_h==1]<-8
indresp$wave[indresp$from_wave_i==1]<-9
indresp$wave[indresp$from_wave_j==1]<-10
indresp$wave[indresp$from_wave_k==1]<-11
indresp$wave[indresp$from_wave_l==1]<-12
indresp$wave[indresp$from_wave_m==1]<-13
indresp$wave<-factor(indresp$wave,levels=c(1,2,3,4,5,6,7,8,9,10,11,12,13),labels=c("wave 1","wave 2","wave 3","wave 4","wave 5",'wave 6', 'wave 7', 'wave 8', 'wave 9', 'wave 10', 'wave 11', 'wave 12', 'wave 13'))


#====indrespa
#cross_wave n interaction variables
#age * parental lnincome
indrespa$palnincomeXage<-indrespa$palnincome*indrespb$age_centered
#age * parental lnincome quartiles
indrespa$paincomeqXage<-indrespa$paincomeq*indrespa$age_centered

#cross wave identifiers
indrespa$wave<-c(0)
indrespa$wave[indrespa$from_wave_a==1]<-1
indrespa$wave[indrespa$from_wave_b==1]<-2
indrespa$wave[indrespa$from_wave_c==1]<-3
indrespa$wave[indrespa$from_wave_d==1]<-4
indrespa$wave[indrespa$from_wave_e==1]<-5
indrespa$wave[indrespa$from_wave_f==1]<-6

indrespa$wave<-factor(indrespa$wave,levels=c(1,2,3,4,5,6),labels=c("wave 1","wave 2","wave 3","wave 4","wave 5",'wave 6'))


#cross_wave n interaction variables
#age * parental lnincome
indrespb$palnincomeXage<-indrespb$palnincome*indrespb$age_centered
#age * parental lnincome quartiles
indrespb$paincomeqXage<-indrespb$paincomeq*indrespb$age_centered

#cross wave identifiers
indrespb$wave<-c(0)
indrespb$wave[indrespb$from_wave_h==1]<-8
indrespb$wave[indrespb$from_wave_i==1]<-9
indrespb$wave[indrespb$from_wave_j==1]<-10
indrespb$wave[indrespb$from_wave_k==1]<-11
indrespb$wave[indrespb$from_wave_l==1]<-12
indrespb$wave[indrespb$from_wave_m==1]<-13

indrespb$wave<-factor(indrespb$wave,levels=c(8,9,10,11,12,13),labels=c("wave 8","wave 9","wave 10","wave 11","wave 12",'wave 13'))

#indrespb<-indrespb%>%dplyr::select(-from_wave_h,-from_wave_i,-from_wave_j,-from_wave_k,-from_wave_l)

```

#### Dependent variables

```{r}
indresp$leave<-c(0)
indresp$leave[indresp$separated%in%c(1,2)]<-1

#wave a leavers
aleave<-indresp[which(indresp$leave==1&indresp$from_wave_a==1),]
#join with b indresp for information
aleave<-join_all(list(aleave,b_indresp), by='pidp', type='left')

aleave$out<-c(0)
#leaving for marriage
aleave$out[aleave$b_mastat_dv%in%c(2,3)& aleave$b_jbstat!=7]<-1

#leaving for cohabitation
aleave$out[aleave$b_mastat_dv%in%c(10) & aleave$b_jbstat!=7]<-2

#leaving as a full-time student
aleave$out[aleave$b_jbstat%in%c(7)]<-3

#leaving for other reasons=0


#wave b leavers
bleave<-indresp[which(indresp$leave==1&indresp$from_wave_b==1),]
#join with c indresp for information
bleave<-join_all(list(bleave, c_indresp), by='pidp', type='left')

bleave$out<-c(0)
#leaving for marriage
bleave$out[bleave$c_mastat_dv%in%c(2,3) & bleave$c_jbstat!=7]<-1

#leaving for coiabitation
bleave$out[bleave$c_mastat_dv%in%c(10) & bleave$c_jbstat!=7]<-2

#leaving as a full-time student
bleave$out[bleave$c_jbstat%in%c(7)]<-3

#leaving for other reasons=0


#wave c leavers
cleave<-indresp[which(indresp$leave==1&indresp$from_wave_c==1),]
#join with d indresp for information
cleave<-join_all(list(cleave, d_indresp), by='pidp', type='left')

cleave$out<-c(0)
#leaving for marriage
cleave$out[cleave$d_mastat_dv%in%c(2,3) & cleave$d_jbstat!=7]<-1

#leaving for coiabitation
cleave$out[cleave$d_mastat_dv%in%c(10) & cleave$d_jbstat!=7]<-2

#leaving as a full-time student
cleave$out[cleave$d_jbstat%in%c(7)]<-3

#leaving for other reasons=0

#wave d leavers
dleave<-indresp[which(indresp$leave==1&indresp$from_wave_d==1),]
#join with e indresp for information
dleave<-join_all(list(dleave, e_indresp), by='pidp', type='left')

dleave$out<-c(0)
#leaving for marriage
dleave$out[dleave$e_mastat_dv%in%c(2,3) & dleave$e_jbstat!=7]<-1

#leaving for cohabitation
dleave$out[dleave$e_mastat_dv%in%c(10) & dleave$e_jbstat!=7]<-2

#leaving as a full-time student
dleave$out[dleave$e_jbstat%in%c(7)]<-3

#leaving for other reasons=0

#wave e leavers
eleave<-indresp[which(indresp$leave==1&indresp$from_wave_e==1),]
#join with m indresp for information
eleave<-join_all(list(eleave, f_indresp), by='pidp', type='left')

eleave$out<-c(0)
#leaving for marriage
eleave$out[eleave$f_mastat_dv%in%c(2,3) & eleave$f_jbstat!=7]<-1

#leaving for coiabitation
eleave$out[eleave$f_mastat_dv%in%c(10) & eleave$f_jbstat!=7]<-2

#leaving as a full-time student
eleave$out[eleave$f_jbstat%in%c(7)]<-3

#wave f leavers
fleave<-indresp[which(indresp$leave==1&indresp$from_wave_f==1),]
#join with m indresp for information
fleave<-join_all(list(fleave, g_indresp), by='pidp', type='left')

fleave$out<-c(0)
#leaving for marriage
fleave$out[fleave$g_mastat_dv%in%c(2,3) & fleave$g_jbstat!=7]<-1

#leaving for coiabitation
fleave$out[fleave$g_mastat_dv%in%c(10) & fleave$g_jbstat!=7]<-2

#leaving as a full-time student
fleave$out[fleave$g_jbstat%in%c(7)]<-3

#leaving for other reasons=0

#wave g leavers
gleave<-indresp[which(indresp$leave==1&indresp$from_wave_g==1),]
#join with m indresp for information
gleave<-join_all(list(gleave, h_indresp), by='pidp', type='left')

gleave$out<-c(0)
#leaving for marriage
gleave$out[fleave$h_mastat_dv%in%c(2,3) & fleave$h_jbstat!=7]<-1

#leaving for coiabitation
gleave$out[fleave$h_mastat_dv%in%c(10) & fleave$h_jbstat!=7]<-2

#leaving as a full-time student
gleave$out[fleave$h_jbstat%in%c(7)]<-3

#leaving for other reasons=0


#wave h leavers
hleave<-indresp[which(indresp$leave==1&indresp$from_wave_h==1),]
#join with i indresp for information
hleave<-join_all(list(hleave,i_indresp), by='pidp', type='left')

hleave$out<-c(0)
#leaving for marriage
hleave$out[hleave$i_mastat_dv%in%c(2,3)& hleave$i_jbstat!=7]<-1

#leaving for cohabitation
hleave$out[hleave$i_mastat_dv%in%c(10) & hleave$i_jbstat!=7]<-2

#leaving as a full-time student
hleave$out[hleave$i_jbstat%in%c(7)]<-3

#leaving for other reasons=0


#wave i leavers
ileave<-indresp[which(indresp$leave==1&indresp$from_wave_i==1),]
#join with j indresp for information
ileave<-join_all(list(ileave, j_indresp), by='pidp', type='left')

ileave$out<-c(0)
#leaving for marriage
ileave$out[ileave$j_mastat_dv%in%c(2,3) & ileave$j_jbstat!=7]<-1

#leaving for coiabitation
ileave$out[ileave$j_mastat_dv%in%c(10) & ileave$j_jbstat!=7]<-2

#leaving as a full-time student
ileave$out[ileave$j_jbstat%in%c(7)]<-3

#leaving for other reasons=0


#wave j leavers
jleave<-indresp[which(indresp$leave==1&indresp$from_wave_j==1),]
#join with k indresp for information
jleave<-join_all(list(jleave, k_indresp), by='pidp', type='left')

jleave$out<-c(0)
#leaving for marriage
jleave$out[jleave$k_mastat_dv%in%c(2,3) & jleave$k_jbstat!=7]<-1

#leaving for coiabitation
jleave$out[jleave$k_mastat_dv%in%c(10) & jleave$k_jbstat!=7]<-2

#leaving as a full-time student
jleave$out[jleave$k_jbstat%in%c(7)]<-3

#leaving for other reasons=0

#wave k leavers
kleave<-indresp[which(indresp$leave==1&indresp$from_wave_k==1),]
#join with l indresp for information
kleave<-join_all(list(kleave, l_indresp), by='pidp', type='left')

kleave$out<-c(0)
#leaving for marriage
kleave$out[kleave$l_mastat_dv%in%c(2,3) & kleave$l_jbstat!=7]<-1

#leaving for cohabitation
kleave$out[kleave$l_mastat_dv%in%c(10) & kleave$l_jbstat!=7]<-2

#leaving as a full-time student
kleave$out[kleave$l_jbstat%in%c(7)]<-3

#leaving for other reasons=0

#wave l leavers
lleave<-indresp[which(indresp$leave==1&indresp$from_wave_l==1),]
#join with m indresp for information
lleave<-join_all(list(lleave, m_indresp), by='pidp', type='left')

lleave$out<-c(0)
#leaving for marriage
lleave$out[lleave$m_mastat_dv%in%c(2,3) & lleave$m_jbstat!=7]<-1

#leaving for coiabitation
lleave$out[lleave$m_mastat_dv%in%c(10) & lleave$m_jbstat!=7]<-2

#leaving as a full-time student
lleave$out[lleave$m_jbstat%in%c(7)]<-3

#wave m leavers
mleave<-indresp[which(indresp$leave==1&indresp$from_wave_m==1),]
#join with m indresp for information
mleave<-join_all(list(mleave, n_indresp), by='pidp', type='left')

mleave$out<-c(0)
#leaving for marriage
mleave$out[mleave$n_mastat_dv%in%c(2,3) & mleave$n_jbstat!=7]<-1

#leaving for coiabitation
mleave$out[mleave$n_mastat_dv%in%c(10) & mleave$n_jbstat!=7]<-2

#leaving as a full-time student
mleave$out[mleave$n_jbstat%in%c(7)]<-3


#leaving for other reasons=0
out<-rbind.fill(aleave,bleave,cleave,dleave,eleave,fleave,gleave,hleave,ileave,jleave,kleave,lleave,mleave)
out<-out%>%dplyr::select(pidp,wave,out)
indresp<-join_all(list(indresp,out), by=c("pidp", "wave"), type='left')


#===indrespa
indrespa$leave<-c(0)
indrespa$leave[indrespa$separated%in%c(1,2)]<-1

#wave a leavers
aleave<-indrespa[which(indrespa$leave==1&indrespa$from_wave_a==1),]
#join with b indresp for information
aleave<-join_all(list(aleave,b_indresp), by='pidp', type='left')

aleave$out<-c(0)
#leaving for marriage
aleave$out[aleave$b_mastat_dv%in%c(2,3)& aleave$b_jbstat!=7]<-1

#leaving for cohabitation
aleave$out[aleave$b_mastat_dv%in%c(10) & aleave$b_jbstat!=7]<-2

#leaving as a full-time student
aleave$out[aleave$b_jbstat%in%c(7)]<-3

#leaving for other reasons=0


#wave b leavers
bleave<-indrespa[which(indrespa$leave==1&indrespa$from_wave_b==1),]
#join with c indresp for information
bleave<-join_all(list(bleave, c_indresp), by='pidp', type='left')

bleave$out<-c(0)
#leaving for marriage
bleave$out[bleave$c_mastat_dv%in%c(2,3) & bleave$c_jbstat!=7]<-1

#leaving for coiabitation
bleave$out[bleave$c_mastat_dv%in%c(10) & bleave$c_jbstat!=7]<-2

#leaving as a full-time student
bleave$out[bleave$c_jbstat%in%c(7)]<-3

#leaving for other reasons=0


#wave c leavers
cleave<-indrespa[which(indrespa$leave==1&indrespa$from_wave_c==1),]
#join with d indresp for information
cleave<-join_all(list(cleave, d_indresp), by='pidp', type='left')

cleave$out<-c(0)
#leaving for marriage
cleave$out[cleave$d_mastat_dv%in%c(2,3) & cleave$d_jbstat!=7]<-1

#leaving for coiabitation
cleave$out[cleave$d_mastat_dv%in%c(10) & cleave$d_jbstat!=7]<-2

#leaving as a full-time student
cleave$out[cleave$d_jbstat%in%c(7)]<-3

#leaving for other reasons=0

#wave d leavers
dleave<-indrespa[which(indrespa$leave==1&indrespa$from_wave_d==1),]
#join with e indresp for information
dleave<-join_all(list(dleave, e_indresp), by='pidp', type='left')

dleave$out<-c(0)
#leaving for marriage
dleave$out[dleave$e_mastat_dv%in%c(2,3) & dleave$e_jbstat!=7]<-1

#leaving for cohabitation
dleave$out[dleave$e_mastat_dv%in%c(10) & dleave$e_jbstat!=7]<-2

#leaving as a full-time student
dleave$out[dleave$e_jbstat%in%c(7)]<-3

#leaving for other reasons=0

#wave e leavers
eleave<-indrespa[which(indrespa$leave==1&indrespa$from_wave_e==1),]
#join with m indresp for information
eleave<-join_all(list(eleave, f_indresp), by='pidp', type='left')

eleave$out<-c(0)
#leaving for marriage
eleave$out[eleave$f_mastat_dv%in%c(2,3) & eleave$f_jbstat!=7]<-1

#leaving for coiabitation
eleave$out[eleave$f_mastat_dv%in%c(10) & eleave$f_jbstat!=7]<-2

#leaving as a full-time student
eleave$out[eleave$f_jbstat%in%c(7)]<-3

#wave f leavers
fleave<-indrespa[which(indrespa$leave==1&indrespa$from_wave_f==1),]
#join with m indresp for information
fleave<-join_all(list(fleave, g_indresp), by='pidp', type='left')

fleave$out<-c(0)
#leaving for marriage
fleave$out[fleave$g_mastat_dv%in%c(2,3) & fleave$g_jbstat!=7]<-1

#leaving for coiabitation
fleave$out[fleave$g_mastat_dv%in%c(10) & fleave$g_jbstat!=7]<-2

#leaving as a full-time student
fleave$out[fleave$g_jbstat%in%c(7)]<-3

#leaving for other reasons=0

out<-rbind.fill(aleave,bleave,cleave,dleave,eleave,fleave)
out<-out%>%dplyr::select(pidp,wave,out)
indrespa<-join_all(list(indrespa,out), by=c("pidp", "wave"), type='left')

#==indrespb
indrespb$leave<-c(0)
indrespb$leave[indrespb$separated%in%c(1,2)]<-1

#wave h leavers
hleave<-indrespb[which(indrespb$leave==1&indrespb$from_wave_h==1),]
#join with i indresp for information
hleave<-join_all(list(hleave,i_indresp), by='pidp', type='left')

hleave$out<-c(0)
#leaving for marriage
hleave$out[hleave$i_mastat_dv%in%c(2,3)& hleave$i_jbstat!=7]<-1

#leaving for cohabitation
hleave$out[hleave$i_mastat_dv%in%c(10) & hleave$i_jbstat!=7]<-2

#leaving as a full-time student
hleave$out[hleave$i_jbstat%in%c(7)]<-3

#leaving for other reasons=0


#wave i leavers
ileave<-indrespb[which(indrespb$leave==1&indrespb$from_wave_i==1),]
#join with j indresp for information
ileave<-join_all(list(ileave, j_indresp), by='pidp', type='left')

ileave$out<-c(0)
#leaving for marriage
ileave$out[ileave$j_mastat_dv%in%c(2,3) & ileave$j_jbstat!=7]<-1

#leaving for coiabitation
ileave$out[ileave$j_mastat_dv%in%c(10) & ileave$j_jbstat!=7]<-2

#leaving as a full-time student
ileave$out[ileave$j_jbstat%in%c(7)]<-3

#leaving for other reasons=0


#wave j leavers
jleave<-indrespb[which(indrespb$leave==1&indrespb$from_wave_j==1),]
#join with k indresp for information
jleave<-join_all(list(jleave, k_indresp), by='pidp', type='left')

jleave$out<-c(0)
#leaving for marriage
jleave$out[jleave$k_mastat_dv%in%c(2,3) & jleave$k_jbstat!=7]<-1

#leaving for coiabitation
jleave$out[jleave$k_mastat_dv%in%c(10) & jleave$k_jbstat!=7]<-2

#leaving as a full-time student
jleave$out[jleave$k_jbstat%in%c(7)]<-3

#leaving for other reasons=0

#wave k leavers
kleave<-indrespb[which(indrespb$leave==1&indrespb$from_wave_k==1),]
#join with l indresp for information
kleave<-join_all(list(kleave, l_indresp), by='pidp', type='left')

kleave$out<-c(0)
#leaving for marriage
kleave$out[kleave$l_mastat_dv%in%c(2,3) & kleave$l_jbstat!=7]<-1

#leaving for cohabitation
kleave$out[kleave$l_mastat_dv%in%c(10) & kleave$l_jbstat!=7]<-2

#leaving as a full-time student
kleave$out[kleave$l_jbstat%in%c(7)]<-3

#leaving for other reasons=0

#wave l leavers
lleave<-indrespb[which(indrespb$leave==1&indrespb$from_wave_l==1),]
#join with m indresp for information
lleave<-join_all(list(lleave, m_indresp), by='pidp', type='left')

lleave$out<-c(0)
#leaving for marriage
lleave$out[lleave$m_mastat_dv%in%c(2,3) & lleave$m_jbstat!=7]<-1

#leaving for coiabitation
lleave$out[lleave$m_mastat_dv%in%c(10) & lleave$m_jbstat!=7]<-2

#leaving as a full-time student
lleave$out[lleave$m_jbstat%in%c(7)]<-3

#wave m leavers
mleave<-indrespb[which(indrespb$leave==1&indrespb$from_wave_m==1),]
#join with m indresp for information
mleave<-join_all(list(mleave, n_indresp), by='pidp', type='left')

mleave$out<-c(0)
#leaving for marriage
mleave$out[mleave$n_mastat_dv%in%c(2,3) & mleave$n_jbstat!=7]<-1

#leaving for coiabitation
mleave$out[mleave$n_mastat_dv%in%c(10) & mleave$n_jbstat!=7]<-2

#leaving as a full-time student
mleave$out[mleave$n_jbstat%in%c(7)]<-3


#leaving for other reasons=0
out<-rbind.fill(hleave,ileave,jleave,kleave,lleave,mleave)
out<-out%>%dplyr::select(pidp,wave,out)
indrespb<-join_all(list(indrespb,out), by=c("pidp", "wave"), type='left')

```

```{r}
#mar
indresp$mar<-c(0)
indresp$mar[indresp$out==1]<-1

#cohab
indresp$cohab<-c(0)
indresp$cohab[indresp$out==2]<-1

#student
indresp$student<-c(0)
indresp$student[indresp$out==3]<-1

#other
indresp$other<-c(0)
indresp$other[indresp$out==0]<-1

#a======
#mar
indrespa$mar<-c(0)
indrespa$mar[indrespa$out==1]<-1

#cohab
indrespa$cohab<-c(0)
indrespa$cohab[indrespa$out==2]<-1

#student
indrespa$student<-c(0)
indrespa$student[indrespa$out==3]<-1

#other
indrespa$other<-c(0)
indrespa$other[indrespa$out==0]<-1

#b======
#mar
indrespb$mar<-c(0)
indrespb$mar[indrespb$out==1]<-1

#cohab
indrespb$cohab<-c(0)
indrespb$cohab[indrespb$out==2]<-1

#student
indrespb$student<-c(0)
indrespb$student[indrespb$out==3]<-1

#other
indrespb$other<-c(0)
indrespb$other[indrespb$out==0]<-1
```

# Model building

### Wave 1-13

```{r}
indrespfy<-indresp[which(indresp$sex==1),]
indrespmy<-indresp[which(indresp$sex==0),]

mar_f<-glm(mar~palnincome+palnincomeXage+factor(parent_edu2)+factor(housing_tenure)+parenthealth+parentage+factor(liveboth)+age_centered+lnincome+factor(edu2)+factor(family_status)+factor(racel2)+factor(student)+factor(unemployed)+factor(urban)+factor(houseprices)+factor(large_hh)+factor(wave),data=indrespfy,family=binomial(link="logit"))


cohab_f<-glm(cohab~palnincome+palnincomeXage+factor(parent_edu2)+factor(housing_tenure)+parenthealth+parentage+factor(liveboth)+age_centered+lnincome+factor(edu2)+factor(family_status)+factor(racel2)+factor(student)+factor(unemployed)+factor(urban)+factor(houseprices)+factor(large_hh)+factor(wave),data=indrespfy,family=binomial(link="logit"))

student_f<-glm(student~palnincome+palnincomeXage+factor(parent_edu2)+factor(housing_tenure)+parenthealth+parentage+factor(liveboth)+age_centered+lnincome+factor(edu2)+factor(family_status)+factor(racel2)+factor(student)+factor(unemployed)+factor(urban)+factor(houseprices)+factor(large_hh)+factor(wave),data=indrespfy,family=binomial(link="logit"))

all_f<-glm(leave~palnincome+palnincomeXage+factor(parent_edu2)+factor(housing_tenure)+parenthealth+parentage+factor(liveboth)+age_centered+lnincome+factor(edu2)+factor(family_status)+factor(racel2)+factor(student)+factor(unemployed)+factor(urban)+factor(houseprices)+factor(large_hh)+factor(wave),data=indrespfy,family=binomial(link="logit"))


#paincomeXage effects more strongly for men=====
mar_m<-glm(mar~palnincome+palnincomeXage+factor(parent_edu2)+factor(housing_tenure)+parenthealth+parentage+factor(liveboth)+age_centered+lnincome+factor(edu2)+factor(family_status)+factor(racel2)+factor(student)+factor(unemployed)+factor(urban)+factor(houseprices)+factor(large_hh)+factor(wave),data=indrespmy,family=binomial(link="logit"))


cohab_m<-glm(cohab~palnincome+palnincomeXage+factor(parent_edu2)+factor(housing_tenure)+parenthealth+parentage+factor(liveboth)+age_centered+lnincome+factor(edu2)+factor(family_status)+factor(racel2)+factor(student)+factor(unemployed)+factor(urban)+factor(houseprices)+factor(large_hh)+factor(wave),data=indrespmy,family=binomial(link="logit"))

student_m<-glm(student~palnincome+palnincomeXage+factor(parent_edu2)+factor(housing_tenure)+parenthealth+parentage+factor(liveboth)+age_centered+lnincome+factor(edu2)+factor(family_status)+factor(racel2)+factor(student)+factor(unemployed)+factor(urban)+factor(houseprices)+factor(large_hh)+factor(wave),data=indrespmy,family=binomial(link="logit"))

all_m<-glm(leave~palnincome+palnincomeXage+factor(parent_edu2)+factor(housing_tenure)+parenthealth+parentage+factor(liveboth)+age_centered+lnincome+factor(edu2)+factor(family_status)+factor(racel2)+factor(student)+factor(unemployed)+factor(urban)+factor(houseprices)+factor(large_hh)+factor(wave),data=indrespmy,family=binomial(link="logit"))

#all============
mar<-glm(mar~palnincome+palnincomeXage+factor(parent_edu2)+factor(housing_tenure)+parenthealth+parentage+factor(liveboth)+age_centered+factor(sex)+lnincome+factor(edu2)+factor(family_status)+factor(racel2)+factor(student)+factor(unemployed)+factor(urban)+factor(houseprices)+factor(large_hh)+factor(wave),data=indresp,family=binomial(link="logit"))


cohab<-glm(cohab~palnincome+palnincomeXage+factor(parent_edu2)+factor(housing_tenure)+parenthealth+parentage+factor(liveboth)+age_centered+factor(sex)+lnincome+factor(edu2)+factor(family_status)+factor(racel2)+factor(student)+factor(unemployed)+factor(urban)+factor(houseprices)+factor(large_hh)+factor(wave),data=indresp,family=binomial(link="logit"))

student<-glm(student~palnincome+palnincomeXage+factor(parent_edu2)+factor(housing_tenure)+parenthealth+parentage+factor(liveboth)+age_centered+factor(sex)+lnincome+factor(edu2)+factor(family_status)+factor(racel2)+factor(student)+factor(unemployed)+factor(urban)+factor(houseprices)+factor(large_hh)+factor(wave),data=indresp,family=binomial(link="logit"))

other<-glm(other~palnincome+palnincomeXage+factor(parent_edu2)+factor(housing_tenure)+parenthealth+parentage+factor(liveboth)+age_centered+factor(sex)+lnincome+factor(edu2)+factor(family_status)+factor(racel2)+factor(student)+factor(unemployed)+factor(urban)+factor(houseprices)+factor(large_hh)+factor(wave),data=indresp,family=binomial(link="logit"))

all<-glm(leave~palnincome+palnincomeXage+factor(parent_edu2)+factor(housing_tenure)+parenthealth+parentage+factor(liveboth)+age_centered+factor(sex)+lnincome+factor(edu2)+factor(family_status)+factor(racel2)+factor(student)+factor(unemployed)+factor(urban)+factor(houseprices)+factor(large_hh)+factor(wave),data=indresp,family=binomial(link="logit"))

```

### Wave 1-7

```{r}
indrespafy<-indrespa[which(indrespa$sex==1),]
indrespamy<-indrespa[which(indrespa$sex==0),]

mar_af<-glm(mar~palnincome+palnincomeXage+factor(parent_edu2)+factor(housing_tenure)+parenthealth+parentage+factor(liveboth)+age_centered+lnincome+factor(edu2)+factor(family_status)+factor(racel2)+factor(student)+factor(unemployed)+factor(urban)+factor(houseprices)+factor(large_hh)+factor(wave),data=indrespafy,family=binomial(link="logit"))


cohab_af<-glm(cohab~palnincome+palnincomeXage+factor(parent_edu2)+factor(housing_tenure)+parenthealth+parentage+factor(liveboth)+age_centered+lnincome+factor(edu2)+factor(family_status)+factor(racel2)+factor(student)+factor(unemployed)+factor(urban)+factor(houseprices)+factor(large_hh)+factor(wave),data=indrespafy,family=binomial(link="logit"))

student_af<-glm(student~palnincome+palnincomeXage+factor(parent_edu2)+factor(housing_tenure)+parenthealth+parentage+factor(liveboth)+age_centered+lnincome+factor(edu2)+factor(family_status)+factor(racel2)+factor(student)+factor(unemployed)+factor(urban)+factor(houseprices)+factor(large_hh)+factor(wave),data=indrespafy,family=binomial(link="logit"))

all_af<-glm(leave~palnincome+palnincomeXage+factor(parent_edu2)+factor(housing_tenure)+parenthealth+parentage+factor(liveboth)+age_centered+lnincome+factor(edu2)+factor(family_status)+factor(racel2)+factor(student)+factor(unemployed)+factor(urban)+factor(houseprices)+factor(large_hh)+factor(wave),data=indrespafy,family=binomial(link="logit"))


#paincomeXage effects more strongly for men=====
mar_am<-glm(mar~palnincome+palnincomeXage+factor(parent_edu2)+factor(housing_tenure)+parenthealth+parentage+factor(liveboth)+age_centered+lnincome+factor(edu2)+factor(family_status)+factor(racel2)+factor(student)+factor(unemployed)+factor(urban)+factor(houseprices)+factor(large_hh)+factor(wave),data=indrespamy,family=binomial(link="logit"))


cohab_am<-glm(cohab~palnincome+palnincomeXage+factor(parent_edu2)+factor(housing_tenure)+parenthealth+parentage+factor(liveboth)+age_centered+lnincome+factor(edu2)+factor(family_status)+factor(racel2)+factor(student)+factor(unemployed)+factor(urban)+factor(houseprices)+factor(large_hh)+factor(wave),data=indrespamy,family=binomial(link="logit"))

student_am<-glm(student~palnincome+palnincomeXage+factor(parent_edu2)+factor(housing_tenure)+parenthealth+parentage+factor(liveboth)+age_centered+lnincome+factor(edu2)+factor(family_status)+factor(racel2)+factor(student)+factor(unemployed)+factor(urban)+factor(houseprices)+factor(large_hh)+factor(wave),data=indrespamy,family=binomial(link="logit"))

all_am<-glm(leave~palnincome+palnincomeXage+factor(parent_edu2)+factor(housing_tenure)+parenthealth+parentage+factor(liveboth)+age_centered+lnincome+factor(edu2)+factor(family_status)+factor(racel2)+factor(student)+factor(unemployed)+factor(urban)+factor(houseprices)+factor(large_hh)+factor(wave),data=indrespamy,family=binomial(link="logit"))

#all============
mar_a<-glm(mar~palnincome+palnincomeXage+factor(parent_edu2)+factor(housing_tenure)+parenthealth+parentage+factor(liveboth)+age_centered+factor(sex)+lnincome+factor(edu2)+factor(family_status)+factor(racel2)+factor(student)+factor(unemployed)+factor(urban)+factor(houseprices)+factor(large_hh)+factor(wave),data=indrespa,family=binomial(link="logit"))


cohab_a<-glm(cohab~palnincome+palnincomeXage+factor(parent_edu2)+factor(housing_tenure)+parenthealth+parentage+factor(liveboth)+age_centered+factor(sex)+lnincome+factor(edu2)+factor(family_status)+factor(racel2)+factor(student)+factor(unemployed)+factor(urban)+factor(houseprices)+factor(large_hh)+factor(wave),data=indrespa,family=binomial(link="logit"))

student_a<-glm(student~palnincome+palnincomeXage+factor(parent_edu2)+factor(housing_tenure)+parenthealth+parentage+factor(liveboth)+age_centered+factor(sex)+lnincome+factor(edu2)+factor(family_status)+factor(racel2)+factor(student)+factor(unemployed)+factor(urban)+factor(houseprices)+factor(large_hh)+factor(wave),data=indrespa,family=binomial(link="logit"))

other_a<-glm(other~palnincome+palnincomeXage+factor(parent_edu2)+factor(housing_tenure)+parenthealth+parentage+factor(liveboth)+age_centered+factor(sex)+lnincome+factor(edu2)+factor(family_status)+factor(racel2)+factor(student)+factor(unemployed)+factor(urban)+factor(houseprices)+factor(large_hh)+factor(wave),data=indrespa,family=binomial(link="logit"))

all_a<-glm(leave~palnincome+palnincomeXage+factor(parent_edu2)+factor(housing_tenure)+parenthealth+parentage+factor(liveboth)+age_centered+factor(sex)+lnincome+factor(edu2)+factor(family_status)+factor(racel2)+factor(student)+factor(unemployed)+factor(urban)+factor(houseprices)+factor(large_hh)+factor(wave),data=indrespa,family=binomial(link="logit"))


```

### Wave 9-13

```{r}
indrespbfy<-indrespb[which(indrespb$sex==1),]
indrespbmy<-indrespb[which(indrespb$sex==0),]

mar_bf<-glm(mar~palnincome+palnincomeXage+factor(parent_edu2)+factor(housing_tenure)+parenthealth+parentage+factor(liveboth)+age_centered+lnincome+factor(edu2)+factor(family_status)+factor(racel2)+factor(student)+factor(unemployed)+factor(urban)+factor(houseprices)+factor(large_hh)+factor(wave),data=indrespbfy,family=binomial(link="logit"))


cohab_bf<-glm(cohab~palnincome+palnincomeXage+factor(parent_edu2)+factor(housing_tenure)+parenthealth+parentage+factor(liveboth)+age_centered+lnincome+factor(edu2)+factor(family_status)+factor(racel2)+factor(student)+factor(unemployed)+factor(urban)+factor(houseprices)+factor(large_hh)+factor(wave),data=indrespbfy,family=binomial(link="logit"))

student_bf<-glm(student~palnincome+palnincomeXage+factor(parent_edu2)+factor(housing_tenure)+parenthealth+parentage+factor(liveboth)+age_centered+lnincome+factor(edu2)+factor(family_status)+factor(racel2)+factor(student)+factor(unemployed)+factor(urban)+factor(houseprices)+factor(large_hh)+factor(wave),data=indrespbfy,family=binomial(link="logit"))

all_bf<-glm(leave~palnincome+palnincomeXage+factor(parent_edu2)+factor(housing_tenure)+parenthealth+parentage+factor(liveboth)+age_centered+lnincome+factor(edu2)+factor(family_status)+factor(racel2)+factor(student)+factor(unemployed)+factor(urban)+factor(houseprices)+factor(large_hh)+factor(wave),data=indrespbfy,family=binomial(link="logit"))


#paincomeXage effects more strongly for men=====
mar_bm<-glm(mar~palnincome+palnincomeXage+factor(parent_edu2)+factor(housing_tenure)+parenthealth+parentage+factor(liveboth)+age_centered+lnincome+factor(edu2)+factor(family_status)+factor(racel2)+factor(student)+factor(unemployed)+factor(urban)+factor(houseprices)+factor(large_hh)+factor(wave),data=indrespbmy,family=binomial(link="logit"))


cohab_bm<-glm(cohab~palnincome+palnincomeXage+factor(parent_edu2)+factor(housing_tenure)+parenthealth+parentage+factor(liveboth)+age_centered+lnincome+factor(edu2)+factor(family_status)+factor(racel2)+factor(student)+factor(unemployed)+factor(urban)+factor(houseprices)+factor(large_hh)+factor(wave),data=indrespbmy,family=binomial(link="logit"))

student_bm<-glm(student~palnincome+palnincomeXage+factor(parent_edu2)+factor(housing_tenure)+parenthealth+parentage+factor(liveboth)+age_centered+lnincome+factor(edu2)+factor(family_status)+factor(racel2)+factor(student)+factor(unemployed)+factor(urban)+factor(houseprices)+factor(large_hh)+factor(wave),data=indrespbmy,family=binomial(link="logit"))

all_bm<-glm(leave~palnincome+palnincomeXage+factor(parent_edu2)+factor(housing_tenure)+parenthealth+parentage+factor(liveboth)+age_centered+lnincome+factor(edu2)+factor(family_status)+factor(racel2)+factor(student)+factor(unemployed)+factor(urban)+factor(houseprices)+factor(large_hh)+factor(wave),data=indrespbmy,family=binomial(link="logit"))

#all============
mar_b<-glm(mar~palnincome+palnincomeXage+factor(parent_edu2)+factor(housing_tenure)+parenthealth+parentage+factor(liveboth)+age_centered+factor(sex)+lnincome+factor(edu2)+factor(family_status)+factor(racel2)+factor(student)+factor(unemployed)+factor(urban)+factor(houseprices)+factor(large_hh)+factor(wave),data=indrespb,family=binomial(link="logit"))


cohab_b<-glm(cohab~palnincome+palnincomeXage+factor(parent_edu2)+factor(housing_tenure)+parenthealth+parentage+factor(liveboth)+age_centered+factor(sex)+lnincome+factor(edu2)+factor(family_status)+factor(racel2)+factor(student)+factor(unemployed)+factor(urban)+factor(houseprices)+factor(large_hh)+factor(wave),data=indrespb,family=binomial(link="logit"))

student_b<-glm(student~palnincome+palnincomeXage+factor(parent_edu2)+factor(housing_tenure)+parenthealth+parentage+factor(liveboth)+age_centered+factor(sex)+lnincome+factor(edu2)+factor(family_status)+factor(racel2)+factor(student)+factor(unemployed)+factor(urban)+factor(houseprices)+factor(large_hh)+factor(wave),data=indrespb,family=binomial(link="logit"))

other_b<-glm(other~palnincome+palnincomeXage+factor(parent_edu2)+factor(housing_tenure)+parenthealth+parentage+factor(liveboth)+age_centered+factor(sex)+lnincome+factor(edu2)+factor(family_status)+factor(racel2)+factor(student)+factor(unemployed)+factor(urban)+factor(houseprices)+factor(large_hh)+factor(wave),data=indrespb,family=binomial(link="logit"))

all_b<-glm(leave~palnincome+palnincomeXage+factor(parent_edu2)+factor(housing_tenure)+parenthealth+parentage+factor(liveboth)+age_centered+factor(sex)+lnincome+factor(edu2)+factor(family_status)+factor(racel2)+factor(student)+factor(unemployed)+factor(urban)+factor(houseprices)+factor(large_hh)+factor(wave),data=indrespb,family=binomial(link="logit"))

```

```{r}
#how many boomerang
counts<-indrespb
counts$separate<-ifelse(counts$separated%in%c(1,2),counts$separate<-1,counts$separate<-0)

counts <- counts%>%dplyr::group_by(pidp)%>%dplyr::count(separate)
counts<-as.data.frame(counts)

test<-counts[which(counts$separate==1),]

table(test$n)

17/7421
```

## rPlotting results

```{r}
convertModel <- function(model) {
  tr <- createTexreg(
    coef.names = names(model$coef), 
    coef = as.numeric(summary(model)$coefficients[,1]), 
    se = as.numeric(summary(model)$coefficients[,2]), 
    pvalues = as.numeric(summary(model)$coefficients[,4]),
    gof.names = c("N","AIC"), 
    gof = c(nobs(model),AIC(model)), 
    gof.decimal = c(F,F)

  )
}

        
#comparing male/female, time of leaving, leaving destinations (mar cohab) in the two period
p0<-huxtablereg(lapply(list(all_f,all_m), convertModel))
p1<-huxtablereg(lapply(list(all_af,all_bf,all_am,all_bm), convertModel))
p2<-huxtablereg(lapply(list(all_a,all_b), convertModel))
p3<-huxtablereg(lapply(list(mar_a,mar_b,cohab_a,cohab_b), convertModel))

#full and nested models for all_a
nest1<-glm(leave~age_centered,data=indrespa,family=binomial(link="logit"))

nest2<-glm(leave~age_centered+palnincome+palnincomeXage+factor(parent_edu2)+factor(housing_tenure)+parenthealth+parentage+factor(liveboth),data=indrespa,family=binomial(link="logit"))

p4<-huxtablereg(lapply(list(nest1,nest2,all_a), convertModel))

#full and nested models for all_b
nest3<-glm(leave~age_centered,data=indrespb,family=binomial(link="logit"))

nest4<-glm(leave~age_centered+palnincome+palnincomeXage+factor(parent_edu2)+factor(housing_tenure)+parenthealth+parentage+factor(liveboth),data=indrespb,family=binomial(link="logit"))

p5<-huxtablereg(lapply(list(nest3,nest4,all_b), convertModel))
```

## For data without IEMB N EMB

```{r}
indrespbc<-indrespb[which(!(indrespb$iemb%in%(1))),]
indrespbc<-indrespbc[which(!(indrespbc$emboost%in%(1))),]

indrespbfyc<-indrespb[which(indrespbc$sex==1),]
indrespbmyc<-indrespb[which(indrespbc$sex==0),]

all_bfc<-glm(leave~palnincome+palnincomeXage+factor(parent_edu2)+factor(housing_tenure)+parenthealth+parentage+factor(liveboth)+age_centered+lnincome+factor(edu2)+factor(family_status)+factor(racel2)+factor(student)+factor(unemployed)+factor(urban)+factor(houseprices)+factor(large_hh)+factor(wave),data=indrespbfyc,family=binomial(link="logit"))

all_bmc<-glm(leave~palnincome+palnincomeXage+factor(parent_edu2)+factor(housing_tenure)+parenthealth+parentage+factor(liveboth)+age_centered+lnincome+factor(edu2)+factor(family_status)+factor(racel2)+factor(student)+factor(unemployed)+factor(urban)+factor(houseprices)+factor(large_hh)+factor(wave),data=indrespbmyc,family=binomial(link="logit"))
```

# Check assumptions

```{r}
view(dfSummary(indrespa))
view(dfSummary(indrespb))
```
